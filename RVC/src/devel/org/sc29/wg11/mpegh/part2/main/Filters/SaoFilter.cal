/*
 * Copyright (c) 2012, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
package devel.org.sc29.wg11.mpegh.part2.main.Filters;

import std.util.Math.*;
import devel.org.sc29.wg11.mpegh.part2.common.CommonConstantHEVC.*;

//There should be much less division.
//There should be a function for the code which test if two pixels are in the same slice thanks to the variable filtAcrSlc.
actor SaoFilter(bool DEBUG)
	uint(size=2)  IsPicSlcLcu,
	uint(size=8)  LcuSizeMax,
	uint(size=2)  LFAcrossSlcTile,
	uint(size=16) PicSize,
	uint(size=8)  SampleIn,
	int (size=9)  SaoSe,
	uint(size=16) TilesCoord
		==>
	uint(size=8)  FiltSample
		:
		
	bool DEBUG_Trace = false;
		
	uint(size=4)  BIT_DEPTH = 8;

	int(size=3) constHPos0[4][2] = [[-1,1],  [ 0,0], [-1,1],  [ 1,-1]];
	int(size=3) constVPos0[4][2] = [[ 0,0],  [-1,1], [-1,1],  [-1, 1]];
	int(size=3) edgeIdxConv[5] = [1, 2, 0, 3, 4];
	
	int(size=2) signResult[3][128][128];

	bool          slcSaoCompEn[3];

	uint(size=8) OrigPict[3][PICT_HEIGHT][PICT_WIDTH];
	uint(size=8) FiltPict[3][PICT_HEIGHT][PICT_WIDTH];
	
	uint(size=2)  cIdx;
	uint(size=2)  saoTypeIdx[PICT_WIDTH/64][PICT_HEIGHT/64][3];
	int (size=9)  saoOffset[PICT_WIDTH/64][PICT_HEIGHT/64][3][5];
	uint(size=2)  saoEoClass[PICT_WIDTH/64][PICT_HEIGHT/64][3];
	uint(size=5)  saoLeftClass[PICT_WIDTH/64][PICT_HEIGHT/64][3];
    uint(size=3)  bandTable[32];
	uint(size=8)  lcuSizeMax;
	uint(size=8)  log2LcuSizeMax;
	uint(size=6)  picSizeInCu[2];
	uint(size=6)  picSizeInMb[2];
	uint(size=16) picSize[3][2];
	uint(size=8)  xCu := 0;
	uint(size=8)  yCu := 0;
	uint(size=8)  xMbSent := 0;
	uint(size=8)  yMbSent := 0;
	uint(size=6)  xCuFilt := 0;
	uint(size=6)  yCuFilt := 0;
	uint(size=16) numTokenPerLcu[2];
	uint(size=16) tokenGot;

	int(size=16) iLoop;

	uint(size=16) numTiles;
	uint(size=16) lcuTileIdx;
	uint(size=16) tilesBeg[MAX_NUM_TILES][2];
	uint(size=16) tilesEnd[MAX_NUM_TILES][2];
	bool         filtAcrSlc[PICT_WIDTH/64][PICT_HEIGHT/64];
	bool         filtAcrTile[PICT_WIDTH/64][PICT_HEIGHT/64];
    bool         filtAcrAllSlc;
	bool         filtAcrAllTiles;
	bool         filtAcrCurrSlc;
	bool         filtAcrCurrTile;
	uint(size=8) numSlc[PICT_WIDTH/64][PICT_HEIGHT/64];
	uint(size=8) numTile[PICT_WIDTH/64][PICT_HEIGHT/64];
    bool         mbFiltered[3][(PICT_WIDTH + 15)/16 + 1][(PICT_HEIGHT + 15)/16];
	uint(size=8) numCurrSlc;
	
	procedure sendFilteredLcu(uint xIdx, uint yIdx, uint cIdx)
	var
		uint nbBlkPerLcu =
			if(lcuSizeMax = 64) then
				4
			else if(lcuSizeMax = 32) then
				2
			else
				1
			end end
	begin
		foreach int x in 0 .. nbBlkPerLcu - 1
		do
			foreach int y in 0 .. nbBlkPerLcu - 1
			do
				mbFiltered[cIdx][(xIdx>>4) + x][(yIdx>>4) + y] := true;
			end
		end
	end

	procedure nextLcuAddress()
	begin
		xCu := xCu + 1;
		if(xCu = tilesEnd[lcuTileIdx][0]) then
			xCu := tilesBeg[lcuTileIdx][0];
			yCu := yCu + 1;
			if(yCu = tilesEnd[lcuTileIdx][1]) then
				lcuTileIdx := lcuTileIdx + 1;
				xCu := tilesBeg[lcuTileIdx][0];
				yCu := tilesBeg[lcuTileIdx][1];
			end
		end
	end

	procedure nextMbAddr()
	begin
		xMbSent := xMbSent + 1;
		if(xMbSent = picSizeInMb[0]) then
			xMbSent := 0;
			yMbSent := yMbSent + 1;
		end
	end

	function lcuFiltIsPictureBorder() --> bool
	:
		xCuFilt = 0 || yCuFilt = 0||
		xCuFilt+1 >= picSizeInCu[0] ||
		yCuFilt+1 >= picSizeInCu[1]
	end

    procedure copyCu(uint(size=16) addrBeg[2], uint(size=16) addrEnd[2], uint(size=2) cIdx)
	begin
		foreach uint y in addrBeg[1] .. addrEnd[1]
		do
			foreach uint x in addrBeg[0] .. addrEnd[0]
			do
				FiltPict[cIdx][y][x] := OrigPict[cIdx][y][x];
			end
		end
	end

    @optimize_c(condition="OPENHEVC_ENABLE", name="saoFilterEdge_orcc")
	procedure saoFilterEdge(uint(size=2) saoEoClasss, uint(size=8) cIdx, uint(size=8) cIdxOffset,
		uint(size=16) idxMin[2], uint(size=8) lcuSizeMax, uint(size=16) picSize[2],
		bool lcuIsPictBorder, 
		int(size=32) saoOff[5], bool filtAcrossSlcAndTiles,
		uint(size=8) OrigPict[3][PICT_HEIGHT][PICT_WIDTH],
		uint(size=8) FiltPict[3][PICT_HEIGHT][PICT_WIDTH])
	begin
		if(cIdx = 0) then
			if(saoEoClasss = 0) then
				saoFilterEdgeLuma_Horiz(idxMin, lcuSizeMax, picSize, lcuIsPictBorder,
					saoOff, filtAcrossSlcAndTiles);
			else if(saoEoClasss = 1) then
				saoFilterEdgeLuma_Vert(idxMin, lcuSizeMax, picSize, lcuIsPictBorder,
					saoOff);
			else
				@inline
				saoFilterEdgeLuma_Diag(idxMin, lcuSizeMax, picSize, lcuIsPictBorder,
					saoOff, filtAcrossSlcAndTiles);
			end end
		else
			if(saoEoClass[xCuFilt][yCuFilt][cIdx] = 0) then
				saoFilterEdgeChroma_Horiz(idxMin[0], idxMin[1], cIdx, picSize, lcuIsPictBorder);
			else if(saoEoClass[xCuFilt][yCuFilt][cIdx] = 1) then
				saoFilterEdgeChroma_Vert(idxMin[0], idxMin[1], cIdx, picSize, lcuIsPictBorder);
			else
				saoFilterEdgeChroma_Diag(idxMin[0], idxMin[1], cIdx, picSize, lcuIsPictBorder);
			end end
		end
	end

	procedure saoFilterEdgeLuma_Horiz(uint(size=16) idxMin[2], uint(size=8) lcuSizeMax,
		uint(size=16) picSize[2], bool lcuIsPictBorder, int(size=32) saoOffset[5], bool filtAcrossSlcAndTiles)
	var
		uint(size=16) xIdx,
		uint(size=16) yIdx,
		uint(size=16) xPix1,
		uint(size=16) xPix2,
		bool pixIsInPict,
		uint(size=3) edgeIdx,
		int(size=2) sign3Result
	begin
		foreach uint(size=3) y in 0 .. (lcuSizeMax - 1)
		do
			yIdx := idxMin[1] + y;
			foreach uint(size=3) x in 0 .. (lcuSizeMax - 1)
			do
				xIdx := idxMin[0] + x;
				if(not lcuIsPictBorder || xIdx < picSize[0] && yIdx < picSize[1]) then
						xPix1 := xIdx - 1;
						xPix2 := xIdx + 1;

						pixIsInPict := true;
						if(lcuIsPictBorder &&
							(xPix1 >= picSize[0] ||
							 xPix2 >= picSize[0])) then
							pixIsInPict := false;
						//if xPix1 and xPix2 are in the same slice, then
						//the 3 pixels used for the Sao are in the same slice.
						else if(not filtAcrSlc[xIdx >> log2LcuSizeMax][yIdx >> log2LcuSizeMax] &&
							numSlc[xPix1 >> log2LcuSizeMax][yIdx >> log2LcuSizeMax] !=
							numSlc[xPix2 >> log2LcuSizeMax][yIdx >> log2LcuSizeMax]) then
							pixIsInPict := false;
						else if(not filtAcrTile[xIdx >> log2LcuSizeMax][yIdx >> log2LcuSizeMax] &&
							numTile[xPix1 >> log2LcuSizeMax][yIdx >> log2LcuSizeMax] !=
							numTile[xPix2 >> log2LcuSizeMax][yIdx >> log2LcuSizeMax]) then
							
							pixIsInPict := false;
						end end end

						if(pixIsInPict) then
							edgeIdx := 2;

							//Check if the value has already been computed.
							if(x=0) then
								sign3Result := Sign3(OrigPict[0][yIdx][xIdx] -
									OrigPict[0][yIdx][xPix1]);
							end
							edgeIdx := edgeIdx + sign3Result;

							sign3Result := Sign3(OrigPict[0][yIdx][xIdx] -
								OrigPict[0][yIdx][xPix2]);
							edgeIdx := edgeIdx + sign3Result;

							edgeIdx := edgeIdxConv[edgeIdx];
							//Saving the value to avoid computing it again and Sign3(B-A) = -Sign3(A-B)
							sign3Result := -sign3Result;
						else
							edgeIdx := 0;
							sign3Result := Sign3(OrigPict[0][yIdx][xPix2] -
								OrigPict[0][yIdx][xIdx]);
						end
						FiltPict[0][yIdx][xIdx] := clip_i32(OrigPict[0][yIdx][xIdx] +
							saoOffset[edgeIdx], 0, 255);
				end		
			end
		end
	end

	procedure saoFilterEdgeLuma_Vert(uint(size=16) idxMin[2], uint(size=8) lcuSizeMax,
		uint(size=16) picSize[2], bool lcuIsPictBorder, int(size=32) saoOffset[5])
	var
		uint(size=16) xIdx,
		uint(size=16) yIdx,
		uint(size=16) yPix1,
		uint(size=16) yPix2,
		bool pixIsInPict,
		uint(size=3) edgeIdx,
		int(size=2) sign3Result
	begin
		foreach uint(size=3) x in 0 .. (lcuSizeMax - 1)
		do
			xIdx := idxMin[0] + x;
			foreach uint(size=3) y in 0 .. (lcuSizeMax - 1)
			do
				yIdx := idxMin[1] + y;
				if(not lcuIsPictBorder || xIdx<picSize[0] && yIdx<picSize[1]) then
						yPix1 := yIdx - 1;
						yPix2 := yIdx + 1;

						pixIsInPict := true;
						if(lcuIsPictBorder && (yPix1>=picSize[1] ||
							yPix2>=picSize[1])) then
							pixIsInPict := false;
						//if yPix1 and yPix2 are in the same slice, then
						//the 3 pixels used for the Sao are in the same slice.
						else if(not filtAcrSlc[xIdx >> log2LcuSizeMax][yIdx >> log2LcuSizeMax] &&
							numSlc[xIdx >> log2LcuSizeMax][yPix1 >> log2LcuSizeMax] !=
							numSlc[xIdx >> log2LcuSizeMax][yPix2 >> log2LcuSizeMax]) then
							pixIsInPict := false;
						else if(not filtAcrTile[xIdx >> log2LcuSizeMax][yIdx >> log2LcuSizeMax] &&
							numTile[xIdx >> log2LcuSizeMax][yPix1 >> log2LcuSizeMax] !=
							numTile[xIdx >> log2LcuSizeMax][yPix2 >> log2LcuSizeMax]) then
							pixIsInPict := false;
						end end end

						if(pixIsInPict) then
							edgeIdx := 2;

							//Check if the value has already been computed.
							if(y=0) then
								sign3Result := Sign3(OrigPict[0][yIdx][xIdx] -
									OrigPict[0][yPix1][xIdx]);
							end
							edgeIdx := edgeIdx + sign3Result;

							sign3Result := Sign3(OrigPict[0][yIdx][xIdx] -
								OrigPict[0][yPix2][xIdx]);
							edgeIdx := edgeIdx + sign3Result;

							edgeIdx := edgeIdxConv[edgeIdx];
							//Saving the value to avoid computing it again and Sign3(B-A) = -Sign3(A-B)
							sign3Result := -sign3Result;
						else
							edgeIdx := 0;
							sign3Result := Sign3(OrigPict[0][yPix2][xIdx] -
								OrigPict[0][yIdx][xIdx]);
						end
						FiltPict[0][yIdx][xIdx] := clip_i32(OrigPict[0][yIdx][xIdx] +
							saoOffset[edgeIdx], 0, 255);
				end		
			end
		end
	end

	procedure saoFilterEdgeLuma_Diag(uint(size=16) idxOrig[2], uint(size=8) lcuSizeMax,
		uint(size=16) picSize[2], bool lcuIsPictBorder, int(size=32) saoOffset[5], bool filtAcrossSlcAndTiles)
	var
		int (size=16) xIdx,
		int (size=16) yIdx,
		uint(size=16) pixIdx[2][2],
		bool          pixIsInPict,
		uint(size=3)  edgeIdx,
		uint(size=3)  bandShift = BIT_DEPTH-5,
		uint(size=3)  bandIdx,
		int(size=2)   sign3Result,
		int (size=2)  xOff[2],
		int (size=2)  yOff[2]
	begin
		foreach uint k in 0 .. 1
			do
				xOff[k] := constHPos0[saoEoClass[xCuFilt][yCuFilt][0]][k];
				yOff[k] := constVPos0[saoEoClass[xCuFilt][yCuFilt][0]][k];
			end
			foreach uint(size=3) y in 0 .. (lcuSizeMax - 1)
			do
				yIdx := idxOrig[1] + y;
				foreach uint(size=3) x in 0 .. (lcuSizeMax - 1)
				do
					xIdx := idxOrig[0] + x;
					if(not lcuIsPictBorder || xIdx<picSize[0] && yIdx<picSize[1]) then
						if(saoTypeIdx[xCuFilt][yCuFilt][0] = 2) then
							pixIsInPict := true;
							foreach uint k in 0 .. 1
							do
								pixIdx[k][0] := xIdx + xOff[k];
								pixIdx[k][1] := yIdx + yOff[k];
								if(lcuIsPictBorder && (pixIdx[k][0] >= picSize[0] || pixIdx[k][1]>=picSize[1])) then
									pixIsInPict := false;
								//if yPix1 and yPix2 are in the same slice, then
								//the 3 pixels used for the Sao are in the same slice.
								else if(not filtAcrSlc[xIdx >> log2LcuSizeMax][yIdx >> log2LcuSizeMax] &&
									numSlc[xIdx >> log2LcuSizeMax][yIdx >> log2LcuSizeMax] !=
									numSlc[pixIdx[k][0] >> log2LcuSizeMax][pixIdx[k][1] >> log2LcuSizeMax]) then
									pixIsInPict := false;
								else if(not filtAcrTile[xIdx >> log2LcuSizeMax][yIdx >> log2LcuSizeMax] &&
									numTile[xIdx >> log2LcuSizeMax][yIdx >> log2LcuSizeMax] !=
									numTile[pixIdx[k][0] >> log2LcuSizeMax][pixIdx[k][1] >> log2LcuSizeMax]) then
									pixIsInPict := false;
								end end end
							end
							if(pixIsInPict) then
								edgeIdx := 2;
	
								//Check if the value has already been computed.
								if(x=0 || y=0 || x=(lcuSizeMax - 1)/* x!=32 || y!=32*/) then
									sign3Result := Sign3(OrigPict[0][yIdx][xIdx] -
										OrigPict[0][pixIdx[0][1]][pixIdx[0][0]]);
								else
									sign3Result := signResult[0][x][y];
								end
								edgeIdx := edgeIdx + sign3Result;
	
								sign3Result := Sign3(OrigPict[0][yIdx][xIdx] -
									OrigPict[0][pixIdx[1][1]][pixIdx[1][0]]);
								edgeIdx := edgeIdx + sign3Result;

								//Saving the value to avoid computing it again and Sign3(B-A) = -Sign3(A-B)
								signResult[0][(x+xOff[1])&127][(y+yOff[1])&127] := -sign3Result;
								edgeIdx := edgeIdxConv[edgeIdx];
							else
								edgeIdx := 0;
								signResult[0][(x+xOff[1])&127][(y+yOff[1])&127] :=
									Sign3(OrigPict[0][pixIdx[1][1]][pixIdx[1][0] & MASK_WIDTH_POW_2] -
										OrigPict[0][yIdx][xIdx]);
							end
							FiltPict[0][yIdx][xIdx] := clip_i32(OrigPict[0][yIdx][xIdx] +
								saoOffset[edgeIdx], 0, 255);
						else
							bandIdx := bandTable[OrigPict[0][yIdx][xIdx]>>bandShift];
							FiltPict[0][yIdx][xIdx] := clip_i32(OrigPict[0][yIdx][xIdx] +
								saoOffset[bandIdx], 0, 255);
						end
					end		
				end
			end
	end

	@optimize_c(condition="OPENHEVC_ENABLE", name="saoBandFilter_orcc")
	procedure saoBandFilter(uint(size=5) saoLeftClass, int(size=32) saoOffset[5],
		uint(size=2) cIdx, uint(size=8) cIdxOffset, int (size=16) idxMin[2], int (size=16) idxMax[2],
		uint(size=8) OrigPict[3][PICT_HEIGHT][PICT_WIDTH],
		uint(size=8) FiltPict[3][PICT_HEIGHT][PICT_WIDTH])
	var
		uint(size=3)  bandShift = BIT_DEPTH-5,
		uint(size=3)  bandIdx,
		uint(size=3)  bandTable[32] := [0: for int i in 0 .. 31]
	begin
		foreach uint k in 0 .. 3
		do
			bandTable[(k+saoLeftClass) & 31] := k+1;
		end
		foreach uint(size=16) y in idxMin[1] .. idxMax[1]
		do
			foreach int(size=16) x in idxMin[0] .. idxMax[0]
			do
				bandIdx := bandTable[OrigPict[cIdx][y][x]>>bandShift];
				FiltPict[cIdx][y][x] :=
					clip_i32(OrigPict[cIdx][y][x] +
					saoOffset[bandIdx], 0, 255);
			end
		end
	end

	procedure codingTreeBlockModif(uint(size=16) rx, uint(size=16) ry, uint(size=2) cIdx,
		uint(size=16) picSize[2], bool lcuIsPictBorder)
	var
		int (size=16) idxMax[2],
		int (size=16) idxOrig[2] = [rx, ry],
		int (size=32) saoOff[5],
		int (size=8)  compShift[3] = [0, 1, 1]
	begin
		saoOff := [saoOffset[xCuFilt][yCuFilt][cIdx][i]: for int i in 0 .. 4];
		if(saoTypeIdx[xCuFilt][yCuFilt][cIdx] = 2) then

			saoFilterEdge(saoEoClass[xCuFilt][yCuFilt][cIdx], cIdx, cIdx,idxOrig, lcuSizeMax >> compShift[cIdx], picSize, lcuIsPictBorder,
				saoOff, filtAcrAllSlc
				&& filtAcrAllTiles, OrigPict, FiltPict);
		else
			idxMax[0] := min((lcuSizeMax - 1) >> compShift[cIdx], picSize[0] - rx - 1) + rx;
			idxMax[1] := min((lcuSizeMax - 1) >> compShift[cIdx], picSize[1] - ry - 1) + ry;
			saoBandFilter(saoLeftClass[xCuFilt][yCuFilt][cIdx], saoOff, cIdx, cIdx,
				idxOrig, idxMax, OrigPict, FiltPict);
		end
	end


	procedure saoFilterEdgeChroma_Horiz(uint(size=16) rx, uint(size=16) ry,
		uint(size=2) cIdx, uint(size=16) picSize[2], bool lcuIsPictBorder)
	var
		uint(size=16) xIdx,
		uint(size=16) yIdx,
		uint(size=16) xPix1,
		uint(size=16) xPix2,
		bool pixIsInPict,
		uint(size=3) edgeIdx,
		int(size=2) sign3Result
	begin
		foreach uint(size=3) y in 0 .. (lcuSizeMax - 1) >> 1
		do
			yIdx := ry + y;
			foreach uint(size=3) x in 0 .. (lcuSizeMax - 1) >> 1
			do
				xIdx := rx + x;
				if(not lcuIsPictBorder || xIdx<picSize[0] && yIdx<picSize[1]) then
					xPix1 := xIdx - 1;
					xPix2 := xIdx + 1;

					pixIsInPict := true;
					if(lcuIsPictBorder && (xPix1 >= picSize[0] ||
						xPix2 >= picSize[0])) then
						pixIsInPict := false;
					//if xPix1 and xPix2 are in the same slice, then
					//the 3 pixels used for the Sao are in the same slice.
					else if(not filtAcrSlc[xIdx >> (log2LcuSizeMax - 1)][yIdx >> (log2LcuSizeMax - 1)] &&
						numSlc[xPix1 >> (log2LcuSizeMax - 1)][yIdx >> (log2LcuSizeMax - 1)] !=
						numSlc[xPix2 >> (log2LcuSizeMax - 1)][yIdx >> (log2LcuSizeMax - 1)]) then
						pixIsInPict := false;
					else if(not filtAcrTile[xIdx >> (log2LcuSizeMax - 1)][yIdx >> (log2LcuSizeMax - 1)] &&
						numTile[xPix1 >> (log2LcuSizeMax - 1)][yIdx >> (log2LcuSizeMax - 1)] !=
						numTile[xPix2 >> (log2LcuSizeMax - 1)][yIdx >> (log2LcuSizeMax - 1)]) then
						pixIsInPict := false;
					end end end

					if(pixIsInPict) then
						edgeIdx := 2;
						if(x=0) then
							sign3Result := Sign3(OrigPict[cIdx][yIdx][xIdx] -
								OrigPict[cIdx][yIdx][xPix1]);
						end
						edgeIdx := edgeIdx + sign3Result;

						sign3Result := Sign3(OrigPict[cIdx][yIdx][xIdx] -
								OrigPict[cIdx][yIdx][xPix2]);
						edgeIdx := edgeIdx + sign3Result;

						edgeIdx := edgeIdxConv[edgeIdx];
						//Saving the value to avoid computing it again and Sign3(B-A) = -Sign3(A-B)
						sign3Result := -sign3Result;
					else
						edgeIdx := 0;
						sign3Result := Sign3(OrigPict[cIdx][yIdx][xPix2] -
							OrigPict[cIdx][yIdx][xIdx]);
					end
					FiltPict[cIdx][yIdx][xIdx] := clip_i32(OrigPict[cIdx][yIdx][xIdx] +
						saoOffset[xCuFilt][yCuFilt][cIdx][edgeIdx], 0, 255);
				end
			end
		end
	end

	procedure saoFilterEdgeChroma_Vert(uint(size=16) rx, uint(size=16) ry,
		uint(size=2) cIdx, uint(size=16) picSize[2], bool lcuIsPictBorder)
	var
		uint(size=16) xIdx,
		uint(size=16) yIdx,
		uint(size=16) pixIdx[2][2],
		bool pixIsInPict,
		uint(size=3) edgeIdx,
		int(size=2) sign3Result
	begin
		foreach uint(size=3) x in 0 .. (lcuSizeMax - 1) >> 1
		do
			xIdx := rx + x;
			foreach uint(size=3) y in 0 .. (lcuSizeMax - 1) >> 1
			do
				yIdx := ry + y;
				if(not lcuIsPictBorder || xIdx<picSize[0] && yIdx<picSize[1]) then
					pixIdx[0][1] := yIdx - 1;
					pixIdx[1][1] := yIdx + 1;

					pixIsInPict := true;
					if(lcuIsPictBorder && (pixIdx[0][1]>=picSize[1] ||
						pixIdx[1][1]>=picSize[1])) then
						pixIsInPict := false;
					//if yPix1 and yPix2 are in the same slice, then
					//the 3 pixels used for the Sao are in the same slice.
					else if(not filtAcrSlc[xIdx >> (log2LcuSizeMax - 1)][yIdx >> (log2LcuSizeMax - 1)] &&
						numSlc[xIdx >> (log2LcuSizeMax - 1)][pixIdx[0][1] >> (log2LcuSizeMax - 1)] !=
						numSlc[xIdx >> (log2LcuSizeMax - 1)][pixIdx[1][1] >> (log2LcuSizeMax - 1)]) then
						pixIsInPict := false;
					else if(not filtAcrTile[xIdx >> (log2LcuSizeMax - 1)][yIdx >> (log2LcuSizeMax - 1)] &&
						numTile[xIdx >> (log2LcuSizeMax - 1)][pixIdx[0][1] >> (log2LcuSizeMax - 1)] !=
						numTile[xIdx >> (log2LcuSizeMax - 1)][pixIdx[1][1] >> (log2LcuSizeMax - 1)]) then
						pixIsInPict := false;
					end end end

					if(pixIsInPict) then
						edgeIdx := 2;
						if(y=0) then
							sign3Result := Sign3(OrigPict[cIdx][yIdx][xIdx] -
								OrigPict[cIdx][pixIdx[0][1]][xIdx]);
						end
						edgeIdx := edgeIdx + sign3Result;

						sign3Result := Sign3(OrigPict[cIdx][yIdx][xIdx] -
								OrigPict[cIdx][pixIdx[1][1]][xIdx]);
						edgeIdx := edgeIdx + sign3Result;

						edgeIdx := edgeIdxConv[edgeIdx];
						//Saving the value to avoid computing it again and Sign3(B-A) = -Sign3(A-B)
						sign3Result := -sign3Result;
					else
						edgeIdx := 0;
						sign3Result := Sign3(OrigPict[cIdx][pixIdx[1][1]][xIdx] -
							OrigPict[cIdx][yIdx][xIdx]);
					end
					FiltPict[cIdx][yIdx][xIdx] := clip_i32(OrigPict[cIdx][yIdx][xIdx] +
						saoOffset[xCuFilt][yCuFilt][cIdx][edgeIdx], 0, 255);
				end		
			end
		end
	end

	procedure saoFilterEdgeChroma_Diag(uint(size=16) rx, uint(size=16) ry, uint(size=2) cIdx,
		uint(size=16) picSize[2], bool lcuIsPictBorder)
	var
		int (size=16) xIdx,
		int (size=16) yIdx,
		uint(size=16) pixIdx[2][2],
		bool pixIsInPict,
		uint(size=3) edgeIdx,
		uint(size=3) bandShift = BIT_DEPTH-5,
		uint(size=3) bandIdx,
		int(size=2) sign3Result,
		int(size=2)  xOff[2],
		int(size=2)  yOff[2]
	begin
		foreach uint k in 0 .. 1
			do
				xOff[k] := constHPos0[saoEoClass[xCuFilt][yCuFilt][cIdx]][k];
				yOff[k] := constVPos0[saoEoClass[xCuFilt][yCuFilt][cIdx]][k];
			end
			foreach uint(size=3) y in 0 .. (lcuSizeMax - 1) >> 1
			do
				yIdx := ry + y;
				foreach uint(size=3) x in 0 .. (lcuSizeMax - 1) >> 1
				do
					xIdx := rx + x;
					if(not lcuIsPictBorder || xIdx<picSize[0] && yIdx<picSize[1]) then
						if(saoTypeIdx[xCuFilt][yCuFilt][cIdx] = 2) then
							pixIsInPict := true;
							foreach uint k in 0 .. 1
							do
								pixIdx[k][0] := xIdx + xOff[k];
								pixIdx[k][1] := yIdx + yOff[k];
								if(lcuIsPictBorder &&
									(pixIdx[k][0] >= picSize[0] ||
									pixIdx[k][1]>=picSize[1])) then
									pixIsInPict := false;
								else if(not filtAcrSlc[xIdx >> (log2LcuSizeMax - 1)][yIdx >> (log2LcuSizeMax - 1)] &&
									numSlc[xIdx >> (log2LcuSizeMax - 1)][yIdx >> (log2LcuSizeMax - 1)] !=
									numSlc[pixIdx[k][0] >> (log2LcuSizeMax - 1)][pixIdx[k][1] >> (log2LcuSizeMax - 1)]) then
									pixIsInPict := false;
								else if(not filtAcrTile[xIdx >> (log2LcuSizeMax - 1)][yIdx >> (log2LcuSizeMax - 1)] &&
									numTile[xIdx >> (log2LcuSizeMax - 1)][yIdx >> (log2LcuSizeMax - 1)] !=
									numTile[pixIdx[k][0] >> (log2LcuSizeMax - 1)][pixIdx[k][1] >> (log2LcuSizeMax - 1)]) then
									pixIsInPict := false;
								end end end
							end

							if(pixIsInPict) then
								edgeIdx := 2;
								//Check if the value has already been computed.
								if(x=0 || y=0 || x=((lcuSizeMax - 1) >> 1)) then
									sign3Result := Sign3(OrigPict[cIdx][yIdx][xIdx] -
										OrigPict[cIdx][pixIdx[0][1]][pixIdx[0][0]]);
								else
									sign3Result := signResult[cIdx][x][y];
								end
								edgeIdx := edgeIdx + sign3Result;
	
								sign3Result := Sign3(OrigPict[cIdx][yIdx][xIdx] -
										OrigPict[cIdx][pixIdx[1][1]][pixIdx[1][0]]);
								edgeIdx := edgeIdx + sign3Result;
	
								//Saving the value to avoid computing it again and Sign3(B-A) = -Sign3(A-B)
								signResult[cIdx][(x+xOff[1])&127]
									[(y+yOff[1])&127] := -sign3Result;
								edgeIdx := edgeIdxConv[edgeIdx];
							else
								edgeIdx := 0;
								signResult[cIdx][(x+xOff[1])&127]
									[(y+yOff[1])&127] :=
									Sign3(OrigPict[cIdx][pixIdx[1][1]][pixIdx[1][0] & MASK_WIDTH_POW_2] -
										OrigPict[cIdx][yIdx][xIdx]);
							end
							FiltPict[cIdx][yIdx][xIdx] := clip_i32(OrigPict[cIdx][yIdx][xIdx] +
								saoOffset[xCuFilt][yCuFilt][cIdx][edgeIdx], 0, 255);
						else
							bandIdx := bandTable[OrigPict[cIdx][yIdx][xIdx]>>bandShift];
							FiltPict[cIdx][yIdx][xIdx] := clip_i32(OrigPict[cIdx][yIdx][xIdx] +
								saoOffset[xCuFilt][yCuFilt][cIdx][bandIdx], 0, 255);
						end
					end		
				end
			end
	end

	procedure filtPrevLcu()
	begin
		foreach uint cIdx in 0 .. 2
		do
			// sao band filtering
			if (saoTypeIdx[xCu][yCu][cIdx] = 1) then
			    xCuFilt := xCu;
			    yCuFilt := yCu;
			    sampAdapOffFilt(cIdx);
			end
			// Sao edge hor
			if (saoTypeIdx[xCu - 1][yCu][cIdx] = 2 &&
			  saoEoClass[xCu - 1][yCu][cIdx] = 0) then
			    xCuFilt := xCu - 1;
			    yCuFilt := yCu;
				sampAdapOffFilt(cIdx);
			end
			// Sao edge vert or diag2
			if (saoTypeIdx[xCu][yCu - 1][cIdx] = 2 &&
			  saoEoClass[xCu][yCu - 1][cIdx] = 1) then
				xCuFilt := xCu;
			    yCuFilt := yCu - 1;
				sampAdapOffFilt(cIdx);
			end
			// Sao edge diag1
			if (saoTypeIdx[xCu - 1][yCu - 1][cIdx] = 2 &&
			  (saoEoClass[xCu - 1][yCu - 1][cIdx] = 2 ||
			  saoEoClass[xCu - 1][yCu - 1][cIdx] = 3)) then
				xCuFilt := xCu - 1;
				yCuFilt := yCu - 1;
				sampAdapOffFilt(cIdx);
			end
			// Filtering picture border which haven't already been filtered.
			if (xCu = picSizeInCu[0] -1 && yCu > 0 and not mbFiltered[cIdx][xCu << (log2LcuSizeMax - 4)][yCu-1 << (log2LcuSizeMax - 4)]) then
				xCuFilt := xCu;
				yCuFilt := yCu - 1;
				sampAdapOffFilt(cIdx);
			end
			if (xCu > 0 && yCu = picSizeInCu[1] -1 and not mbFiltered[cIdx][xCu-1 << (log2LcuSizeMax - 4)][yCu << (log2LcuSizeMax - 4)]) then
				xCuFilt := xCu - 1;
				yCuFilt := yCu;
				sampAdapOffFilt(cIdx);
			end
		end
	end

	procedure sampAdapOffFilt(uint cIdx)
	var
		uint(size=16) picSizeLoc[2],
		bool lcuIsPictBorder,
		int (size=8)  compShift[3] = [0, 1, 1]
	begin
		lcuIsPictBorder := lcuFiltIsPictureBorder();
		sendFilteredLcu(xCuFilt << log2LcuSizeMax, yCuFilt << log2LcuSizeMax, cIdx);
			picSizeLoc := [picSize[cIdx][0], picSize[cIdx][1]];
            if(saoTypeIdx[xCuFilt][yCuFilt][cIdx] = 1) then
				foreach uint i in 0 .. 31
				do
					bandTable[i] := 0;
				end
				foreach uint k in 0 .. 3
				do
					bandTable[(k+saoLeftClass[xCuFilt][yCuFilt][cIdx]) & 31] := k+1;
				end
			end
		if(saoTypeIdx[xCuFilt][yCuFilt][cIdx]!=0) then
			codingTreeBlockModif(xCuFilt << (log2LcuSizeMax - compShift[cIdx]),
				(yCuFilt << (log2LcuSizeMax - compShift[cIdx])), cIdx, picSizeLoc, lcuIsPictBorder);
		end
	end

uint numPict;
    isNewPict: action IsPicSlcLcu:[isNewPicSlcLcu],
		LcuSizeMax:[log2LcuSz], LFAcrossSlcTile:[lfAcrossSlcTile],
		PicSize:[picWidthInPix, picHeightInPix], SaoSe:[saoSe] ==>
	guard
		isNewPicSlcLcu = NEW_PIC
	do
        // println("Pict num : " + numPict + ". Pic size : {" + picWidthInPix + " ; " + picHeightInPix + "}");
		numPict := numPict + 1;
		log2LcuSizeMax := log2LcuSz;
		lcuSizeMax := 1 << log2LcuSz;
		picSizeInCu := [(picWidthInPix+(lcuSizeMax - 1)) >> log2LcuSizeMax, (picHeightInPix+(lcuSizeMax - 1)) >> log2LcuSizeMax];
		picSizeInMb := [(picWidthInPix+15)/16, (picHeightInPix+15)/16];
		picSize[0]  := [picWidthInPix   , picHeightInPix];
		picSize[1]  := [picSize[0][0] >> 1, picSize[0][1] >> 1];
		picSize[2]  := [picSize[1][0], picSize[1][1]];
		slcSaoCompEn[0] := (saoSe & 1) !=0;
		slcSaoCompEn[1] := (saoSe & 2) !=0;
		slcSaoCompEn[2] := slcSaoCompEn[1];
		filtAcrCurrSlc  := (lfAcrossSlcTile & 1) != 0;
		filtAcrCurrTile := (lfAcrossSlcTile & 2) != 0;
		filtAcrAllSlc := filtAcrCurrSlc;
		filtAcrAllTiles := filtAcrCurrTile;
		numCurrSlc := 0;
		lcuTileIdx := 0;
		numTokenPerLcu[0] := lcuSizeMax * lcuSizeMax;
		numTokenPerLcu[1] := numTokenPerLcu[0] >> 2;
		xMbSent := 0;
		yMbSent := 0;
		xCuFilt := 0;
		yCuFilt := 0;
		xCu := 0;
		yCu := 0;
		foreach int cIdx in 0 .. 2
		do
			foreach int i in 0 .. picSizeInMb[0] - 1
			do
				foreach int j in 0 .. picSizeInMb[1] - 1
				do
					mbFiltered[cIdx][i][j] := false;
				end
			end
		end
	end

	//There should be slice SAO enable for each independent slice.
	isNewSlice: action IsPicSlcLcu:[isNewPicSlcLcu],
		LcuSizeMax:[log2LcuSz], LFAcrossSlcTile:[lfAcrossSlcTile],
		PicSize:[picWidthInPix, picHeightInPix]/*, SaoSe:[saoSe]*/ ==>
	guard
		isNewPicSlcLcu = NEW_SLC
	do
		/*slcSaoCompEn[0] := (saoSe & 1) !=0;
		slcSaoCompEn[1] := (saoSe & 2) !=0;
		slcSaoCompEn[2] := slcSaoCompEn[1];*/
		filtAcrCurrSlc  := (lfAcrossSlcTile & 1) != 0;
		filtAcrCurrTile := (lfAcrossSlcTile & 2) != 0;
		filtAcrAllSlc := filtAcrAllSlc && filtAcrCurrSlc;
		filtAcrAllTiles := filtAcrAllTiles && filtAcrCurrTile;
		numCurrSlc := numCurrSlc + 1;
		log2LcuSizeMax := log2LcuSz;
		lcuSizeMax := 1 << log2LcuSz;
	end

	getNumTiles: action TilesCoord:[valNumTiles] ==>
	do
		numTiles := valNumTiles;
		iLoop := 0;
	end

	getTilesCoord.launch: action TilesCoord:[tilesCoord] repeat 4 ==>
	guard
		iLoop < numTiles
	do
		tilesBeg[iLoop] := [tilesCoord[0] >> log2LcuSizeMax, tilesCoord[1] >> log2LcuSizeMax];
		tilesEnd[iLoop] := [(tilesCoord[2]+(lcuSizeMax - 1)) >> log2LcuSizeMax, (tilesCoord[3]+(lcuSizeMax - 1)) >> log2LcuSizeMax];
		iLoop := iLoop + 1;
	end

	getTilesCoord.done: action ==>
	guard
		iLoop = numTiles
	end

    checkSliceEn.isFalse: action ==>
	guard
		not slcSaoCompEn[0] && not slcSaoCompEn[1]
	end

	checkSliceEn.isTrue: action ==>
	guard
		slcSaoCompEn[0] || slcSaoCompEn[1]
	end

	getCuPix.launch.init: action IsPicSlcLcu:[isNewLcu] ==>
	guard
		isNewLcu != NEW_SLC && lcuTileIdx < numTiles
	do
		tokenGot := 0;
		numSlc[xCu][yCu]  := numCurrSlc;
		numTile[xCu][yCu] := lcuTileIdx;
		filtAcrSlc[xCu][yCu]  := filtAcrCurrSlc;
		filtAcrTile[xCu][yCu] := filtAcrCurrTile;
	end

	getCuPix.launch.luma: action SampleIn:[samp] repeat 16 ==>
	guard
		tokenGot < numTokenPerLcu[0]
	var
		uint(size=16) xPic,
		uint(size=16) yPic
	do
		xPic := (xCu * lcuSizeMax) + (tokenGot & (lcuSizeMax - 1));
		yPic := (yCu * lcuSizeMax) + (tokenGot >> log2LcuSizeMax);
		foreach uint x in 0 .. 15
		do
			OrigPict[0][yPic][x+xPic] := samp[x]; 
		end

		tokenGot := tokenGot + 16;
	end

	getCuPix.launch.lumaDone: action ==>
	guard
		tokenGot = numTokenPerLcu[0]
	do
		tokenGot := 0;
		cIdx := 1;
	end

	getCuPix.launch.chroma: action SampleIn:[samp] repeat 8 ==>
	guard
		cIdx < 3
	var
		uint(size=16) xPic,
		uint(size=16) yPic
	do
		xPic := (xCu * (lcuSizeMax >> 1)) + (tokenGot & ((lcuSizeMax - 1) >> 1));
		yPic := (yCu * (lcuSizeMax >> 1)) + (tokenGot >> (log2LcuSizeMax - 1));

		foreach uint x in 0 .. 7
		do
			OrigPict[cIdx][yPic][x+xPic] := samp[x]; 
		end

		tokenGot := tokenGot + 8;
		if(tokenGot = numTokenPerLcu[1]) then
			tokenGot := 0;
			cIdx := cIdx + 1;
		end
	end

	getCuPix.launch.chromaDone: action ==>
	guard
		cIdx = 3
	do
		cIdx := 0;
        numSlc[xCu][yCu]     := numCurrSlc;
		filtAcrSlc[xCu][yCu] := filtAcrCurrSlc;
	end

	getCuPix.done: action ==>
	guard
		lcuTileIdx = numTiles
	do
		xCuFilt := picSizeInCu[0] -1;
		yCuFilt := picSizeInCu[1] -1;
		foreach uint cIdx in 0 .. 2
		do
			if(not mbFiltered[cIdx][xCuFilt << (log2LcuSizeMax - 4)][yCuFilt << (log2LcuSizeMax - 4)]) then
				sampAdapOffFilt(cIdx);
			end
		end

		xCu := 0;
		yCu := 0;
	end

	getSaoMerge.noMerge: action SaoSe:[mergeInfo] ==>
	guard
		mergeInfo = SAO_NO_MERGE
	do
		if (DEBUG_Trace) then
			println("=== getSaoMerge.noMerge ===");
			println("SaoSe       = " + mergeInfo);
		end
	end

	getSaoMerge.merge: action SaoSe:[mergeInfo] ==>
	guard
		mergeInfo != SAO_NO_MERGE
	var
        uint(size=16) addrBeg[2],
		uint(size=16) addrEnd[2],
		uint(size=16) xMerge =
			if(mergeInfo = SAO_MERGE_LEFT) then xCu-1 else xCu end,
		uint(size=16) yMerge =
			if(mergeInfo = SAO_MERGE_UP)  then yCu-1 else yCu end
	do
		if (DEBUG_Trace) then
			println("=== getSaoMerge.Merge ===");
			println("SaoSe       = " + mergeInfo);
		end
		
		foreach uint cIdx in 0 .. 2
		do
			saoTypeIdx[xCu][yCu][cIdx] := saoTypeIdx[xMerge][yMerge][cIdx];
			if(saoTypeIdx[xCu][yCu][cIdx] = 0) then
                addrBeg :=
					if(cIdx=0) then
						[xCu * lcuSizeMax, yCu * lcuSizeMax]
					else
						[xCu * (lcuSizeMax >> 1), yCu * (lcuSizeMax >> 1)]
					end;
				addrEnd :=
					if(cIdx=0) then
						[(xCu * lcuSizeMax)+(lcuSizeMax - 1), (yCu * lcuSizeMax)+(lcuSizeMax - 1)]
					else
						[(xCu * (lcuSizeMax >> 1))+ ((lcuSizeMax - 1) >> 1), (yCu * (lcuSizeMax >> 1))+ ((lcuSizeMax - 1) >> 1)]
					end;
		
				 copyCu(addrBeg, addrEnd, cIdx);
                 sendFilteredLcu(xCu << log2LcuSizeMax, yCu << log2LcuSizeMax, cIdx);
			else
				foreach uint i in 1 .. 4
				do
					saoOffset[xCu][yCu][cIdx][i] := saoOffset[xMerge][yMerge][cIdx][i];
				end
				saoEoClass[xCu][yCu][cIdx] := saoEoClass[xMerge][yMerge][cIdx];
				saoLeftClass[xCu][yCu][cIdx] := saoLeftClass[xMerge][yMerge][cIdx];
			end
		end
		filtPrevLcu();
		nextLcuAddress();
	end

	getSaoMerge.skip: action ==>
	var
		uint(size=16) addrBeg[2],
		uint(size=16) addrEnd[2]
	do
		saoTypeIdx[xCu][yCu] := [0, 0, 0];
		addrBeg := [xCu * lcuSizeMax, yCu * lcuSizeMax];
		addrEnd := [(xCu * lcuSizeMax)+(lcuSizeMax - 1),
			(yCu * lcuSizeMax)+(lcuSizeMax - 1)];
		copyCu(addrBeg, addrEnd, 0);

		addrBeg := [xCu * (lcuSizeMax >> 1), yCu * (lcuSizeMax >> 1)];
		addrEnd := [(xCu * (lcuSizeMax >> 1))+ ((lcuSizeMax - 1) >> 1),
		        (yCu * (lcuSizeMax >> 1))+ ((lcuSizeMax - 1) >> 1)];
		copyCu(addrBeg, addrEnd, 1);

		addrBeg := [xCu * (lcuSizeMax >> 1), yCu * (lcuSizeMax >> 1)];
		addrEnd := [(xCu * (lcuSizeMax >> 1))+ ((lcuSizeMax - 1) >> 1),
		        (yCu * (lcuSizeMax >> 1))+ ((lcuSizeMax - 1) >> 1)];
		copyCu(addrBeg, addrEnd, 2);
		sendFilteredLcu(xCu << log2LcuSizeMax, yCu << log2LcuSizeMax, 0);
		sendFilteredLcu(xCu << log2LcuSizeMax, yCu << log2LcuSizeMax, 1);
		sendFilteredLcu(xCu << log2LcuSizeMax, yCu << log2LcuSizeMax, 2);

		nextLcuAddress();
	end

	getSaoTypeIdx.is0: action SaoSe:[typeIdx] ==>
	guard
		/* Replace by (cIdx<3 && slcSaoCompEn[cIdx] && typeIdx = 0) when orcc's simulator
		 * support short-circuit evaluation.
		 */
		if cIdx <3 && typeIdx = 0 then slcSaoCompEn[cIdx] else false end
    var
		uint(size=16) addrBeg[2],
		uint(size=16) addrEnd[2]
	do
		if (DEBUG_Trace) then
			println("=== getSaoTypeIdx.is0 ===");
			println("SaoSe       = " + typeIdx);
		end

        addrBeg :=
			if(cIdx=0) then
				[xCu * lcuSizeMax, yCu * lcuSizeMax]
			else
				[xCu * (lcuSizeMax >> 1), yCu * (lcuSizeMax >> 1)]
			end;
		addrEnd :=
			if(cIdx=0) then
				[(xCu * lcuSizeMax)+(lcuSizeMax - 1), (yCu * lcuSizeMax)+(lcuSizeMax - 1)]
			else
				[(xCu * (lcuSizeMax >> 1))+ ((lcuSizeMax - 1) >> 1),
					(yCu * (lcuSizeMax >> 1))+ ((lcuSizeMax - 1) >> 1)]
			end;

        copyCu(addrBeg, addrEnd, cIdx);
		
		sendFilteredLcu(xCu << log2LcuSizeMax, yCu << log2LcuSizeMax, cIdx);

		saoTypeIdx[xCu][yCu][cIdx] := 0;
		cIdx := cIdx + 1;
	end

	getSaoTypeIdx.isNot0: action SaoSe:[saoSe] repeat 6 ==>
	guard
		/* Replace by (cIdx<3 && slcSaoCompEn[cIdx] && saoSe[0] != 0) when orcc's simulator
		 * support short-circuit evaluation.
		 */
		if cIdx <3 then slcSaoCompEn[cIdx] && saoSe[0] != 0 else false end
	do
		if (DEBUG_Trace) then
			println("=== getSaoTypeIdx.isNot0 ===");
			print("SaoSe       = [");
			foreach uint i in 0 .. 5 do
				print(saoSe[i] + ", ");
			end
			println("]");
		end
		
		saoTypeIdx[xCu][yCu][cIdx] := saoSe[0];
		foreach uint i in 1 .. 4
		do
			saoOffset[xCu][yCu][cIdx][i] := saoSe[i];
		end
		if(saoTypeIdx[xCu][yCu][cIdx]=2) then
			saoEoClass[xCu][yCu][cIdx] := saoSe[5];
		else
			saoLeftClass[xCu][yCu][cIdx] := saoSe[5];
		end

		cIdx := cIdx + 1;
	end

	getSaoTypeIdx.skip: action ==>
	guard
		/* Replace by (cIdx<3 && not slcSaoCompEn[cIdx]) when orcc's simulator
		 * support short-circuit evaluation.
		 */
		if cIdx <3 then not slcSaoCompEn[cIdx] else false end
    var
		uint(size=16) addrBeg[2],
		uint(size=16) addrEnd[2]
	do
        addrBeg :=
			if(cIdx=0) then
				[xCu * lcuSizeMax, yCu * lcuSizeMax]
			else
				[xCu * (lcuSizeMax >> 1), yCu * (lcuSizeMax >> 1)]
			end;
		addrEnd :=
			if(cIdx=0) then
				[(xCu * lcuSizeMax)+(lcuSizeMax - 1), (yCu * lcuSizeMax)+(lcuSizeMax - 1)]
			else
				[(xCu * (lcuSizeMax >> 1))+ ((lcuSizeMax - 1) >> 1), (yCu * (lcuSizeMax >> 1))+ ((lcuSizeMax - 1) >> 1)]
			end;

		saoTypeIdx[xCu][yCu][cIdx] := 0;
		copyCu(addrBeg, addrEnd, cIdx);
        
        sendFilteredLcu(xCu << log2LcuSizeMax, yCu << log2LcuSizeMax, cIdx);
		cIdx := cIdx + 1;
	end

	getSaoTypeIdxDone: action ==>
	guard
		cIdx = 3
	do
		cIdx := 0;
		filtPrevLcu();
		nextLcuAddress();
	end

	sendSamples.launch: action ==> FiltSample:[filtSamp] repeat 16*16 + 2 * 8*8
	var
	    uint tokenOffset,
		uint(size=8) filtSamp[16*16+2*8*8],
        uint(size=16) blkAddrX, uint(size=16) blkAddrY
	do
        blkAddrX := xMbSent*16;
		blkAddrY := yMbSent*16;
		foreach uint y in 0 .. 15
		do
			foreach uint x in 0 .. 15
			do
				if(not DEBUG) then
					filtSamp[x+y*16] := FiltPict[0][blkAddrY+y][blkAddrX+x];
				else
					if(blkAddrX+x<picSize[0][0] && blkAddrY+y<picSize[0][1]) then
						filtSamp[x+y*16] := FiltPict[0][blkAddrY+y][blkAddrX+x];
					else
						filtSamp[x+y*16] := 0;
					end
				end
			end
		end

		blkAddrX := blkAddrX>>1;
		blkAddrY := blkAddrY>>1;
		tokenOffset:= 16*16;
		foreach uint comp in 1 .. 2
		do
			foreach uint y in 0 .. 7
			do
				foreach uint x in 0 .. 7
				do
					if(not DEBUG) then
						filtSamp[x+y*8 + tokenOffset] := FiltPict[comp][blkAddrY+y][blkAddrX+x];
					else
						if(blkAddrX+x<picSize[0][0]/2 && blkAddrY+y<picSize[0][1]/2) then
							filtSamp[x+y*8 + tokenOffset] := FiltPict[comp][blkAddrY+y][blkAddrX+x];
						else
							filtSamp[x+y*8 + tokenOffset] := 0;
						end
					end
				end
			end
			tokenOffset:= tokenOffset + 8*8;
		end

		nextMbAddr();
	end
	
	sendSamples.done: action ==>
	guard
		not mbFiltered[0][xMbSent][yMbSent] ||
		not mbFiltered[1][xMbSent][yMbSent] ||
		not mbFiltered[2][xMbSent][yMbSent] ||
		yMbSent = picSizeInMb[1]
	end
	
	schedule fsm IsNewPict:
		IsNewPict     (isNewPict     )--> CheckSliceEn;

        CheckSliceEn (checkSliceEn.isTrue )-->GetNumTilesFilt;
		CheckSliceEn (checkSliceEn.isFalse )-->GetNumTilesSkipFilt;

		/* Using SAO */
		GetCuPixFilt (isNewSlice           )--> GetNumTilesFilt;
		GetCuPixFilt (getCuPix.launch.init )--> GetCuPixLumaFilt;
		GetCuPixFilt (getCuPix.done        )--> SendLastSamplesFilt;

		GetCuPixLumaFilt (getCuPix.launch.luma     )--> GetCuPixLumaFilt;
		GetCuPixLumaFilt (getCuPix.launch.lumaDone )--> GetCuPixChrFilt;

		GetCuPixChrFilt (getCuPix.launch.chroma     )--> GetCuPixChrFilt;
		GetCuPixChrFilt (getCuPix.launch.chromaDone )--> GetSaoMergeFilt;

		GetNumTilesFilt   (getNumTiles          )--> GetTilesCoordFilt;
		GetTilesCoordFilt (getTilesCoord.launch )--> GetTilesCoordFilt;
		GetTilesCoordFilt (getTilesCoord.done   )--> GetCuPixFilt;

		GetSaoMergeFilt (getSaoMerge.merge   )--> SendSamplesFilt;
		GetSaoMergeFilt (getSaoMerge.noMerge )--> GetSaoTypeIdxFilt;

		GetSaoTypeIdxFilt (getSaoTypeIdx     )--> GetSaoTypeIdxFilt;
		GetSaoTypeIdxFilt (getSaoTypeIdxDone )--> SendSamplesFilt;

		SendSamplesFilt (sendSamples.launch )--> SendSamplesFilt;
		SendSamplesFilt (sendSamples.done   )--> GetCuPixFilt;

		SendLastSamplesFilt (sendSamples.launch )--> SendLastSamplesFilt;
        SendLastSamplesFilt (sendSamples.done   )--> IsNewPict;
		
		/* Not using SAO. */

		GetCuPixSkipFilt (isNewSlice           )--> GetNumTilesSkipFilt;
		GetCuPixSkipFilt (getCuPix.launch.init )--> GetCuPixLumaSkipFilt;
		GetCuPixSkipFilt (getCuPix.done        )--> SendLastSamplesSkipFilt;

		GetCuPixLumaSkipFilt (getCuPix.launch.luma     )--> GetCuPixLumaSkipFilt;
		GetCuPixLumaSkipFilt (getCuPix.launch.lumaDone )--> GetCuPixChrSkipFilt;

		GetCuPixChrSkipFilt (getCuPix.launch.chroma     )--> GetCuPixChrSkipFilt;
		GetCuPixChrSkipFilt (getCuPix.launch.chromaDone )--> GetSaoMergeSkipFilt;

		GetNumTilesSkipFilt   (getNumTiles          )--> GetTilesCoordSkipFilt;
		GetTilesCoordSkipFilt (getTilesCoord.launch )--> GetTilesCoordSkipFilt;
		GetTilesCoordSkipFilt (getTilesCoord.done   )--> GetCuPixSkipFilt;

		GetSaoMergeSkipFilt (getSaoMerge.skip    )--> SendSamplesSkipFilt;

		SendSamplesSkipFilt (sendSamples.launch )--> SendSamplesSkipFilt;
		SendSamplesSkipFilt (sendSamples.done   )--> GetCuPixSkipFilt;

		SendLastSamplesSkipFilt (sendSamples.launch )--> SendLastSamplesSkipFilt;
		SendLastSamplesSkipFilt (sendSamples.done   )--> IsNewPict;
	end
	priority
		sendSamples.done > sendSamples.launch;
		isNewSlice > getCuPix.launch.init;
	end
end
