/*
 * Copyright (c) 2012, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
package devel.org.sc29.wg11.mpegh.part2.main.Filters;

import std.util.Math.*;
import devel.org.sc29.wg11.mpegh.part2.common.CommonConstantHEVC.*;

//Pipelined version broken
actor DeblockingFilter(bool FILT_VERT_EDGES, bool FILT_HOR_EDGES)
	uint(size=2)  Bs,
	bool          DBFDisable,
	uint(size=8)  DbfIdx,
	uint(size=2)  IsPicSlcLcu,
	uint(size=8)  LcuSizeMax,
	uint(size=16) PicSize,
	int (size=8)  Qp,
	bool          ReconstrCuProcessDone,
	int (size=8)  SyntaxElem,
	uint(size=16) TilesCoord
		==>
	uint(size=8)  DbfIdx4Recon,
	bool          ProcessDone
		:

	uint(size=4)  BIT_DEPTH = 8;

	uint(size=8) betaTable[52] =
		[ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  6,  7,  8,  9,
		 10, 11, 12, 13, 14, 15, 16, 17, 18, 20,
		 22, 24, 26, 28, 30 ,32, 34, 36, 38, 40,
		 42, 44, 46, 48, 50, 52, 54, 56, 58, 60,
		 62, 64];

	uint(size=8) tcTable[54] =
		[ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,
		  1,  1,  1,  1,  1,  1,  1,  2,  2,  2,
		  2,  3,  3,  3,  3,  4,  4,  4,  5,  5,
		  6,  6,  7,  8,  9, 10, 11, 13, 14, 16,
		  18, 20, 22, 24];

	uint(size=8) qPcTable[52] =
		 [  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,
		   10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
		   20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
		   29, 30, 31, 32, 33, 33, 34, 34, 35, 35,
		   36, 36, 37, 37, 38, 39, 40, 41, 42, 43,
		   44, 45];

	int(size=16) iLoop;

	uint(size=8) dbfIdx;

	uint(size=16) numTiles;
	uint(size=16) tileIdx;
	uint(size=16) tileIdxBis;
	uint(size=16) numPartition;
	uint(size=16) tilesBegSamp[MAX_NUM_TILES][2];
	uint(size=16) tilesEndSamp[MAX_NUM_TILES][2];
	int (size=5)  qpChrOff[2];
	uint(size=8)  lcuSizeMax;
	uint(size=8)  log2LcuSizeMax;
	uint(size=16) picSize[2];
	uint(size=16) xIdx;
	uint(size=16) yIdx;
	uint(size=16) xIdxBis;
	uint(size=16) yIdxBis;
/*	uint(size=6)  lastXIdx;
	uint(size=6)  lastYIdx;*/
	uint(size=16) xAddrVert;
	uint(size=16) yAddrVert;
	int (size=16) xAddrHor;
	int (size=16) yAddrHor;
	uint(size=16) numTokenPerLcu[2];
	uint(size=16) pixAddr[2];
	uint(size=9)  blkIdx := 0;
	bool          disDbf := false;

	uint(size=8)  dbfPict[2][3][PICT_HEIGHT_POW_2][PICT_WIDTH_POW_2];
	int (size=8)  qpTab[PICT_WIDTH_POW_2/4][PICT_HEIGHT_POW_2/4];
	uint(size=2)  bSTableVert[256];
	uint(size=2)  bSTableHoriz[(PICT_WIDTH + 63)/64][(PICT_HEIGHT + 63)/64][256];
	bool          mbFiltered[(PICT_WIDTH + 63)/64][(PICT_HEIGHT + 63)/64];

	int           betaOffset;
	uint(size=2)  dE;
	bool          dEp;
	bool          dEq;
	int           qPi;
	int           tcOffset;
	uint(size=8)  tc;

	function decisionProcessLumaSamp(uint(size=8) p0, uint(size=8) p3,
		uint(size=8) q0, uint(size=8) q3, int dpq, int beta) --> bool
	:
		(dpq < (beta>>2)) &&
		(abs(p3-p0) + abs(q0-q3))<(beta>>3) &&
		abs(p0-q0)<((5*tc+1)>>1)
	end
 
	procedure computeNextLcuAddrBis()
	begin
		xIdxBis := xIdxBis + lcuSizeMax;
		if(xIdxBis >= tilesEndSamp[tileIdxBis][0]) then
			xIdxBis := tilesBegSamp[tileIdxBis][0];
			yIdxBis := yIdxBis + lcuSizeMax;
			if(yIdxBis >= tilesEndSamp[tileIdxBis][1]) then
				tileIdxBis := tileIdxBis + 1;
				xIdxBis := tilesBegSamp[tileIdxBis][0];
				yIdxBis := tilesBegSamp[tileIdxBis][1];
			end
		end
	end

	procedure computeNextLcuAddr()
	begin
		xIdx := xIdx + lcuSizeMax;
		if(xIdx >= tilesEndSamp[tileIdx][0]) then
			xIdx := tilesBegSamp[tileIdx][0];
			yIdx := yIdx + lcuSizeMax;
			if(yIdx >= tilesEndSamp[tileIdx][1]) then
				tileIdx := tileIdx + 1;
				xIdx := tilesBegSamp[tileIdx][0];
				yIdx := tilesBegSamp[tileIdx][1];
			end
		end
	end
 
	procedure sendFilteredLcu(uint xIdx, uint yIdx)
	begin
		mbFiltered[xIdx >> log2LcuSizeMax][yIdx >> log2LcuSizeMax] := true;
	end

	procedure decisionProcessLumaBlkEdge(uint(size=16) addr[2], bool isVertical, uint(size=8) bS)
	var
		uint(size=16) q0X = (addr[0]/4) & (PICT_WIDTH_POW_2/4-1),
		uint(size=16) q0Y = addr[1]/4,
		uint(size=16) p0X, uint(size=16) p0Y,
		int Q,
		uint(size=16) beta,
		int dp0, int dp3, int dq0, int dq3,
		int dpq0, int dpq3,
		int dp, int dq,
		int d,
		int p0[4], int q0[4],
		int p3[4], int q3[4],
		bool dSam0, bool dSam3
	begin
		if(isVertical) then
			p0X := q0X-1;
			p0Y := q0Y;
		else
			p0X := q0X;
			p0Y := q0Y-1;
		end
		qPi := ((qpTab[q0X][q0Y] + qpTab[p0X][p0Y] + 1)>>1);
		Q := clip_i32(qPi+betaOffset, 0, 51);
		beta := betaTable[Q]<<(BIT_DEPTH - 8);
		Q := clip_i32(qPi + 2*(bS-1) + tcOffset, 0, 53);
		tc := tcTable[Q]<<(BIT_DEPTH - 8);
		if(isVertical) then
			q0 := [dbfPict[dbfIdx][0][addr[1]][addr[0]+i]:for int i in 0 .. 3];
			p0 := [dbfPict[dbfIdx][0][addr[1]][addr[0]-i]:for int i in 1 .. 4];
			q3 := [dbfPict[dbfIdx][0][addr[1]+3][addr[0]+i]:for int i in 0 .. 3];
			p3 := [dbfPict[dbfIdx][0][addr[1]+3][addr[0]-i]:for int i in 1 .. 4];
		else
			q0 := [dbfPict[dbfIdx][0][addr[1]+i][addr[0]]:for int i in 0 .. 3];
			p0 := [dbfPict[dbfIdx][0][addr[1]-i][addr[0]]:for int i in 1 .. 4];
			q3 := [dbfPict[dbfIdx][0][addr[1]+i][addr[0]+3]:for int i in 0 .. 3];
			p3 := [dbfPict[dbfIdx][0][addr[1]-i][addr[0]+3]:for int i in 1 .. 4];
		end
		dp0 :=abs(p0[2]-2*p0[1]+p0[0]);
		dq0 :=abs(q0[2]-2*q0[1]+q0[0]);
		dp3 :=abs(p3[2]-2*p3[1]+p3[0]);
		dq3 :=abs(q3[2]-2*q3[1]+q3[0]);
		dpq0 := dp0+dq0;
		dpq3 := dp3+dq3;
		dp := dp0+dp3;
		dq := dq0+dq3;
		d  := dpq0 + dpq3;
		if(d<beta) then
			dSam0 := decisionProcessLumaSamp(p0[0], p0[3], q0[0], q0[3],
				2*dpq0, beta);
			dSam3 := decisionProcessLumaSamp(p3[0], p3[3], q3[0], q3[3], 2*dpq3, beta);
	
			dE := 1;
			dEp := false;
			dEq := false;
			if(dSam0 && dSam3) then
				dE := 2;
			end
			if(dp < (beta+(beta>>1))>>3) then
				dEp := true;
			end
			if(dq < (beta+(beta>>1))>>3) then
				dEq := true;
			end
		else
			dE  := 0;
			dEp := false;
			dEq := false;
		end
	end

	procedure filterProcessLumaBlkEdge(uint(size=16) addr[2], bool isVerticalEdge)
	var
		uint(size=8) p[4],
		uint(size=8) q[4]
	begin
		if(isVerticalEdge) then
			if(dE!=0) then
				foreach int y in 0 .. 3
				do
					p := [dbfPict[dbfIdx][0][addr[1]+y][addr[0]-i]: for int i in 1 ..4];
					q := [dbfPict[dbfIdx][0][addr[1]+y][addr[0]+i]: for int i in 0 .. 3];
					filterProcessLumaSamp(p, q);
					foreach int i in 0 .. 2
					do
						dbfPict[dbfIdx][0][addr[1]+y][addr[0]-1-i] := p[i];
						dbfPict[dbfIdx][0][addr[1]+y][addr[0]  +i] := q[i];
					end
				end
			end
		else
			if(dE!=0) then
				foreach int x in 0 .. 3
				do
					p := [dbfPict[dbfIdx][0][addr[1]-i][addr[0]+x]: for int i in 1 ..4];
					q := [dbfPict[dbfIdx][0][addr[1]+i][addr[0]+x]: for int i in 0 .. 3];
					filterProcessLumaSamp(p, q);
					foreach int i in 0 .. 2
					do
						dbfPict[dbfIdx][0][addr[1]-1-i][addr[0]+x] := p[i];
						dbfPict[dbfIdx][0][addr[1]  +i][addr[0]+x] := q[i];
					end
				end
			end
		end
	end

	procedure filterProcessLumaSamp(uint(size=8) p[4], uint(size=8) q[4])
	var
		uint(size=8) p0=p[0], uint(size=8) p1=p[1], uint(size=8) p2=p[2],
		uint(size=8) q0=q[0], uint(size=8) q1=q[1], uint(size=8) q2=q[2],
		uint(size=8) p3=p[3], uint(size=8) q3=q[3],
		int delta, int deltaP, int deltaQ
	begin
		if(dE=2) then
			p[0] := clip_i32((p2+2*p1+2*p0+2*q0+q1+4)>>3, p0-2*tc, p0+2*tc);
			p[1] := clip_i32((p2+p1+p0+q0+2)>>2, p1-2*tc, p1+2*tc);
			p[2] := clip_i32((2*p3+3*p2+p1+p0+q0+4)>>3, p2-2*tc, p2+2*tc);
			q[0] := clip_i32((p1+2*p0+2*q0+2*q1+q2+4)>>3, q0-2*tc, q0+2*tc);
			q[1] := clip_i32((p0+q0+q1+q2+2)>>2, q1-2*tc, q1+2*tc);
			q[2] := clip_i32((p0+q0+q1+3*q2+2*q3+4)>>3, q2-2*tc, q2+2*tc);
		else
			delta := (9*(q0-p0)-3*(q1-p1)+8)>>4;
			if(abs(delta)<10*tc) then
				delta := clip_i32(delta, -tc, tc);
				p[0] := clip_i32(p0+delta, 0, 255);
				q[0] := clip_i32(q0-delta, 0, 255);
				if(dEp) then
					deltaP := clip_i32( ((((p2+p0+1)>>1)-p1+delta)>>1), -(tc>>1), tc>>1);
					p[1] := clip_i32(p1+deltaP, 0, 255);
				end
				if(dEq) then
					deltaQ := clip_i32(((((q2+q0+1)>>1)-q1-delta)>>1), -(tc>>1), tc>>1);
					q[1] := clip_i32(q1+deltaQ, 0, 255);
				end
			end
		end
		//There should be the code for reverting filtering if pcm and
		//pcmLoopFilterDisableFlag is active.
	end

	procedure filtProcessChrBlkEdge(uint(size=16) addr[2], bool isVerticalEdge,
		uint(size=2) cIdx)
	var
		uint(size=2) bS = 2,
		int qPC, int Q,
		uint(size=16) addrX = addr[0]>>1,
		uint(size=16) addrY = addr[1]>>1,
		uint(size=8) p[2], uint(size=8) q[2]
	begin
		qPC := qPcTable[min(qPi + qpChrOff[cIdx-1],51)];
		Q  := clip_i32(qPC + 2*(bS-1) + tcOffset, 0, 53);
		tc := tcTable[Q]<<(BIT_DEPTH - 8);
		if(isVerticalEdge) then
			foreach int y in 0 .. 1
			do
				p := [dbfPict[dbfIdx][cIdx][addrY+y][addrX-i]: for int i in 1 .. 2];
				q := [dbfPict[dbfIdx][cIdx][addrY+y][addrX+i]: for int i in 0 .. 1];
				filterProcessChrSamp(p, q);
				dbfPict[dbfIdx][cIdx][addrY+y][addrX-1] := p[0];
				dbfPict[dbfIdx][cIdx][addrY+y][addrX] := q[0];
			end
		else
			foreach int x in 0 .. 1
			do
				p := [dbfPict[dbfIdx][cIdx][addrY-i][addrX+x]: for int i in 1 .. 2];
				q := [dbfPict[dbfIdx][cIdx][addrY+i][addrX+x]: for int i in 0 .. 1];
				filterProcessChrSamp(p, q);
				dbfPict[dbfIdx][cIdx][addrY-1][addrX+x] := p[0];
				dbfPict[dbfIdx][cIdx][addrY][addrX+x] := q[0];
			end
		end
	end

	procedure filterProcessChrSamp(uint(size=8) p[2], uint(size=8) q[2])
	var
		int delta,
		uint(size=8) p0=p[0], uint(size=8) p1=p[1],
		uint(size=8) q0=q[0], uint(size=8) q1=q[1]
	begin
		delta := clip_i32(((((q0-p0)<<2)+p1-q1+4)>>3), -tc, tc);
		p[0] := clip_i32(p0+delta, 0, 255);
		q[0] := clip_i32(q0-delta, 0, 255);
		//There should be the code for reverting filtering if pcm and
		//pcmLoopFilterDisableFlag is active.
	end

	procedure filterHorEdges()
	var
		uint(size=16) blkAddr[2]
	begin
		foreach int idxBlk in 0 .. numPartition - 1
		do
			if(bSTableHoriz[xAddrHor >> log2LcuSizeMax][yAddrHor >> log2LcuSizeMax][idxBlk]!=0) then
				zScanToAbsCoord(idxBlk, blkAddr);
				blkAddr[0] := blkAddr[0] + xAddrHor;
				blkAddr[1] := blkAddr[1] + yAddrHor;
				decisionProcessLumaBlkEdge(blkAddr, false, bSTableHoriz[xAddrHor >> log2LcuSizeMax][yAddrHor >> log2LcuSizeMax][idxBlk]);
				filterProcessLumaBlkEdge(blkAddr, false);
				if(bSTableHoriz[xAddrHor >> log2LcuSizeMax][yAddrHor >> log2LcuSizeMax][idxBlk]=2 && ((blkAddr[1]>>2)&3) = 0 ) then
					foreach int cIdx in 1 .. 2
					do
						filtProcessChrBlkEdge(blkAddr, false, cIdx);
					end
				end
			end
		end
	end

	isNewSlc: action IsPicSlcLcu:[isNewPicSlcLcu], PicSize:[picWidthInPix,
		picHeightInPix], LcuSizeMax:[log2LcuSz], DBFDisable:[disableFlag],
		SyntaxElem:[betaOff, tcOff, qpUOff, qpVOff] ==>
	guard
		isNewPicSlcLcu = NEW_SLC
	do
		disDbf := disableFlag;
		betaOffset := betaOff;
		tcOffset := tcOff;
		qpChrOff := [qpUOff, qpVOff];
	end

	isNewPict: action IsPicSlcLcu:[isNewPicSlcLcu], PicSize:[picWidthInPix,
		picHeightInPix], LcuSizeMax:[log2LcuSz], DBFDisable:[disableFlag],
		SyntaxElem:[betaOff, tcOff, qpUOff, qpVOff], DbfIdx:[deblockFiltIdx] ==>
		DbfIdx4Recon:[deblockFiltIdx]
	guard
		isNewPicSlcLcu = NEW_PIC
	do
		lcuSizeMax := 1 << log2LcuSz;
		log2LcuSizeMax := log2LcuSz;
		numPartition := 1 << (2 * log2LcuSz - 4);
		numTokenPerLcu[0] := 1 << ( 2* log2LcuSz);
		numTokenPerLcu[1] := numTokenPerLcu[0] >> 2;
		disDbf := disableFlag;
		picSize[0] := picWidthInPix;
		picSize[1] := picHeightInPix;
		/*lastXIdx := 0;
		lastYIdx := 0;*/
		xIdx := 0;
		yIdx := 0;
		xIdxBis := 0;
		yIdxBis := 0;
		tileIdx := 0;
		tileIdxBis := 0;
		betaOffset := betaOff;
		tcOffset := tcOff;
		qpChrOff := [qpUOff, qpVOff];
		foreach int i in 0 .. (picSize[0] >> log2LcuSizeMax) - 1
		do
			foreach int j in 0 .. (picSize[1] >> log2LcuSizeMax) - 1
			do
				mbFiltered[i][j] := false;
			end
		end
		dbfIdx := deblockFiltIdx;
	end

	getNumTiles: action TilesCoord:[valNumTiles] ==>
	do
		numTiles := valNumTiles;
		iLoop := 0;
	end

	getTilesCoord.launch: action TilesCoord:[tilesCoord] repeat 4 ==>
	guard
		iLoop < numTiles
	do
		tilesBegSamp[iLoop] := [tilesCoord[0], tilesCoord[1]];
		tilesEndSamp[iLoop] := [tilesCoord[2], tilesCoord[3]];
		iLoop := iLoop + 1;
	end

	getTilesCoord.done: action ==>
	guard
		iLoop = numTiles
	end

	

	getCuPix.launch.pict: action  IsPicSlcLcu:[isLcu] ==>
	guard
		tileIdx < numTiles && yIdx < picSize[1]-lcuSizeMax && xIdx < picSize[0]-lcuSizeMax && isLcu = NEW_LCU
	do
		xAddrVert := xIdx;
		yAddrVert := yIdx;
		blkIdx := 0;
		pixAddr[0] := xIdx;
		pixAddr[1] := yIdx;
	end

	getCuPix.launch.fromSelCu: action Bs:[bs] repeat 2*16, Qp:[qp] repeat 16,
		ReconstrCuProcessDone:[procDone] repeat 16 ==>
	guard
		blkIdx < numPartition
	var
		uint(size=16) coord[2] 	
	do
		foreach uint partIdx in 0 .. 15
		do
			zScanToAbsCoord(blkIdx, coord);
			coord[0] := xIdx + coord[0];
			coord[1] := yIdx + coord[1];
			qpTab[coord[0]>>2][coord[1]>>2] := qp[partIdx];
	
			bSTableVert[blkIdx] := bs[2 * partIdx];
			bSTableHoriz[xIdx >> log2LcuSizeMax][yIdx >> log2LcuSizeMax][blkIdx] := bs[2 * partIdx + 1];
	
			blkIdx := blkIdx + 1;
		end
	end

 
	getCuPix.launch.luma.fromDbf: action ReconstrCuProcessDone:[procDone] repeat 16 ==>
	guard
		blkIdx < numPartition
	do
		blkIdx := blkIdx + 16;
	end

	getCuPix.launch.lumaDone: action  ==>
	guard
		blkIdx = numPartition
	do
		blkIdx := 0;
		computeNextLcuAddr();
	end

	getCuPix.launch.getPartDone: action ==>
	guard
		blkIdx = numPartition
	do
		/*lastXIdx := xIdx;
		lastYIdx := yIdx;*/
		computeNextLcuAddr();
	end

	getCuPix.launch.lastColOrRow: action IsPicSlcLcu:[isLcu] ==>
	guard
		(xIdx >= picSize[0]-lcuSizeMax || yIdx >= picSize[1]-lcuSizeMax) && isLcu = NEW_LCU
	do
		xAddrVert := xIdx;
		yAddrVert := yIdx;

		blkIdx := 0;
		zScanToAbsCoord(0, pixAddr);
		pixAddr[0] := pixAddr[0] + xAddrVert;
		pixAddr[1] := pixAddr[1] + yAddrVert;
	end

	verticalFilt.isTrue: action ==>
	guard
		FILT_VERT_EDGES
	end

	verticalFilt.isFalse: action ==>
	guard
		not FILT_VERT_EDGES
	end

	getBlk.vert.launch: action ReconstrCuProcessDone:[procDone] ==>
	guard
		blkIdx < numPartition && pixAddr[0] < picSize[0] && pixAddr[1] < picSize[1]
	do
		blkIdx := blkIdx + 1;
		zScanToAbsCoord(blkIdx, pixAddr);
		pixAddr[0] := pixAddr[0] + xAddrVert;
		pixAddr[1] := pixAddr[1] + yAddrVert;
	end

	getBlk.skip: action ==>
	guard
		blkIdx < numPartition,
		pixAddr[0] >= picSize[0] || pixAddr[1] >= picSize[1]
	do
		bSTableVert[blkIdx] := 0;
		bSTableHoriz[xAddrVert >> log2LcuSizeMax][yAddrVert >> log2LcuSizeMax][blkIdx] := 0;
		blkIdx := blkIdx + 1;
		zScanToAbsCoord(blkIdx, pixAddr);
		pixAddr[0] := pixAddr[0] + xAddrVert;
		pixAddr[1] := pixAddr[1] + yAddrVert;
	end

	getBlk.done: action ==>
	guard
		blkIdx = numPartition
	do
		/*lastXIdx := xIdx;
		lastYIdx := yIdx;*/
		computeNextLcuAddr();
	end


	getBs4Blk.launch: action  Bs:[bs] repeat 2, Qp:[qp] ==>
	guard
		blkIdx < numPartition
	do

		qpTab[(pixAddr[0] & PICT_WIDTH_POW_2-1) >>2][pixAddr[1]/4] := qp;
		bSTableVert[blkIdx] := bs[0];
		bSTableHoriz[xAddrVert >> log2LcuSizeMax][yAddrVert >> log2LcuSizeMax][blkIdx] := bs[1];

		blkIdx := blkIdx + 1;
		zScanToAbsCoord(blkIdx, pixAddr);
		pixAddr[0] := pixAddr[0] + xAddrVert;
		pixAddr[1] := pixAddr[1] + yAddrVert;
	end

	getBs4Blk.skip: action ==>
	guard
		blkIdx < numPartition,
		pixAddr[0] >= picSize[0] || pixAddr[1] >= picSize[1]
	do
		bSTableVert[blkIdx] := 0;
		bSTableHoriz[xAddrVert >> log2LcuSizeMax][yAddrVert >> log2LcuSizeMax][blkIdx] := 0;
		blkIdx := blkIdx + 1;
		zScanToAbsCoord(blkIdx, pixAddr);
		pixAddr[0] := pixAddr[0] + xAddrVert;
		pixAddr[1] := pixAddr[1] + yAddrVert;
	end

	getBs4Blk.done: action ==>
	guard
		blkIdx = numPartition
	do
		blkIdx := 0;
		zScanToAbsCoord(0, pixAddr);
		pixAddr[0] := pixAddr[0] + xAddrVert;
		pixAddr[1] := pixAddr[1] + yAddrVert;
	end

	getCuPix.done: action ==>
	guard
		tileIdx = numTiles
	do
		/*lastXIdx := 0;
		lastYIdx := 0;*/
		xIdx := 0;
		yIdx := 0;
		tileIdx := 0;
	end

	filterEdges: action ==>
	var
		uint(size=16) blkAddr[2]
	do
		if(not disDbf) then
			if(FILT_VERT_EDGES) then
				foreach int idxBlk in 0 .. numPartition - 1
				do
					if(bSTableVert[idxBlk]!=0) then
						zScanToAbsCoord(idxBlk, blkAddr);
						blkAddr[0] := blkAddr[0] + xAddrVert;
						blkAddr[1] := blkAddr[1] + yAddrVert;
						decisionProcessLumaBlkEdge(blkAddr, true, bSTableVert[idxBlk]);
						filterProcessLumaBlkEdge(blkAddr, true);
						if(bSTableVert[idxBlk]=2 && ((blkAddr[0]>>2)&3) = 0 ) then
							foreach int cIdx in 1 .. 2
							do
								filtProcessChrBlkEdge(blkAddr, true, cIdx);
							end
						end
					end
				end
			end
			if(FILT_HOR_EDGES && FILT_VERT_EDGES) then
				yAddrHor := yAddrVert;
				if(xAddrVert > 0) then
					xAddrHor := xAddrVert - lcuSizeMax;
					filterHorEdges();
				end
				if(xAddrVert + lcuSizeMax >= picSize[0]) then
					xAddrHor := xAddrVert;
					filterHorEdges();
				end
			end
			if(FILT_HOR_EDGES && not FILT_VERT_EDGES) then
				yAddrHor := yAddrVert;
				xAddrHor := xAddrVert;
				filterHorEdges();
			end
		end
		if(FILT_HOR_EDGES && FILT_VERT_EDGES) then
			if(yAddrVert > 0) then
				if(xAddrVert > 0) then
					sendFilteredLcu(xAddrVert - lcuSizeMax, yAddrVert - lcuSizeMax);
				end
				if(xAddrVert + lcuSizeMax >= picSize[0]) then
					sendFilteredLcu(xAddrVert, yAddrVert - lcuSizeMax);
				end
				if(yAddrVert + lcuSizeMax >= picSize[1]) then
					if(xAddrVert > 0) then
						sendFilteredLcu(xAddrVert - lcuSizeMax, yAddrVert);
					end
					if(xAddrVert + lcuSizeMax >= picSize[0]) then
						sendFilteredLcu(xAddrVert, yAddrVert);
					end
				end
			end
		else if(FILT_VERT_EDGES) then
			if(xAddrVert > 0) then
				sendFilteredLcu(xAddrVert - lcuSizeMax, yAddrVert);
			end
			if(xAddrVert + lcuSizeMax >= picSize[0]) then
				sendFilteredLcu(xAddrVert, yAddrVert);
			end
		else
			if(yAddrVert > 0) then
				sendFilteredLcu(xAddrVert, yAddrVert - lcuSizeMax);
			end
			if(yAddrVert + lcuSizeMax >= picSize[1]) then
				sendFilteredLcu(xAddrVert, yAddrVert);
			end
		end end
	end

	/*filteringOnlyVertEdge.isTrue: action ==>
	guard
		FILT_VERT_EDGES and not FILT_HOR_EDGES
	end

	filteringOnlyVertEdge.isFalse: action ==>
	guard
		FILT_HOR_EDGES
	end*/
 
	sendSamples.ready: action ==>
	guard
		 mbFiltered[xIdxBis >> log2LcuSizeMax][yIdxBis >> log2LcuSizeMax] && tileIdxBis < numTiles//,
//		FILT_HOR_EDGES || xIdx != lastXIdx || yIdx != lastYIdx
	end

	sendSamples.notReady: action ==>
	guard
		 not(mbFiltered[xIdxBis >> log2LcuSizeMax][yIdxBis >> log2LcuSizeMax] && tileIdxBis < numTiles)//,
//		FILT_HOR_EDGES || xIdx != lastXIdx || yIdx != lastYIdx
	end

	sendProcessDone.launch.filtDone: action ==> ProcessDone:[true]
	guard
		tileIdxBis < numTiles && FILT_HOR_EDGES
	do
		computeNextLcuAddrBis();
	end

	sendProcessDone.launch.isHalfFilt.is64x64: action ==> ProcessDone:[[true : for int i1 in 0 .. 255]] repeat 256
	guard
		lcuSizeMax = 64 && not FILT_HOR_EDGES
	do
		computeNextLcuAddrBis();
	end

	sendProcessDone.launch.isHalfFilt.is32x32: action ==> ProcessDone:[[true : for int i1 in 0 .. 63]] repeat 64
	guard
		lcuSizeMax = 32 && not FILT_HOR_EDGES
	do
		computeNextLcuAddrBis();
	end

	sendProcessDone.launch.isHalfFilt.is16x16: action ==> ProcessDone:[[true : for int i1 in 0 .. 15]] repeat 16
	guard
		lcuSizeMax = 16 && not FILT_HOR_EDGES
	do
		computeNextLcuAddrBis();
	end

	sendProcessDone.done: action ==>
	guard
		not mbFiltered[xIdxBis >> log2LcuSizeMax][yIdxBis >> log2LcuSizeMax]  || tileIdxBis = numTiles
	end

	schedule fsm IsNewPict:
		IsNewPict (isNewPict )--> GetNumTiles;

		GetCuPix  (isNewSlc                          )--> GetNumTiles;
		GetCuPix  (getCuPix.launch.pict              )--> CheckPartType;
		GetCuPix  (getCuPix.launch.lastColOrRow      )--> GetBs4Blk;
		GetCuPix  (getCuPix.done                     )--> CheckSendSamples;

		CheckPartType (verticalFilt.isTrue  )--> GetPixNonFilt;
		CheckPartType (verticalFilt.isFalse )--> GetBs;

		GetPixNonFilt (getCuPix.launch.fromSelCu   )--> GetPixNonFilt;
		GetPixNonFilt (getCuPix.launch.getPartDone )--> FilterEdges;

		GetBs (getBs4Blk.launch )--> GetBs;
		GetBs (getBs4Blk.done   )--> GetPixHalfFiltLuma;

		GetPixHalfFiltLuma (getCuPix.launch.luma     )--> GetPixHalfFiltLuma;
		GetPixHalfFiltLuma (getCuPix.launch.lumaDone )--> FilterEdges;

		GetNumTiles   (getNumTiles          )--> GetTilesCoord;
		GetTilesCoord (getTilesCoord.launch )--> GetTilesCoord;
		GetTilesCoord (getTilesCoord.done   )--> GetCuPix;

		GetBs4Blk (getBs4Blk.launch )--> GetBs4Blk;
		GetBs4Blk (getBs4Blk.skip   )--> GetBs4Blk;
		GetBs4Blk (getBs4Blk.done   )--> GetBlk;

		GetBlk (verticalFilt.isTrue  )--> GetVertBlk;
		GetBlk (verticalFilt.isFalse )--> GetHorBlkLuma;

		GetVertBlk (getBlk.vert.launch )--> GetVertBlk;
		GetVertBlk (getBlk.skip        )--> GetVertBlk;
		GetVertBlk (getBlk.done        )--> FilterEdges;

		GetHorBlkLuma (getCuPix.launch.luma     )--> GetHorBlkLuma;
		GetHorBlkLuma (getCuPix.launch.lumaDone )--> FilterEdges;

		FilterEdges (filterEdges  )--> CheckSendSamples2;//CheckEdgeFiltered;

		//CheckEdgeFiltered (filteringOnlyVertEdge.isTrue  )--> SendSamplesVert;
		//CheckEdgeFiltered (filteringOnlyVertEdge.isFalse )--> CheckSendSamples2;

		/*SendSamplesVert (sendSamples.launch )--> GetCuPix;
		SendSamplesVert (sendSamples.skip   )--> GetCuPix;*/

		CheckSendSamples2 (sendSamples.ready    )--> SendProcessDone2;
		CheckSendSamples2 (sendSamples.notReady )--> GetCuPix;

		SendProcessDone2 (sendProcessDone.launch )--> GetCuPix;

		CheckSendSamples (sendSamples.ready    )--> SendProcessDone;
		CheckSendSamples (sendSamples.notReady )--> IsNewPict;

		SendProcessDone (sendProcessDone.launch )--> CheckSendSamples;
		SendProcessDone (sendProcessDone.done   )--> IsNewPict;
	end
	priority
		getBs4Blk.skip > getBs4Blk.launch;
	end
end