package devel.org.sc29.wg11.mpegh.part2.main.inter;

import std.util.Math.*;
import  devel.org.sc29.wg11.mpegh.part2.common.CommonConstantHEVC.*;

unit InterFunctions : 
	
	uint(size=4) bitDepth = 8;
	uint(size=10) maxPixVal = (1<<bitDepth)-1;
	int shift1 = 6;
	int(size=8) ff_hevc_epel_filters[7][4] = 
  [ [-2, 58, 10, -2],
	[-4, 54, 16, -2],
	[-6, 46, 28, -4],
	[-4, 36, 36, -4],
	[-4, 28, 46, -6],
	[-2, 16, 54, -4],
	[-2, 10, 58, -2]];
	
	function QPEL_FILTER_1_H(uint(size=8) src [ (64 + 7)*( 64 + 7) ], uint (size=7) srcStride,
		uint(size=7) x, uint(size=7) y) --> int(size=16) :
		(-src[x - 3 + y * srcStride] + 4 * src[x - 2 + y * srcStride] - 10 * src[x - 1 + y * srcStride] + 58 *
		src[x + y * srcStride] + 17 * src[x + 1 + y * srcStride] - 5 * src[x + 2 + y * srcStride] + 1 * src[x +
		3 + y * srcStride])
	end

	function QPEL_FILTER_2_H(uint(size=8) src [ (64 + 7)*( 64 + 7) ], uint (size=7) srcStride,
		uint(size=7) x, uint(size=7) y) --> int(size=16) :
		(-src[x - 3 + y * srcStride] + 4 * src[x - 2 + y * srcStride] - 11 * src[x - 1 + y * srcStride] + 40 *
		src[x + y * srcStride] + 40 * src[x + 1 + y * srcStride] - 11 * src[x + 2 + y * srcStride] + 4 * src[x
		+ 3 + y * srcStride] - src[x + 4 + y * srcStride])
	end

	function QPEL_FILTER_3_H(uint(size=8) src [ (64 + 7)*( 64 + 7) ], uint (size=7) srcStride,
		uint(size=7) x, uint(size=7) y) --> int(size=16) :
		(src[x - 2 + y * srcStride] - 5 * src[x - 1 + y * srcStride] + 17 * src[x + y * srcStride] + 58 * src[x
		+ 1 + y * srcStride] - 10 * src[x + 2 + y * srcStride] + 4 * src[x + 3 + y * srcStride] - src[x + 4 + y * srcStride])
	end
	
	function QPEL_FILTER_1_V(uint(size=8) src [ (64 + 7)*( 64 + 7) ], uint (size=7) srcStride,
		uint(size=7) x, uint(size=7) y) --> int(size=16) :
		(-src[x + (y - 3) * srcStride] + 4 * src[x + (y - 2) * srcStride] - 10 * src[x + (y - 1) * srcStride] + 58 *
		src[x + (y) * srcStride] + 17 * src[x + (y + 1) * srcStride] - 5 * src[x + (y + 2) * srcStride] + 1 * src[x + (y + 3) * srcStride])
	end

	function QPEL_FILTER_2_V(uint(size=8) src [ (64 + 7)*( 64 + 7) ], uint (size=7) srcStride,
		uint(size=7) x, uint(size=7) y) --> int(size=16) :
		(-src[x + (y - 3) * srcStride] + 4 * src[x + (y - 2) * srcStride] - 11 * src[x + (y - 1) * srcStride] + 40 *
		src[x + (y) * srcStride] + 40 * src[x + (y + 1) * srcStride] - 11 * src[x + (y + 2) * srcStride] + 4 * src[x + (y + 3) * srcStride] - src[x + (y + 4) * srcStride])
	end

	function QPEL_FILTER_3_V(uint(size=8) src [ (64 + 7)*( 64 + 7) ], uint (size=7) srcStride,
		uint(size=7) x, uint(size=7) y) --> int(size=16) :
		(src[x + (y - 2) * srcStride] - 5 * src[x + (y - 1) * srcStride] + 17 * src[x + (y) * srcStride] + 58 * src[x
		+ (y + 1) * srcStride] - 10 * src[x + (y + 2) * srcStride] + 4 * src[x + (y + 3) * srcStride] - src[x + (y + 4) * srcStride])
	end
	
	function QPEL_FILTER_1_V_16(int(size=16) src [ (64 + 7)*( 64 + 7) ], uint (size=7) srcStride,
		uint(size=7) x, uint(size=7) y) --> int(size=32) :
		(-src[x + (y - 3) * srcStride] + 4 * src[x + (y - 2) * srcStride] - 10 * src[x + (y - 1) * srcStride] + 58 *
		src[x + (y) * srcStride] + 17 * src[x + (y + 1) * srcStride] - 5 * src[x + (y + 2) * srcStride] + 1 * src[x + (y + 3) * srcStride])
	end

	function QPEL_FILTER_2_V_16(int(size=16) src [ (64 + 7)*( 64 + 7) ], uint (size=7) srcStride,
		uint(size=7) x, uint(size=7) y) --> int(size=32) :
		(-src[x + (y - 3) * srcStride] + 4 * src[x + (y - 2) * srcStride] - 11 * src[x + (y - 1) * srcStride] + 40 *
		src[x + (y) * srcStride] + 40 * src[x + (y + 1) * srcStride] - 11 * src[x + (y + 2) * srcStride] + 4 * src[x + (y + 3) * srcStride] - src[x + (y + 4) * srcStride])
	end

	function QPEL_FILTER_3_V_16(int(size=16) src [ (64 + 7)*( 64 + 7) ], uint (size=7) srcStride,
		uint(size=7) x, uint(size=7) y) --> int(size=32) :
		(src[x + (y - 2) * srcStride] - 5 * src[x + (y - 1) * srcStride] + 17 * src[x + (y) * srcStride] + 58 * src[x
		+ (y + 1) * srcStride] - 10 * src[x + (y + 2) * srcStride] + 4 * src[x + (y + 3) * srcStride] - src[x + (y + 4) * srcStride])
	end
	
	function EPEL_FILTER_H(uint(size=8) src  [ (64 + 7)*( 64 + 7) ], uint (size=7) srcStride,
		uint(size=7) x, uint(size=7) y, int(size=8) filter_0,
		int(size=8) filter_1, int(size=8) filter_2, int(size=8) filter_3) --> int(size=16) 
		:
		(filter_0*src[x - 1 + y * srcStride] + filter_1*src[x + y * srcStride] + filter_2*src[x + 1 + y * srcStride] + filter_3*src[x + 2 + y * srcStride])
	end
	
	function EPEL_FILTER_V(uint(size=8) src [ (64 + 7)*( 64 + 7) ], uint (size=7) srcStride,
		int(size=16) x, int(size=16) y, int(size=8) filter_0,
		int(size=8) filter_1, int(size=8) filter_2, int(size=8) filter_3) --> int(size=16) 
		:
		(filter_0*src[x + (y - 1) * srcStride] + filter_1*src[x + (y) * srcStride] + filter_2*src[x + (y + 1) * srcStride] + filter_3*src[x + (y + 2) * srcStride])
	end
	
	function EPEL_FILTER_V_16(int(size=16) src [ (64 + 7)*( 64 + 7) ], uint (size=7) srcStride,
		int(size=16) x, int(size=16) y, int(size=8) filter_0,
		int(size=8) filter_1, int(size=8) filter_2, int(size=8) filter_3) --> int(size=32) 
		:
		(filter_0*src[x + (y - 1) * srcStride] + filter_1*src[x + (y) * srcStride] + filter_2*src[x + (y + 1) * srcStride] + filter_3*src[x + (y + 2) * srcStride])
	end
	
	procedure put_hevc_qpel_pixel_cal(int(size=16) predSamples [ 2 ] [ 64 * 64 ], uint(size=2) listIdx,
		uint(size=8) refSamples [ (64 + 7)*( 64 + 7) ], uint (size=7) predCuSize, 
		uint(size=7) width, uint(size=7) height)
	var
		uint(size=32) srcStride := 3*predCuSize,
		uint(size=32) dstStride := 0
	begin
		foreach int y in 0 .. height do
			foreach int x in 0 .. width do
				predSamples[listIdx][x + dstStride] := refSamples[(x+3) + srcStride] << shift1;
			end
			dstStride := dstStride + width + 1;
			srcStride := srcStride + predCuSize;
		end
	end
	
	procedure put_hevc_qpel_h_cal (int(size=16) predSamples [ 2 ] [64*64], uint(size=2) listIdx,
		uint(size=8) refSamples [ (64 + 7)*( 64 + 7) ], uint (size=7) predCuSize, 
		uint(size=7) width, uint(size=7) height, int mx)
	begin
		if mx = 1 then
			foreach int y in 0 .. height do
				foreach int x in 0 .. width do					
						predSamples[listIdx][x + y * (width + 1)] := QPEL_FILTER_1_H(refSamples, predCuSize, x+3, y+3);	
				end
			end
		elsif mx = 2 then
			foreach int y in 0 .. height do
				foreach int x in 0 .. width do					
						predSamples[listIdx][x + y * (width + 1)] := QPEL_FILTER_2_H(refSamples, predCuSize, x+3, y+3);
				end
			end
		elsif mx = 3 then
			foreach int y in 0 .. height do
				foreach int x in 0 .. width do					
						predSamples[listIdx][x + y * (width + 1)] := QPEL_FILTER_3_H(refSamples, predCuSize, x+3, y+3);
				end
			end
		end
	end

	procedure put_hevc_qpel_v_cal (int(size=16) predSamples [ 2 ] [64*64], uint(size=2) listIdx,
		uint(size=8) refSamples [ (64 + 7)*( 64 + 7) ], uint (size=7) predCuSize, 
		uint(size=7) width, uint(size=7) height, int my)
	begin
		if my = 1 then
			foreach int y in 0 .. height do
				foreach int x in 0 .. width do
					predSamples[listIdx][x + y * (width + 1)] := QPEL_FILTER_1_V(refSamples, predCuSize, x+3, y+3);
				end
			end
		elsif my = 2 then
			foreach int y in 0 .. height do
				foreach int x in 0 .. width do
					predSamples[listIdx][x + y * (width + 1)] := QPEL_FILTER_2_V(refSamples, predCuSize, x+3, y+3);
				end
			end
		elsif my = 3 then
			foreach int y in 0 .. height do
				foreach int x in 0 .. width do
					predSamples[listIdx][x + y * (width + 1)] := QPEL_FILTER_3_V(refSamples, predCuSize, x+3, y+3);
				end
			end
		end
	end
	
	procedure put_hevc_qpel_hv_cal (int(size=16) predSamples [ 2 ] [64*64], uint(size=2) listIdx,
		uint(size=8) refSamples [ (64 + 7)*( 64 + 7) ], uint (size=7) predCuSize, 
		uint(size=7) width, uint(size=7) height, int mx, int my)
	var
		int(size=16) intermSamples[ (64 + 7) *(64 + 7)]
	begin
		if mx = 1 then
			foreach int y in 0 .. height+7 do
				foreach int x in 0 .. width do
					intermSamples[x + y * predCuSize] := QPEL_FILTER_1_H(refSamples, predCuSize, x+3, y) - 8192;
				end
			end
		elsif mx = 2 then
			foreach int y in 0 .. height+7 do
				foreach int x in 0 .. width do
					intermSamples[x + y * predCuSize] := QPEL_FILTER_2_H(refSamples, predCuSize, x+3, y) - 8192;
				end
			end
		elsif mx = 3 then
			foreach int y in 0 .. height+7 do
				foreach int x in 0 .. width do
					intermSamples[x + y * predCuSize] := QPEL_FILTER_3_H(refSamples, predCuSize, x+3, y) - 8192;
				end
			end
		end
		
		if my = 1 then
			foreach int y in 0 .. height do
				foreach int x in 0 .. width do
					predSamples[listIdx][x + y * (width + 1)] := (QPEL_FILTER_1_V_16(intermSamples, predCuSize, x, y+3) + 524288)>>6;
				end
			end		
		elsif my = 2 then
			foreach int y in 0 .. height do
				foreach int x in 0 .. width do
					predSamples[listIdx][x + y * (width + 1)] := (QPEL_FILTER_2_V_16(intermSamples, predCuSize, x, y+3) + 524288)>>6;
				end
			end
		elsif my = 3 then
			foreach int y in 0 .. height do
				foreach int x in 0 .. width do
					predSamples[listIdx][x + y * (width + 1)] := (QPEL_FILTER_3_V_16(intermSamples, predCuSize, x, y+3) + 524288)>>6;
				end
			end
		end
	end
	
	@optimize_c(condition="defined(OPENHEVC_ENABLE)", name="put_hevc_qpel_orcc")
	procedure put_hevc_qpel_cal (int(size=16) predSamples [ 2 ] [64*64], uint(size=2) listIdx,
		uint(size=8) refSamples [ (64 + 7)*( 64 + 7) ], uint (size=7) predCuSize, 
		uint(size=7) width, uint(size=7) height, int mx, int my)
	begin
			if(mx = 0 && my = 0) then
				put_hevc_qpel_pixel_cal(predSamples, listIdx, refSamples, predCuSize, width, height);
			elsif(my = 0) then
				put_hevc_qpel_h_cal(predSamples, listIdx, refSamples, predCuSize, width, height, mx);
			elsif(mx = 0) then
				put_hevc_qpel_v_cal(predSamples, listIdx, refSamples, predCuSize, width, height, my);
			else
				put_hevc_qpel_hv_cal(predSamples, listIdx, refSamples, predCuSize, width, height, mx, my);
			end
	end
 
	procedure put_hevc_epel_pixel_cal (int(size=16) predSamples [ 2 ] [64*64], uint(size=2) listIdx,
								uint(size=8) refSamples [ (64 + 7)*( 64 + 7) ], uint (size=7) predCuSize,
								uint(size=7) width, uint(size=7) height)
	begin
	    foreach int y in 0 .. height do
			foreach int x in 0 .. width do
	            predSamples[listIdx][x + y * (width + 1)] := refSamples[(x+1) + (y+1)*predCuSize] << shift1;
	        end
	    end
	end
	
	procedure put_hevc_epel_h_cal (int(size=16) predSamples [ 2 ] [64*64], uint(size=2) listIdx,
								uint(size=8) refSamples [ (64 + 7)*( 64 + 7) ], uint (size=7) predCuSize,
								uint(size=7) width, uint(size=7) height, int mx)
	var
		int(size=8) filter_0 := ff_hevc_epel_filters[mx - 1][0],
	    int(size=8) filter_1 := ff_hevc_epel_filters[mx - 1][1],
	    int(size=8) filter_2 := ff_hevc_epel_filters[mx - 1][2],
	    int(size=8) filter_3 := ff_hevc_epel_filters[mx - 1][3]
	begin
	    foreach int y in 0 .. height do
			foreach int x in 0 .. width do
	            predSamples[listIdx][x + y * (width + 1)] := EPEL_FILTER_H(refSamples, predCuSize, x+1, y+1, filter_0, filter_1, filter_2, filter_3);
	        end
	    end
	end
	
	procedure put_hevc_epel_v_cal (int(size=16) predSamples [ 2 ] [64*64], uint(size=2) listIdx,
								uint(size=8) refSamples [ (64 + 7)*( 64 + 7) ], uint (size=7) predCuSize,
								uint(size=7) width, uint(size=7) height, int my)
	var
		int(size=8) filter_0 := ff_hevc_epel_filters[my - 1][0],
	    int(size=8) filter_1 := ff_hevc_epel_filters[my - 1][1],
	    int(size=8) filter_2 := ff_hevc_epel_filters[my - 1][2],
	    int(size=8) filter_3 := ff_hevc_epel_filters[my - 1][3]
	begin
	    foreach int y in 0 .. height do
			foreach int x in 0 .. width do
	            predSamples[listIdx][x + y * (width + 1)] := EPEL_FILTER_V(refSamples, predCuSize, x+1, y+1, filter_0, filter_1, filter_2, filter_3);
	        end
	    end
	end
 	
 	procedure put_hevc_epel_hv_cal (int(size=16) predSamples [ 2 ] [64*64], uint(size=2) listIdx,
								uint(size=8) refSamples [ (64 + 7)*( 64 + 7) ], uint (size=7) predCuSize,
								uint(size=7) width, uint(size=7) height, int mx, int my)
	var
		int(size=16) intermSamples[ (64 + 7)*( 64 + 7) ],
		int(size=8) filter_0 := ff_hevc_epel_filters[mx - 1][0],
	    int(size=8) filter_1 := ff_hevc_epel_filters[mx - 1][1],
	    int(size=8) filter_2 := ff_hevc_epel_filters[mx - 1][2],
	    int(size=8) filter_3 := ff_hevc_epel_filters[mx - 1][3]
	begin
		foreach int y in 0 .. height+3 do
				foreach int x in 0 .. width do
		            intermSamples[x + y * predCuSize] := EPEL_FILTER_H(refSamples, predCuSize, x+1, y, filter_0, filter_1, filter_2, filter_3) - 8192;
		        end
		end
	    filter_0 := ff_hevc_epel_filters[my - 1][0];
	    filter_1 := ff_hevc_epel_filters[my - 1][1];
	    filter_2 := ff_hevc_epel_filters[my - 1][2];
	    filter_3 := ff_hevc_epel_filters[my - 1][3];
	    foreach int y in 0 .. height do
			foreach int x in 0 .. width do
	            predSamples[listIdx][x + y * (width + 1)] := (EPEL_FILTER_V_16(intermSamples, predCuSize, x, y+1, filter_0, filter_1, filter_2, filter_3) + 524288) >> 6;
	        end
	    end
	end
	
	@optimize_c(condition="defined(OPENHEVC_ENABLE)", name="put_hevc_epel_orcc")
	procedure put_hevc_epel_cal (int(size=16) predSamples [ 2 ] [64*64], uint(size=2) listIdx,
								uint(size=8) refSamples [ (64 + 7)*( 64 + 7) ], uint (size=7) predCuSize,
								uint(size=7) width, uint(size=7) height, int mx, int my)
	begin
		if(mx = 0 && my = 0) then
			put_hevc_epel_pixel_cal(predSamples, listIdx, refSamples, predCuSize, width, height);
		elsif(my = 0) then
			put_hevc_epel_h_cal(predSamples, listIdx, refSamples, predCuSize, width, height, mx);
		elsif(mx = 0) then
			put_hevc_epel_v_cal(predSamples, listIdx, refSamples, predCuSize, width, height, my);
		else
			put_hevc_epel_hv_cal(predSamples, listIdx, refSamples, predCuSize, width, height, mx, my);
		end
	end
	
	/* Weighted Pred with RasterScan store */
	
	@optimize_c(condition="defined(OPENHEVC_ENABLE)", name="put_unweighted_pred_orcc")
	procedure put_unweighted_pred(int(size=16) src[2][64*64], int width, int height, uint(size=1) rdList, uint(size=8) dst[64*64])
	begin
	    foreach int y in 0 .. height do
	        foreach int x in 0 .. width do
	            src[0][x + y * (width + 1)] := (src[rdList][x + y * (width + 1)] + (1 <<(shift1-1)))>>shift1;
	            dst[x + y * (width + 1)] := clip_i32(src[0][x + y * (width + 1)], 0 , maxPixVal);
	        end
	    end
	end
 
    @optimize_c(condition="defined(OPENHEVC_ENABLE)", name="put_weighted_pred_avg_orcc")
	procedure put_weighted_pred_avg(int(size=16) src[2][64*64], int width, int height, uint(size=8) dst[64*64])
	begin
	    foreach int y in 0 .. height do
	        foreach int x in 0 .. width do
	            src[0][x + y * (width + 1)] := (src[0][x + y * (width + 1)] + src[1][x + y * (width + 1)] + 64) >> 7;
				dst[x + y * (width + 1)] := clip_i32(src[0][x + y * (width + 1)], 0 , maxPixVal);
	        end
	    end
	end

    @optimize_c(condition="defined(OPENHEVC_ENABLE)", name="weighted_pred_orcc")
	procedure weighted_pred(int logWD, int weightCu[2], int offsetCu[2],
		int(size=16)src[2][64*64], int width, int height, uint(size=1) rdList, uint(size=8) dst[64*64])
	var
	    int locLogWD = logWD,
	    int wX = weightCu[rdList],
	    int oX = offsetCu[rdList]	
	begin	
	    foreach int y in 0 .. height do
	        foreach int x in 0 .. width do
	            src[0][x + y * (width + 1)] :=
				if(locLogWD >= 1) then
					((src[rdList][x + y * (width + 1)]*wX + (1<<(locLogWD-1))) >> locLogWD)+oX
				else
					src[rdList][x + y * (width + 1)]*wX +oX
				end;
				dst[x + y * (width + 1)] := clip_i32(src[0][x + y * (width + 1)], 0 , maxPixVal);
	        end
	    end
	end

    @optimize_c(condition="defined(OPENHEVC_ENABLE)", name="weighted_pred_avg_orcc")
	procedure weighted_pred_avg(int logWD, int weightCu[2], int offsetCu[2],
		int(size=16) src[2][64*64], int width, int height, uint(size=8) dst[64*64])
	var
	    int locLogWD = logWD,
	    int w0 = weightCu[0],
	    int w1 = weightCu[1],
	    int o0 = offsetCu[0],
	    int o1 = offsetCu[1]	
	begin
		foreach int y in 0 .. height do
	        foreach int x in 0 .. width do
				src[0][x + y * (width + 1)] := (src[0][x + y * (width + 1)]*w0 + src[1][x + y * (width + 1)]*w1 +
					((o0+o1+1)<<locLogWD))>>(locLogWD+1);
				
				dst[x + y * (width + 1)] := clip_i32(src[0][x + y * (width + 1)], 0 ,
					maxPixVal);
			end
		end
	end
	
	@optimize_c(condition="defined(SSE_ENABLE) && HAVE_SSE4", name="weighted_pred_mono_orcc")
	procedure weighted_pred_mono(int logWD , int weightCu[2], int offsetCu[2] ,
		int (size=16) src[2][64*64], int width, int height, uint(size=8) dst[64*64])
	var
	    int locLogWD = logWD + 1,
	    int wX = weightCu[0] + weightCu[1],
	    int oX = offsetCu[0] + offsetCu[1] +1	
	begin
	   foreach int y in 0 .. height do
	       foreach int x in 0 .. width do
				src[0][x + y * (width + 1)] := ((src[0][x + y * (width + 1)]*wX + (oX<<(locLogWD-1))) >>locLogWD);
				dst[x + y * (width + 1)] := clip_i32(src[0][x + y * (width + 1)], 0 , maxPixVal);
	        end
	    end
	end
	
	/* Weighted Pred with Zscan store */
	
	@optimize_c(condition="defined(SSE_ENABLE) && HAVE_SSE4", name="put_unweighted_pred_zscan_orcc")
	procedure put_unweighted_pred_zscan (int (size=16) src[2][64*64], int width, int height, uint(size=1) rdList, uint (size=8) dst[64*64], int iComp)
	var
	  uint(size=16) zScanIdx,
	  uint(size=16) zScanIdxTmp,
	  int iStride = if (iComp = 0) then 2 else 1 end  
	begin 
	    foreach int y in 0 .. height do
	        zScanIdxTmp := ((y & ((iStride << 1) - 1)) << iStride) + (y >> iStride) * ((width + 1) << iStride);
	        foreach int x in 0 .. width do
	            zScanIdx := zScanIdxTmp + (x & ((iStride << 1) - 1)) + ((x >> iStride) << (iStride << 1));
	            src[0][x + y * (width + 1)] := (src[rdList][x + y * (width + 1)] + (1 <<(shift1-1)))>>shift1;
	            dst[zScanIdx] := clip_i32(src[0][x + y * (width + 1)], 0 , maxPixVal);
	        end
	    end
	end
	
	@optimize_c(condition="defined(SSE_ENABLE) && HAVE_SSE4", name="put_weighted_pred_avg_zscan_orcc")
	procedure put_weighted_pred_avg_zscan (int (size=16) src[2][64*64], int width, int height, uint (size=8) dst[64*64], int iComp)
	var
	  uint(size=16) zScanIdx,
	  uint(size=16) zScanIdxTmp,
	  int iStride = if (iComp = 0) then 2 else 1 end
	begin
	    foreach int y in 0 .. height do
	        zScanIdxTmp := ((y & ((iStride << 1) - 1)) << iStride) + (y >> iStride) * ((width + 1) << iStride);
	        foreach int x in 0 .. width do
	            zScanIdx := zScanIdxTmp + (x & ((iStride << 1) - 1)) + ((x >> iStride) << (iStride << 1));
	            src[0][x + y * (width + 1)] := (src[0][x + y * (width + 1)] + src[1][x + y * (width + 1)] + 64) >> 7;
				dst[zScanIdx] := clip_i32(src[0][x + y * (width + 1)], 0 , maxPixVal);
	        end
	    end
	end
	
	@optimize_c(condition="defined(SSE_ENABLE) && HAVE_SSE4", name="weighted_pred_zscan_orcc")
	procedure weighted_pred_zscan (int logWD, int weightCu [2], int offsetCu [2] ,
		int (size=16) src[2][64*64], int width, int height, uint(size=1) rdList, uint (size=8) dst[64*64], int iComp)
	var
	    int locLogWD,
	    int wX,
	    int oX,
	    uint(size=16) zScanIdx,
	    uint(size=16) zScanIdxTmp,
	    int iStride = if (iComp = 0) then 2 else 1 end	
	begin
	    
	    wX := weightCu[rdList];
		oX := offsetCu[rdList];
		locLogWD := logWD;
	
	    foreach int y in 0 .. height do
	        zScanIdxTmp := ((y & ((iStride << 1) - 1)) << iStride) + (y >> iStride) * ((width + 1) << iStride);
	        foreach int x in 0 .. width do
	            zScanIdx := zScanIdxTmp + (x & ((iStride << 1) - 1)) + ((x >> iStride) << (iStride << 1));
	            src[0][x + y * (width + 1)] :=
				if(locLogWD >= 1) then
					((src[rdList][x + y * (width + 1)]*wX + (1<<(locLogWD-1))) >> locLogWD)+oX
				else
					src[rdList][x + y * (width + 1)]*wX +oX
				end;
				dst[zScanIdx] := clip_i32(src[0][x + y * (width + 1)], 0 , maxPixVal);
	        end
	    end
	end
	
	@optimize_c(condition="defined(SSE_ENABLE) && HAVE_SSE4", name="weighted_pred_avg_zscan_orcc")
	procedure weighted_pred_avg_zscan (int logWD , int weightCu [2], int offsetCu [2] ,
		int (size=16) src[2][64*64], int width, int height, uint (size=8) dst[64*64], int iComp)
	var
	    int locLogWD,
	    int w0,
	    int w1,
	    int o0,
	    int o1,
	    uint(size=16) zScanIdx,
	    uint(size=16) zScanIdxTmp,
	    int iStride = if (iComp = 0) then 2 else 1 end	
	begin
		w0 := weightCu[0];
		w1 := weightCu[1];
		o0 := offsetCu[0];
		o1 := offsetCu[1];
		locLogWD := logWD;
		foreach int y in 0 .. height do
		    zScanIdxTmp := ((y & ((iStride << 1) - 1)) << iStride) + (y >> iStride) * ((width + 1) << iStride);
	        foreach int x in 0 .. width do
	            zScanIdx := zScanIdxTmp + (x & ((iStride << 1) - 1)) + ((x >> iStride) << (iStride << 1));
				src[0][x + y * (width + 1)] := (src[0][x + y * (width + 1)]*w0 + src[1][x + y * (width + 1)]*w1 +
					((o0+o1+1)<<locLogWD))>>(locLogWD+1);
				
				dst[zScanIdx] := clip_i32(src[0][x + y * (width + 1)], 0,
					maxPixVal);
			end
		end
	end
	
	@optimize_c(condition="defined(SSE_ENABLE) && HAVE_SSE4", name="weighted_pred_mono_zscan_orcc")
	procedure weighted_pred_mono_zscan (int logWD , int weightCu [2], int offsetCu [2] ,
		int (size=16) src[2][64*64], int width, int height, uint (size=8) dst[64*64], int iComp)
	var
	    int locLogWD,
	    int wX,
	    int oX,
	    uint(size=16) zScanIdx,
	    uint(size=16) zScanIdxTmp,
	    int iStride = if (iComp = 0) then 2 else 1 end
	begin
	    
	   wX := weightCu[0] + weightCu[1];
	   oX := offsetCu[0] + offsetCu[1] + 1;
	   locLogWD := logWD + 1;
	   foreach int y in 0 .. height do
	       zScanIdxTmp := ((y & ((iStride << 1) - 1)) << iStride) + (y >> iStride) * ((width + 1) << iStride);
	       foreach int x in 0 .. width do
	            zScanIdx := zScanIdxTmp + (x & ((iStride << 1) - 1)) + ((x >> iStride) << (iStride << 1));
				src[0][x + y * (width + 1)] := ((src[0][x + y * (width + 1)]*wX + (oX<<(locLogWD-1))) >>locLogWD);
				dst[zScanIdx] := clip_i32(src[0][x + y * (width + 1)], 0 , maxPixVal);
	        end
	    end
	end
	
	/* Gather 4x4 non-contiguous elements */
	@optimize_c(condition="defined(SSE_ENABLE) && HAVE_SSE2", name="gather32_4x4_orcc")
	procedure gather32_4x4_cal(
		uint(size= 8) outputSample[16], 
		uint(size= 8) inputSample[64 * 64], 
		uint(size= 9) offsetOut, 
		uint(size= 9) offsetIn,
		uint(size= 7) strideOut,
		uint(size= 7) strideIn)
	begin
	foreach uint y in 0 .. 3
		do
			foreach uint x in 0 .. 3
			do
				outputSample[offsetOut + y * 4 + x] := inputSample[offsetIn + x];
			end
			offsetIn := offsetIn + strideIn;
			offsetOut := offsetOut + strideOut;
		end
	end
	
end
