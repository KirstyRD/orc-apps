/********************************************************************************

This software module was originally developed by 
Florian Decologne (IETR/INSA of Rennes), 
in the course of development of the ISO/IEC 23002-5 (Video Tool Library) 
for reference purposes and its performance may not have been optimized. 
This software module is an implementation of one or more tools as 
specified by the ISO/IEC 23002-5.

ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright 
license to copy, distribute, and make derivative works of this software 
module or modifications thereof for use in implementations of the 
ISO/IEC 23002-5 in products that satisfy conformance criteria (if any). 

Those intending to use this software module in products are advised that 
its use may infringe existing patents. ISO/IEC have no liability for use 
of this software module or modifications thereof.

Copyright is not released for products that do not conform to audiovisual 
and image-coding related ITU Recommendations and/or ISO/IEC International 
Standards. 

Assurance that the originally developed software module can be used 
(1) in the ISO/IEC 23002-5 once the ISO/IEC 23002-5 has been adopted; and 
(2) to develop the ISO/IEC 23002-5: 

IETR/INSA of Rennes grants ISO/IEC all rights necessary to 
include the originally developed software module or modifications thereof 
in the ISO/IEC 23002-5 and to permit ISO/IEC to offer You a royalty-free, 
worldwide, non-exclusive, copyright license to copy, distribute, and make 
derivative works for use in implementations of the ISO/IEC 23002-5 in 
products that satisfy conformance criteria (if any), and to the extent 
that such originally developed software module or portions of it are 
included in the ISO/IEC 23002-5.  To the extent that IETR/INSA of Rennes
owns patent rights that would be required to make, use, or 
sell the originally developed software module or portions thereof 
included in the ISO/IEC 23002-5 in a conforming product, IETR/INSA of
Rennes will assure the ISO/IEC that it is willing to 
negotiate licenses under reasonable and non-discriminatory terms and 
conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications 
thereof for the sole  purpose of developing theISO/IEC 23002-5

IETR/INSA of Rennes retains full right to modify and use the 
code for its own purpose, assign or donate the code to a third party and 
to inhibit third parties from using the code for products that do not 
conform to MPEG-related ITU Recommendations and/or ISO/IEC International 
Standards. 

This copyright notice must be included in all copies or derivative works. 
Copyright (c) ISO/IEC 2008.
 
FU realizing Syntax Parsing for AVC
*****************************************************************************/

// Author: Damien de Saint Jorre <damien.desaintjorre@epfl.ch>

// This FU has been modified by Gildas Cocherel (INSA of Rennes) Jan 2012

/******************************************************************************
 * Definition of CommonPackage
 *****************************************************************************/
package org.sc29.wg11.common;
import  std.util.Math.*;
import  org.sc29.wg11.common.BitstreamReadUtils.*;

unit CabacDecodeBinFunction :

	/*************************************************************************
	 * Table 9-45
	 *************************************************************************/
	uint(size=7) transIdxMPS[64] = [
		 1, 2, 3, 4, 5, 6, 7, 8,
		 9,10,11,12,13,14,15,16,
		17,18,19,20,21,22,23,24,
		25,26,27,28,29,30,31,32,
		33,34,35,36,37,38,39,40,
		41,42,43,44,45,46,47,48,
		49,50,51,52,53,54,55,56,
		57,58,59,60,61,62,62,63
	];
	//
	uint(size=7) transIdxLPS[64] = [
		 0, 0, 1, 2, 2, 4, 4, 5,
		 6, 7, 8, 9, 9,11,11,12,
		13,13,15,15,16,16,18,18,
		19,19,21,21,22,22,23,24,
		24,25,26,26,27,27,28,29,
		29,30,30,30,31,32,32,33,
		33,33,34,34,35,35,35,36,
		36,36,37,37,37,38,38,63
	];	
	/*************************************************************************
	 * Table 9-44
	 *************************************************************************/
	uint(size=9) rangeTabLPS[64][4] = [
		[128,176,208,240], [128,167,197,227], [128,158,187,216], [123,150,178,205],
		[116,142,169,195], [111,135,160,185], [105,128,152,175], [100,122,144,166],
		[ 95,116,137,158], [ 90,110,130,150], [ 85,104,123,142], [ 81, 99,117,135],
		[ 77, 94,111,128], [ 73, 89,105,122], [ 69, 85,100,116], [ 66, 80, 95,110],
		[ 62, 76, 90,104], [ 59, 72, 86, 99], [ 56, 69, 81, 94], [ 53, 65, 77, 89],
		[ 51, 62, 73, 85], [ 48, 59, 69, 80], [ 46, 56, 66, 76], [ 43, 53, 63, 72],
		[ 41, 50, 59, 69], [ 39, 48, 56, 65], [ 37, 45, 54, 62], [ 35, 43, 51, 59],
		[ 33, 41, 48, 56], [ 32, 39, 46, 53], [ 30, 37, 43, 50], [ 29, 35, 41, 48],
		[ 27, 33, 39, 45], [ 26, 31, 37, 43], [ 24, 30, 35, 41], [ 23, 28, 33, 39],
		[ 22, 27, 32, 37], [ 21, 26, 30, 35], [ 20, 24, 29, 33], [ 19, 23, 27, 31],
		[ 18, 22, 26, 30], [ 17, 21, 25, 28], [ 16, 20, 23, 27], [ 15, 19, 22, 25],
		[ 14, 18, 21, 24], [ 14, 17, 20, 23], [ 13, 16, 19, 22], [ 12, 15, 18, 21],
		[ 12, 14, 17, 20], [ 11, 14, 16, 19], [ 11, 13, 15, 18], [ 10, 12, 15, 17],
		[ 10, 12, 14, 16], [  9, 11, 13, 15], [  9, 11, 12, 14], [  8, 10, 12, 14],
		[  8,  9, 11, 13], [  7,  9, 11, 12], [  7,  9, 10, 12], [  7,  8, 10, 11],
		[  6,  8,  9, 11], [  6,  7,  9, 10], [  6,  7,  8,  9], [  2,  2,  2,  2]
	];
	/*************************************************************************
	 * decodeInit
	 *************************************************************************/
	procedure decodeInit(
		uint(size=9) codIRange[1],
		uint(size=9) codIOffset[1],
		uint(size=FIFO_DEPTH) fifo[FIFO_SIZE_ALL]
	)
	var
		uint(size=32) res[1]
	begin
		codIRange[0] := 0x1FE;
		byte_align(fifo);
		getBits(9, fifo, res);
		codIOffset[0] := res[0];
	end
	/*************************************************************************
	 * decodeBin
	 *************************************************************************/
	procedure decodeBin(
		bool 		 bypassFlag,
		bool 		 terminateFlag,
		uint(size=9) codIRange[1],
		uint(size=9) codIOffset[1],
		uint(size=7) state[1],
		uint(size=1) mps[1],
		uint(size=1) binVal[1],
		uint(size=FIFO_DEPTH) fifo[FIFO_SIZE_ALL]
	)
	begin
		if bypassFlag = true then
			decodeBypass(codIRange, codIOffset, binVal, fifo);
		else
			if terminateFlag = true then
				decodeTerminate(codIRange, codIOffset, binVal, fifo);
			else
				decodeDecision(codIRange, codIOffset, state, mps, binVal, fifo);
			end
		end
	end
	/*************************************************************************
	 * decodeDecision
	 *************************************************************************/
	procedure decodeDecision(
		uint(size=9) codIRange[1],
		uint(size=9) codIOffset[1],
		uint(size=7) state[1],
		uint(size=1) mps[1],
		uint(size=1) binVal[1],
		uint(size=FIFO_DEPTH) fifo[FIFO_SIZE_ALL]
	)
	var
		uint(size=3) qCodIRangeIdx = (codIRange[0]>>6) & 3,
		uint(size=9) codIRangeLPS  = rangeTabLPS[state[0]][qCodIRangeIdx]
	begin
		codIRange[0] := codIRange[0] - codIRangeLPS;	
		if codIOffset[0] >= codIRange[0] then
			binVal[0]		:= 1 - mps[0];
			codIOffset[0]	:= codIOffset[0] - codIRange[0];
			codIRange[0]	:= codIRangeLPS;
			if state[0] = 0 then
				mps[0]		:= 1 - mps[0];
			end
			state[0]		:= transIdxLPS[state[0]];
		else
			binVal[0]       := mps[0]; 
			state[0]		:= transIdxMPS[state[0]];
		end
		renormD(codIRange, codIOffset, fifo);
	end
	/*************************************************************************
	 * renormD
	 *************************************************************************/
	procedure renormD(
		uint(size=9) codIRange[1],
		uint(size=9) codIOffset[1],
		uint(size=FIFO_DEPTH) fifo[FIFO_SIZE_ALL]
	)
	var
		uint(size=32) res[1],
		uint(size=32) count
	begin
	    count := 8 - log2_i16(codIRange[0]);
        if count > 0 then
          vld_u(count, fifo, res);
          codIRange[0] := codIRange[0] << count;
          codIOffset[0]	:= (codIOffset[0] << count) + res[0];
        end
	end
	/*************************************************************************
	 * decodeBypass
	 *************************************************************************/
	procedure decodeBypass(
		uint(size=9) codIRange[1],
		uint(size=16) codIOffset[1],
		uint(size=1) binVal[1],
		uint(size=FIFO_DEPTH) fifo[FIFO_SIZE_ALL]
	)
	var
		uint(size=32) res[1]
	begin
		vld_u(  1, fifo, res);
		codIOffset[0]		:= (codIOffset[0] << 1) + res[0];
		if codIOffset[0] >= codIRange[0] then
			binVal[0]		:= 1;
			codIOffset[0]	:= codIOffset[0] - codIRange[0];
		else
			binVal[0]       := 0; 
		end
	end
	/*************************************************************************
	 * decodeTerminate
	 *************************************************************************/
	procedure decodeTerminate(
		uint(size=9) codIRange[1],
		uint(size=9) codIOffset[1],
		uint(size=32) binVal[1],
		uint(size=FIFO_DEPTH) fifo[FIFO_SIZE_ALL]
	)
	begin
		codIRange[0] 		:= codIRange[0] - 2;		
		if codIOffset[0] >= codIRange[0] then
			binVal[0]		:= 1;
		else
			binVal[0]       := 0;
			renormD(codIRange, codIOffset, fifo);
		end
	end
end