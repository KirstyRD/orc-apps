/********************************************************************************

This software module was originally developed by 
Florian Decologne (IETR/INSA of Rennes), 
in the course of development of the ISO/IEC 23002-5 (Video Tool Library) 
for reference purposes and its performance may not have been optimized. 
This software module is an implementation of one or more tools as 
specified by the ISO/IEC 23002-5.

ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright 
license to copy, distribute, and make derivative works of this software 
module or modifications thereof for use in implementations of the 
ISO/IEC 23002-5 in products that satisfy conformance criteria (if any). 

Those intending to use this software module in products are advised that 
its use may infringe existing patents. ISO/IEC have no liability for use 
of this software module or modifications thereof.

Copyright is not released for products that do not conform to audiovisual 
and image-coding related ITU Recommendations and/or ISO/IEC International 
Standards. 

Assurance that the originally developed software module can be used 
(1) in the ISO/IEC 23002-5 once the ISO/IEC 23002-5 has been adopted; and 
(2) to develop the ISO/IEC 23002-5: 

IETR/INSA of Rennes grants ISO/IEC all rights necessary to 
include the originally developed software module or modifications thereof 
in the ISO/IEC 23002-5 and to permit ISO/IEC to offer You a royalty-free, 
worldwide, non-exclusive, copyright license to copy, distribute, and make 
derivative works for use in implementations of the ISO/IEC 23002-5 in 
products that satisfy conformance criteria (if any), and to the extent 
that such originally developed software module or portions of it are 
included in the ISO/IEC 23002-5.  To the extent that IETR/INSA of Rennes
owns patent rights that would be required to make, use, or 
sell the originally developed software module or portions thereof 
included in the ISO/IEC 23002-5 in a conforming product, IETR/INSA of
Rennes will assure the ISO/IEC that it is willing to 
negotiate licenses under reasonable and non-discriminatory terms and 
conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications 
thereof for the sole  purpose of developing theISO/IEC 23002-5

IETR/INSA of Rennes retains full right to modify and use the 
code for its own purpose, assign or donate the code to a third party and 
to inhibit third parties from using the code for products that do not 
conform to MPEG-related ITU Recommendations and/or ISO/IEC International 
Standards. 

This copyright notice must be included in all copies or derivative works. 
Copyright (c) ISO/IEC 2008.
 
FU realizing Syntax Parsing for AVC
*****************************************************************************/

// Author: Damien de Saint Jorre <damien.desaintjorre@epfl.ch>

// This FU has been modified by Gildas Cocherel (INSA of Rennes) Jan 2012

/******************************************************************************
 * Definition of CabacContextFunction
 *****************************************************************************/
package org.sc29.wg11.common;

import  std.util.Math.*;
import org.sc29.wg11.mpeg4.part10.MacroBlockInfo.*;

import  org.sc29.wg11.common.CabacContextConstantAVC.*;

unit CabacContextFunctionAVC :

	/*************************************************************************
	 * ContextInit
	 *************************************************************************/
	procedure contextInit(uint(size=8) sliceQPY, int(size=3) cabacInitIdc, uint(size=9) ctxTable[MAX_NUM_CTX_MOD])
	var
		uint(size= 3) cabacInitIdc_i = cabacInitIdc+1,
		 int(size=10) m,
		 int(size=10) n,
		uint(size= 8) valMps,
		uint(size= 8) preCtxState,
		uint(size= 8) pStateIdx
	begin
		foreach int i in 0 .. MAX_NUM_CTX_MOD-1 do
			m := Cabac_Context_Init[cabacInitIdc_i][i][0];
			n := Cabac_Context_Init[cabacInitIdc_i][i][1];
			preCtxState := clip_i32( ((m * clip_i32(sliceQPY, 0, 51)) >> 4 ) + n, 1, 126);
			if preCtxState <= 63  then
				pStateIdx	:= 63 - preCtxState;
				valMps		:= 0;
			else 
				pStateIdx	:= preCtxState - 64;
				valMps		:= 1;
			end
			ctxTable[i] := (pStateIdx << 1) + valMps;
		end	
	end
	/*************************************************************************
	 * getCtxIdxIncMbSkipFlag : @see 9.3.3.1.1.1 in AVC standard
	 *************************************************************************/
	function getCtxIdxIncMbSkipFlag(
		bool		  availableA,
		bool		  skipA,
		//
		bool		  availableB,
		bool		  skipB
	) --> uint(size=2)
	var
		uint(size=1) condTermA = if skipA = true or availableA = false then 0 else 1 end,
		uint(size=1) condTermB = if skipB = true or availableB = false then 0 else 1 end
	:
		condTermA + condTermB
	end
	/*************************************************************************
	 * getCtxIdxIncMbFieldDec : @see 9.3.3.1.1.2 in AVC standard
	 *************************************************************************/
/*	function getCtxIdxIncMbFieldDec(
		bool		  availableA,
		bool		  availableB
	) --> uint(size=2) :
		uint(size=1) condTermA = if availableA = false then 0 else 1 end;
		uint(size=1) condTermB = if availableB = false then 0 else 1 end;
		condTermA + condTermB
	end*/
	/*************************************************************************
	 * getCtxIdxIncMbType : @see 9.3.3.1.1.3 in AVC standard
	 *************************************************************************/
	function getCtxIdxIncMbType(
		uint(size= 9) ctxIdxOffset,
		//
		bool		  availableA,
		uint(size= 6) mbTypeA,
		//
		bool		  availableB,
		uint(size= 6) mbTypeB
	) --> uint(size=2)
	var
		uint(size=1) condTermA = getCondTermMbType(availableA, mbTypeA, ctxIdxOffset),
		uint(size=1) condTermB = getCondTermMbType(availableB, mbTypeB, ctxIdxOffset)
	:
		condTermA + condTermB
	end
	function getCondTermMbType(
		bool 		 neighbourAvail,
		uint(size=6) neighbourMbType,
		 int(size=9) ctxIdxOffset
	) --> uint(size=1) :
		if(not neighbourAvail) then
			0
//		elsif(ctxIdxOffset = 0 and ...)then /* We don't support the SI slice for the moment */
//			0
		elsif(ctxIdxOffset = OFFSET_MB_TYPE_I and Is_Intra_NxN(neighbourMbType)) then
			0
		elsif(ctxIdxOffset = OFFSET_MB_TYPE_B_PREFIX and
		        (neighbourMbType = BLOCK_TYPE_P_SKIP or 
			     neighbourMbType = BLOCK_TYPE_B_SKIP or 
			     neighbourMbType = BLOCK_TYPE_B_DIRECT_16x16)) then
			0
		else
			1
		end
	end
	/*************************************************************************
	 * getCtxIdxIncCodBlkPatternPrefix : @see 9.3.3.1.1.4 in AVC standard
	 *************************************************************************/	 
	function getCtxIdxIncCodBlkPatternPrefix(
		uint(size= 8) binIdx,
		uint(size= 2) binString,
		//
		bool		  availableA,
		uint(size= 6) mbTypeA,
		uint(size= 4) cbpLumaA,
		//
		bool		  availableB,
		uint(size= 6) mbTypeB,
		uint(size= 4) cbpLumaB
	) --> uint(size=2)
	var
		uint(size=1) condTermA = getCondTermCodBlkPatternPrefix( (binIdx&1)=1 , invNeighbour8x8A[binIdx], (binString&1) != 0, availableA, mbTypeA, cbpLumaA),
		uint(size=1) condTermB = getCondTermCodBlkPatternPrefix( (binIdx&2)=2 , invNeighbour8x8B[binIdx], (binString&2) != 0, availableB, mbTypeB, cbpLumaB)
	:
		condTermA + 2 * condTermB
	end

	function getCondTermCodBlkPatternPrefix (
		bool 		  isCurMb,
		uint(size= 8) luma8x8BlkIdxN,		
		bool		  binString,
		//
		bool		  available,
		uint(size= 6) mbType,
		uint(size= 4) cbpLuma
	) --> uint(size=1) :
		if available = false or mbType = BLOCK_TYPE_I_PCM then
			0
		elsif isCurMb = false and mbType != BLOCK_TYPE_P_SKIP and mbType != BLOCK_TYPE_B_SKIP and ((cbpLuma >> luma8x8BlkIdxN) & 1) != 0 then
			0
		elsif isCurMb = true and binString = true then
		   	0
		else
			1
		end
	end
	/*************************************************************************
	 * getCtxIdxIncCodBlkPatternSuffix : @see 9.3.3.1.1.4 in AVC standard
	 *************************************************************************/
	function getCtxIdxIncCodBlkPatternSuffix(
		uint(size= 8) binIdx,
		//
		bool		  availableA,
		uint(size= 6) mbTypeA,
		uint(size= 2) cbpChromaA,
		//
		bool		  availableB,
		uint(size= 6) mbTypeB,
		uint(size= 2) cbpChromaB
	) --> uint(size=3)
	var
		uint(size=1) condTermA = getCondTermCodBlkPatternSuffix(binIdx, availableA, mbTypeA, cbpChromaA),
		uint(size=1) condTermB = getCondTermCodBlkPatternSuffix(binIdx, availableB, mbTypeB, cbpChromaB)
	:
		condTermA + 2 * condTermB + if binIdx = 1 then 4 else 0 end
	end
	
	function getCondTermCodBlkPatternSuffix (
		uint(size= 8) binIdx,
		//
		bool		  available,
		uint(size= 6) mbType,
		uint(size= 2) cbpChroma
	) --> uint(size=1) :
		if available = true and mbType = BLOCK_TYPE_I_PCM then
		   	1
		elsif available = false or
			  mbType = BLOCK_TYPE_P_SKIP or mbType = BLOCK_TYPE_B_SKIP or 
			 (binIdx = 0 and cbpChroma = 0) or
			 (binIdx = 1 and cbpChroma != 2) then
		   	0
		else
			1
		end
	end	
	/*************************************************************************
	 * getCtxIdxIncMbQpDelta : @see 9.3.3.1.1.5 in AVC standard
	 *************************************************************************/
	function getCtxIdxIncMbQpDelta(
		bool 		 prevMbAvail,
		uint(size=6) prevMbType,
		uint(size=8) prevCbp,
		 int(size=8) prevMbQpDelta
	) --> uint(size=1) :
		if(not prevMbAvail or prevMbType = BLOCK_TYPE_P_SKIP or prevMbType = BLOCK_TYPE_B_SKIP)then
			0
		elsif(prevMbType = BLOCK_TYPE_I_PCM) then
			0
		elsif(not Is_Intra_16x16(prevMbType) and prevCbp = 0) then
			0
		elsif(prevMbQpDelta = 0) then
			0
		else
			1
		end
	end
	/*************************************************************************
	 * getCtxIdxIncRefIdxLX : @see 9.3.3.1.1.6 in AVC standard
	 *************************************************************************/
	function getCtxIdxIncRefIdxLX(
		bool		  availableA,
		uint(size= 6) mbTypeA,
		uint(size= 4) subMbTypeA,
		uint(size= 4) refIdxLXA,		
		uint(size= 4) mbPartIdxA,
		//
		bool		  availableB,
		uint(size= 6) mbTypeB,
		uint(size= 4) subMbTypeB,
		uint(size= 4) refIdxLXB,		
		uint(size= 4) mbPartIdxB,
		//
		bool 		 isL0
	) --> uint(size=2) 
	var
		uint(size=1) condTermA = getCondTermRefIdxLX(availableA, mbTypeA, subMbTypeA, refIdxLXA, mbPartIdxA, isL0),
		uint(size=1) condTermB = getCondTermRefIdxLX(availableB, mbTypeB, subMbTypeB, refIdxLXB, mbPartIdxB, isL0)
	:
		condTermA + 2 * condTermB
	end

	function getCondTermRefIdxLX(
		bool 		 neighbourAvail,
		uint(size=6) neighbourMbType,
		uint(size=4) neighbourSubMbType,
		uint(size=4) neighbourRefIdxLX,
		uint(size=1) neighbourMbPartIdx,
		bool		 isL0
	) --> uint(size=1)
	var
		bool 		 refIdxZeroFlagN 	= not (neighbourRefIdxLX > 0),
		uint(size=2) PRED_LX 			= if(isL0) then PRED_L0 else PRED_L1 end,
		bool 		 predModeEqualFlagN =
							if neighbourMbType = BLOCK_TYPE_P_8x8 or neighbourMbType = BLOCK_TYPE_B_8x8 then
								not ((subMbPredMode(neighbourMbType, neighbourSubMbType) & PRED_LX) = 0)
							else
								(Mb_Is_PredL0(neighbourMbType, neighbourMbPartIdx) or not isL0) and
								(Mb_Is_PredL1(neighbourMbType, neighbourMbPartIdx) or isL0)
							end
	:
		if(not neighbourAvail)then
			0
		elsif(neighbourMbType = BLOCK_TYPE_P_SKIP or neighbourMbType =
			BLOCK_TYPE_B_SKIP) then
			0
		elsif(Mb_IsIntra(neighbourMbType)) then
			0
		elsif(not predModeEqualFlagN) then
			0
		elsif(refIdxZeroFlagN) then
			0
		else
			1
		end
	end
	/*************************************************************************
	 * getCtxIdxIncMvdLX : @see 9.3.3.1.1.7 in AVC standard
	 *************************************************************************/
	function getCtxIdxIncMvdLX(
		bool		  availableA,
		uint(size= 6) mbTypeA,
		uint(size= 4) subMbTypeA,
		uint(size= 4) mbPartIdxA,
		 int(size=16) mvdLxA,
		//
		bool		  availableB,
		uint(size= 6) mbTypeB,
		uint(size= 4) subMbTypeB,
		uint(size= 4) mbPartIdxB,
		 int(size=16) mvdLxB,
		//
		bool 		  isL0
	) --> uint(size=2)
	var
		//Remove these variable when the bug #49 will be fixed
		uint(size=15) absMvdCompA = getAbsMvdCompN(availableA, mbTypeA, subMbTypeA, mbPartIdxA, mvdLxA, isL0),
		uint(size=15) absMvdCompB = getAbsMvdCompN(availableB, mbTypeB, subMbTypeB, mbPartIdxB, mvdLxB, isL0)
	:
		if((absMvdCompA + absMvdCompB) < 3) then
			0
		elsif((absMvdCompA + absMvdCompB) <= 32) then
			1
		else
			2
		end
	end

	function getAbsMvdCompN(
		bool          neighbourAvail,
		uint(size= 6) neighbourMbType,
		uint(size= 4) neighbourSubMbType,
		uint(size= 1) neighbourMbPartIdx,
		 int(size=16) mvdLX,
		bool 		  isL0
	) --> uint(size=15)
	var
		uint(size=2) PRED_LX = if isL0 then PRED_L0 else PRED_L1 end,
		bool predModeEqualFlagN =
					if neighbourMbType = BLOCK_TYPE_P_8x8 or neighbourMbType = BLOCK_TYPE_B_8x8 then
						not ((subMbPredMode(neighbourMbType, neighbourSubMbType) & PRED_LX) = 0)
					else
						(Mb_Is_PredL0(neighbourMbType, neighbourMbPartIdx) or not isL0) and
						(Mb_Is_PredL1(neighbourMbType, neighbourMbPartIdx) or isL0)
					end
	:
		if(not neighbourAvail)then
			0
		elsif(neighbourMbType = BLOCK_TYPE_P_SKIP or neighbourMbType =
			BLOCK_TYPE_B_SKIP) then
			0
		elsif(Mb_IsIntra(neighbourMbType)) then
			0
		elsif(not predModeEqualFlagN) then
			0
		else
			abs(mvdLX)
		end
	end
	/*************************************************************************
	 * getCtxIdxIncIntraChromPred : @see 9.3.3.1.1.8 in AVC standard
	 *************************************************************************/
	function getCtxIdxIncIntraChromPred(
		bool		  availableA,
		uint(size= 6) mbTypeA,
		uint(size= 4) intraPredCA,
		//
		bool		  availableB,
		uint(size= 6) mbTypeB,
		uint(size= 4) intraPredCB
	) --> uint(size=2)
	var
		uint(size=1) condTermA = getCondTermIntraChromPred(availableA, mbTypeA, intraPredCA),
		uint(size=1) condTermB = getCondTermIntraChromPred(availableB, mbTypeB, intraPredCB)
	:
		condTermA + condTermB
	end

	function getCondTermIntraChromPred(
		bool 		 neighbourAvail,
		uint(size=6) neighbourMbType,
		uint(size=4) neighbourIntraPredC
	) --> uint(size=1) :
		if(not neighbourAvail) then
			0
		elsif(neighbourMbType = BLOCK_TYPE_I_PCM) then
			0
		// if it's not an intra-prediction, intraChromaPredMode will be equal
		// to 0
		elsif(not Mb_IsIntra(neighbourMbType)) then
			0
		elsif(neighbourIntraPredC = 0)then
			0
		else
			1
		end
	end
	/*************************************************************************
	 * getCtxIdxIncCodedBlockFlag : @see 9.3.3.1.1.9 in AVC standard
	 *************************************************************************/
	function getCtxIdxIncCodedBlockFlag(
		uint(size=6) currMbType,
		//
		bool		  availableA,
		uint(size= 6) mbTypeA,
		uint(size= 1) cbfA,
		//
		bool		  availableB,
		uint(size= 6) mbTypeB,
		uint(size= 1) cbfB
	) --> uint(size=2)
	var
		uint(size=1) condTermA = getCondTermCodedBlockFlag(currMbType, availableA, mbTypeA, cbfA),
		uint(size=1) condTermB = getCondTermCodedBlockFlag(currMbType, availableB, mbTypeB, cbfB)
	:
		condTermA + 2 * condTermB
	end

	function getCondTermCodedBlockFlag(
		uint(size=6) currMbType,
		bool 		 neighbourAvail,
		uint(size=6) neighbourMbType,
		uint(size=1) neighbourCbf
	) --> uint(size=1) :
		if(not neighbourAvail) then
			if(Mb_IsIntra(currMbType)) then
				1
			else
				0
			end
		elsif(neighbourMbType = BLOCK_TYPE_I_PCM) then
			1
		elsif(neighbourMbType = BLOCK_TYPE_P_SKIP or neighbourMbType = BLOCK_TYPE_B_SKIP) then
			0
		else
			neighbourCbf
		end
	end
	/*************************************************************************
	 * getCtxIdxIncTrsfSz8x8 : @see 9.3.3.1.1.10 in AVC standard
	 *************************************************************************/
	function getCtxIdxIncTrsfSz8x8(
		bool		  availableA,
		bool		  trsfSz8x8A,
		//
		bool		  availableB,
		bool		  trsfSz8x8B
	) --> uint(size=2)
	var
		uint(size=1) condTermA = getCondTermTrsfSz8x8(availableA, trsfSz8x8A),
		uint(size=1) condTermB = getCondTermTrsfSz8x8(availableB, trsfSz8x8B)
	:
		condTermA + condTermB
	end

	function getCondTermTrsfSz8x8(
		bool neighbourAvail,
		bool neighbourTrsfSz8x8
	) --> uint(size=1) :
		if(not neighbourAvail) then
			0
		elsif(not neighbourTrsfSz8x8) then
			0
		else
			1
		end
	end
	/*************************************************************************
	 * getCtxIdxIncPriorDec : @see 9.3.3.1.2 in AVC standard
	 *************************************************************************/
	function getCtxIdxIncPriorDec(
		uint(size=11) ctxIdxOffset,
		 int(size= 6) binIdx,
		uint(size=32) binString
	) --> uint(size=3) :
		if ctxIdxOffset = OFFSET_MB_TYPE_I then
			if binIdx = 4 then
				5 + 1 - (binString & 1)
			elsif(binString & 2) != 0 then
				6
			else
				7
			end
		elsif ctxIdxOffset = OFFSET_MB_TYPE_P_PREFIX then
			2 + (binString & 1)
		elsif ctxIdxOffset = OFFSET_MB_TYPE_B_PREFIX then
			4 + 1 - (binString & 1)
		else
			2 + 1 - (binString & 1)
		end
	end
	/*************************************************************************
	 * getCtxIdxIncSignCoeff : @see 9.3.3.1.3 in AVC standard
	 *************************************************************************/
	function getCtxIdxIncSignCoeff(
		uint(size=4) ctxBlockCat,
		uint(size=4) levelListIdx
	) --> uint(size=4)
	var
		uint(size=2) numC8x8 = 1
	:
		if(ctxBlockCat != 3 and ctxBlockCat != 5 and ctxBlockCat != 9 and ctxBlockCat != 13) then
			levelListIdx
		elsif(ctxBlockCat = 3) then
			min(levelListIdx / numC8x8,2)
		else
			42
		end
	end

	function getCtxIdxIncCoeffAbsLvlMin1(
		uint(size=4) ctxBlockCat,
		uint(size=4) binIdx,
		uint(size=4) numDecodAbsLvlGt1,
		uint(size=4) numDecodAbsLvlEq1
	) --> uint(size=8) :
		if(binIdx = 0)then
			if(numDecodAbsLvlGt1 != 0) then
				0
			else
				min(4, 1 + numDecodAbsLvlEq1)
			end
		else
			if(ctxBlockCat = 3) then
				5 + min(4-1, numDecodAbsLvlGt1)
			else
				5 + min(4-0, numDecodAbsLvlGt1)
			end
		end
	end
end