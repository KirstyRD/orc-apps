package org.sc29.wg11.common;
import  std.video.Display.*;
import  std.util.Math.*;
import  std.stdio.Source.*;

unit DisplayYUVFunctions :

  @optimize_c(condition="defined(SSE_ENABLE)", name="displayYUV_crop_16_orcc")
  procedure displayYUV_crop_16_cal(
  	uint(size=16) Bytes[16 * 16],
  	uint(size=8) pictureBuffer[MAX_WIDTH * MAX_HEIGHT],
  	uint(size=14) xMin,
  	uint(size=14) xMax,
	uint(size=14) yMin,
	uint(size=14) yMax,
	uint(size=12) xIdx,
	uint(size=12) yIdx,
	uint(size=16) cropPicWth,
	uint(size=8) pxlShift)
  var
    uint(size=14) xIdxMin = max(xIdx, xMin),
    uint(size=14) xIdxMax = min(xIdx + 15, xMax),
    uint(size=14) yIdxMin = max(yIdx, yMin),
    uint(size=14) yIdxMax = min(yIdx + 15, yMax)
    begin
	    foreach int y in yIdxMin .. yIdxMax
		  do
			  foreach int x in xIdxMin .. xIdxMax
			  do
				  pictureBuffer[(y - yMin) * cropPicWth + x - xMin]
					:= Bytes[(y - yIdx) * 16 + x - xIdx] >> pxlShift;
			  end
		  end
    end
    
  @optimize_c(condition="defined(SSE_ENABLE)", name="displayYUV_crop_64_orcc")
  procedure displayYUV_crop_64_cal(
  	uint(size=16) Bytes[64 * 64],
  	uint(size=8) pictureBuffer[MAX_WIDTH * MAX_HEIGHT],
  	uint(size=14) xMin,
  	uint(size=14) xMax,
	uint(size=14) yMin,
	uint(size=14) yMax,
	uint(size=12) xIdx,
	uint(size=12) yIdx,
	uint(size=16) cropPicWth,
	uint(size=8) pxlShift)
  var
    uint(size=14) xIdxMin = max(xIdx, xMin),
    uint(size=14) xIdxMax = min(xIdx + 63, xMax),
    uint(size=14) yIdxMin = max(yIdx, yMin),
    uint(size=14) yIdxMax = min(yIdx + 63, yMax)
    begin
	    foreach int y in yIdxMin .. yIdxMax
		  do
			  foreach int x in xIdxMin .. xIdxMax
			  do
				  pictureBuffer[(y - yMin) * cropPicWth + x - xMin]
					:= Bytes[(y - yIdx) * 64 + x - xIdx] >> pxlShift;
			  end
		  end
    end

  @optimize_c(condition="defined(SSE_ENABLE)", name="displayYUV_crop_8_orcc")
  procedure displayYUV_crop_8_cal(
  	uint(size=16) Bytes[8 * 8],
  	uint(size=8) pictureBuffer[(MAX_WIDTH >> 1) * (MAX_HEIGHT >> 1)],
  	uint(size=14) xMin,
  	uint(size=14) xMax,
	uint(size=14) yMin,
	uint(size=14) yMax,
	uint(size=12) xIdx,
	uint(size=12) yIdx,
	uint(size=16) cropPicWth,
	uint(size=8) pxlShift)
  var
    uint(size=14) xIdxMin = max(xIdx, xMin),
	uint(size=14) xIdxMax = min(xIdx + 7, xMax),
	uint(size=14) yIdxMin = max(yIdx, yMin),
	uint(size=14) yIdxMax = min(yIdx + 7, yMax)
    begin
	    foreach int y in yIdxMin .. yIdxMax
		do
			foreach int x in xIdxMin .. xIdxMax
			do
			  pictureBuffer[(y-yMin)*cropPicWth + x-xMin] :=
				Bytes[(y-yIdx)*8 + x-xIdx] >> pxlShift;
			end
		end
    end
    
  @optimize_c(condition="defined(SSE_ENABLE)", name="displayYUV_crop_32_orcc")
  procedure displayYUV_crop_32_cal(
  	uint(size=16) Bytes[32 * 32],
  	uint(size=8) pictureBuffer[MAX_WIDTH * MAX_HEIGHT],
  	uint(size=14) xMin,
  	uint(size=14) xMax,
	uint(size=14) yMin,
	uint(size=14) yMax,
	uint(size=12) xIdx,
	uint(size=12) yIdx,
	uint(size=16) cropPicWth,
	uint(size=8) pxlShift)
  var
    uint(size=14) xIdxMin = max(xIdx, xMin),
	uint(size=14) xIdxMax = min(xIdx + 31, xMax),
	uint(size=14) yIdxMin = max(yIdx, yMin),
	uint(size=14) yIdxMax = min(yIdx + 31, yMax)
    begin
	    foreach int y in yIdxMin .. yIdxMax
		do
			foreach int x in xIdxMin .. xIdxMax
			do
			  pictureBuffer[(y-yMin)*cropPicWth + x-xMin] :=
				Bytes[(y-yIdx)*32 + x-xIdx] >> pxlShift;
			end
		end
    end
end