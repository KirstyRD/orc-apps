/********************************************************************************

This software module was originally developed by 
Junaid Jameel Ahmad (EPFL), 
in the course of development of the ISO/IEC 23002-5 (Video Tool Library) 
for reference purposes and its performance may not have been optimized. 
This software module is an implementation of one or more tools as 
specified by the ISO/IEC 23002-5.

ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright 
license to copy, distribute, and make derivative works of this software 
module or modifications thereof for use in implementations of the 
ISO/IEC 23002-5 in products that satisfy conformance criteria (if any). 

Those intending to use this software module in products are advised that 
its use may infringe existing patents. ISO/IEC have no liability for use 
of this software module or modifications thereof.

Copyright is not released for products that do not conform to audiovisual 
and image-coding related ITU Recommendations and/or ISO/IEC International 
Standards.

Assurance that the originally developed software module can be used 
(1) in the ISO/IEC 23002-5 once the ISO/IEC 23002-5 has been adopted; and 
(2) to develop the ISO/IEC 23002-5: 

EPFL grants ISO/IEC all rights necessary to 
include the originally developed software module or modifications thereof 
in the ISO/IEC 23002-5 and to permit ISO/IEC to offer You a royalty-free, 
worldwide, non-exclusive, copyright license to copy, distribute, and make 
derivative works for use in implementations of the ISO/IEC 23002-5 in 
products that satisfy conformance criteria (if any), and to the extent 
that such originally developed software module or portions of it are 
included in the ISO/IEC 23002-5.  To the extent that EPFL
owns patent rights that would be required to make, use, or 
sell the originally developed software module or portions thereof 
included in the ISO/IEC 23002-5 in a conforming product, EPFL
will assure the ISO/IEC that it is willing to 
negotiate licenses under reasonable and non-discriminatory terms and 
conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications 
thereof for the sole  purpose of developing theISO/IEC 23002-5

EPFL retains full right to modify and use the 
code for its own purpose, assign or donate the code to a third party and 
to inhibit third parties from using the code for products that do not 
conform to MPEG-related ITU Recommendations and/or ISO/IEC International 
Standards. 

This copyright notice must be included in all copies or derivative works. 
Copyright (c) ISO/IEC 2011-2014.
*****************************************************************************/

package org.sc29.wg11.mpegh.part2.common;  

actor ConvertToScuSize() 
				   uint(size=8) SZ,                                   
                   uint(size= 8)  Block_in
                   ==>
                   uint(size= 8)  Block_out  
                   :
	 uint(size=8) blockY[1024];
	 uint(size=8) blockU[256];
	 uint(size=8) blockV[256];
	uint(size= 8) block4x4Idx := 0;
	uint(size= 8) nbBlock4x4;
	uint(size= 16) scan16x16_UV_offset[4] = [0,  8, 16 * 8, (16 * 8) +  8]; 
	uint(size= 16) scan8x8_UV_offset[4]   = [0,  4, 16 * 4, (16 * 4) +  4]; 
	uint(size= 16) scan4x4_UV_offset[4]   = [0,  2, 16 * 2, (16 * 2) +  2]; 
	uint(size= 16) scan16x16_Y_offset[4]  = [0, 16, 32 * 16, (32 * 16) + 16]; 
	uint(size= 16) scan8x8_Y_offset[4]    = [0,  8, 32 * 8, (32 * 8) +  8]; 
	uint(size= 16) scan4x4_Y_offset[4]    = [0,  4, 32 * 4, (32 * 4) +  4]; 

/*	
 	procedure print_block(int(size=8) blkSZ, uint(size=4) eText)
	begin
		println("Merger ACTION: merge_"+blkSZ+"x"+blkSZ+" : "+if eText = 0 then "Y" elsif eText = 1 then "U" else "V" end);
    	println("------------------------");
    	println("blkSZ = "+blkSZ);
	end
	
	procedure print_block4x4(int(size=8) blkSZ, uint(size=8) block[16], uint(size=4) eText)
	begin
 		//if eText = 0 then
		print_block(blkSZ, eText);
    	foreach int i in 0 .. blkSZ*blkSZ - 1 do
      		print(" ["+i+"] "+block[i]);
    	end
    	println("\n------------------------");
		//end
	end	
	procedure print_block8x8(int(size=8) blkSZ, uint(size=8) block[64], uint(size=4) eText)
	begin
 		//if eText = 0 then
		print_block(blkSZ, eText);
    	foreach int i in 0 .. blkSZ*blkSZ - 1 do
      		print(" ["+i+"] "+block[i]);
    	end
    	println("\n------------------------");
    	//end
	end	
	procedure print_block16x16(int(size=8) blkSZ, uint(size=8) block[256], uint(size=4) eText)
	begin
 		//if eText = 0 then
		print_block(blkSZ, eText);
    	foreach int i in 0 .. blkSZ*blkSZ - 1 do
      		print(" ["+i+"] "+block[i]);
    	end
    	println("\n------------------------");
    	//end
	end	
	procedure print_block32x32(int(size=8) blkSZ, uint(size=8) block[1024], uint(size=4) eText)
	begin
 		//if eText = 0 then
		print_block(blkSZ, eText);
    	foreach int i in 0 .. blkSZ*blkSZ - 1 do
      		print(" ["+i+"] "+block[i]);
    	end
    	println("\n------------------------");
    	//end
	end	
	procedure print_block64x64(int(size=8) blkSZ, uint(size=8) block[4096], uint(size=4) eText)
	begin
 		//if eText = 0 then
		print_block(blkSZ, eText);
    	foreach int i in 0 .. blkSZ*blkSZ - 1do
      		print(" ["+i+"] "+block[i]);
    	end
    	println("\n------------------------");
    	//end
	end
*/
	/*************************************************************************
	 * Y block 4x4
	 ************************************************************************/
	merge_Y_loop.block4x4: action 	SZ:[blkSZ], 
	         			 			Block_in:[block] repeat 4*4
	                 	 			==>
	guard
 		blkSZ = 4 and block4x4Idx != 3
 	var
 		int(size= 16) offset := 0
	do
		offset := scan4x4_Y_offset[block4x4Idx];			
		foreach int i in 0 .. blkSZ-1 do
			foreach int j in 0 .. blkSZ-1 do
				blockY[offset + j] := block[i*blkSZ + j];
			end
			offset := 32 + offset;
		end
		block4x4Idx := block4x4Idx + 1;
		//print_block4x4(blkSZ, block, 0);
	end
	merge_Y.block4x4: action 	SZ:[blkSZ], 
	         			 		Block_in:[block] repeat 4*4
	                 	 		==>
	guard
		blkSZ = 4 and block4x4Idx = 3
 	var
 		int(size= 16) offset := 0
	do
		offset := scan4x4_Y_offset[block4x4Idx];			
		foreach int i in 0 .. blkSZ-1 do
			foreach int j in 0 .. blkSZ-1 do
				blockY[offset + j] := block[i*blkSZ + j];
			end
			offset := 32 + offset;
		end
		block4x4Idx := 0;
		nbBlock4x4  := 4;	
		//print_block4x4(blkSZ, block, 0);		
	end
	/*************************************************************************
	 * Y block 8x8
	 ************************************************************************/
	merge_Y.block8x8: action 	SZ:[blkSZ], 
	                   			Block_in:[block] repeat 8*8 
	                  			==>
	guard
		blkSZ = 8
	var
		int(size= 16) offset := 0
	do
		foreach int i in 0 .. blkSZ-1 do
			foreach int j in 0 .. blkSZ-1 do
				blockY[offset + j] := block[i*blkSZ + j];
			end
			offset := 32 + offset;
		end
		nbBlock4x4 := 4;
		//print_block8x8(blkSZ, block, 0);
	end
	/*************************************************************************
	 * Y block 16x16
	 ************************************************************************/
	merge_Y.block16x16: action	SZ:[blkSZ], 
	                    		Block_in:[block] repeat 16*16 
	                    		==>
	guard
		blkSZ = 16 
	var
		int(size= 16) offset := 0
	do
		foreach int i in 0 .. blkSZ-1 do
			foreach int j in 0 .. blkSZ-1 do
				blockY[offset + j] := block[i*blkSZ + j];
			end
			offset := 32 + offset;
		end
		nbBlock4x4 := 16;
		//print_block16x16(blkSZ, block, 0);
	end	
	/*************************************************************************
	 * Y block 32x32
	 ************************************************************************/	
	merge_Y.block32x32: action 	SZ:[blkSZ], 
	                    		Block_in:[block] repeat 32*32 
	                    		==>
	guard
		blkSZ = 32 
	do
		foreach int i in 0 .. 1023 do
			blockY[i] := block[i];
		end
		nbBlock4x4 := 64;
		//print_block32x32(blkSZ, block, 0);
	end	
	/*************************************************************************
	 * Y block 64x64
	 ************************************************************************/	
	merge_Y_64x64: action 	SZ:[blkSZ], 
	                    		Block_in:[block] repeat 64*64 
	                    		==>
	                    		Block_out:[block] repeat 64*64
	guard
		blkSZ = 64 
	do
		//print_block64x64(blkSZ, block, 0);	
	end	

	merge_UV_64x64: action 	SZ:	  [ tmp ] repeat 14, // U & V
	                    		Block_in:[block] repeat 32*32*2 
	                    		==>
	                    		Block_out:[block] repeat 32*32*2
	do
//		print_block64x64(tmp[0], block, tmp[1], 1);	
	end	

	/*************************************************************************
	 * U block 4x4
	 ************************************************************************/
	merge_U.block4x4: action 	SZ:[blkSZ], 
	                 	 		Block_in:[block] repeat 4*4
	                 	 		==>
	guard
		blkSZ = 4 
	var
		int(size= 16) offset := 0
	do
		foreach int i in 0 .. blkSZ-1 do
			foreach int j in 0 .. blkSZ-1 do
				blockU[offset + j] := block[i*blkSZ + j];
			end
			offset := 16 + offset;
		end		
	end
	/*************************************************************************
	 * V block 4x4
	 ************************************************************************/	
	merge_V.block4x4: action 	SZ:[blkSZ], 
	                 	 		Block_in:[block] repeat 4*4
	                 	 		==>
	guard
		blkSZ = 4 
	var
		int(size= 16) offset := 0
	do
		foreach int i in 0 .. blkSZ-1 do
			foreach int j in 0 .. blkSZ-1 do
				blockV[offset + j] := block[i*blkSZ + j];
			end
			offset := 16 + offset;
		end				
	end
	/*************************************************************************
	 * U block 8x8
	 ************************************************************************/
	merge_U.block8x8: action 	SZ:[blkSZ], 
	                 	 		Block_in:[block] repeat 8*8
	                 	 		==>
	guard
		blkSZ = 8 
	var
		int(size= 16) offset := 0
	do
		foreach int i in 0 .. blkSZ-1 do
			foreach int j in 0 .. blkSZ-1 do
				blockU[offset + j] := block[i*blkSZ + j];
			end
			offset := 16 + offset;
		end
	end
	/*************************************************************************
	 * V block 8x8
	 ************************************************************************/	
	merge_V.block8x8: action 	SZ:[blkSZ], 
	                 	 		Block_in:[block] repeat 8*8
	                 	 		==>
	guard
		blkSZ = 8
	var
		int(size= 16) offset := 0
	do
		foreach int i in 0 .. blkSZ-1 do
			foreach int j in 0 .. blkSZ-1 do
				blockV[offset + j] := block[i*blkSZ + j];
			end
			offset := 16 + offset;
		end
	end	
	/*************************************************************************
	 * U block 16x16
	 ************************************************************************/
	merge_U.block16x16: action 	SZ:[blkSZ], 
	                 	 		Block_in:[block] repeat 16*16
	                 	 		==>
	guard
		blkSZ = 16 
	do
		foreach int i in 0 .. 255 do
			blockU[i] := block[i];
		end
	end
	/*************************************************************************
	 * V block 16x16
	 ************************************************************************/	
	merge_V.block16x16: action 	SZ:[blkSZ], 
	                 	 		Block_in:[block] repeat 16*16
	                 	 		==>
	guard
		blkSZ = 16
	do
		foreach int i in 0 .. 255 do
			blockV[i] := block[i];
		end
	end	
	/*************************************************************************
	 * output_Y
	 ************************************************************************/	
	output_Y : action ==> Block_out:[block] repeat 16
	guard
		block4x4Idx != nbBlock4x4
    var
    	 uint(size=8) block[16],
		 int(size=16) offset := 0
	do
		offset:= scan4x4_Y_offset[block4x4Idx & 3] + scan8x8_Y_offset[(block4x4Idx>>2) & 3] + scan16x16_Y_offset[(block4x4Idx>>4) & 3];
		foreach int i in 0 .. 3 do
			foreach int j in 0 .. 3 do
				block[(i<<2) + j] := blockY[offset + j];			
			end
			offset := 32 + offset;			
		end
	end	
	/*************************************************************************
	 * output_done
	 ************************************************************************/	
	output_done : action ==>
	guard
		block4x4Idx = nbBlock4x4 
	do
		block4x4Idx := 0;
	end
	/*************************************************************************
	 * output_U
	 ************************************************************************/	
	output_U : action ==> Block_out:[block] repeat 4
    var
    	 uint(size=8) block[4],
		 int(size=16) offset := 0
	do
		offset := scan4x4_UV_offset[block4x4Idx & 3] + scan8x8_UV_offset[(block4x4Idx>>2) & 3] + scan16x16_UV_offset[(block4x4Idx>>4) & 3];
		foreach int i in 0 .. 1 do
			foreach int j in 0 .. 1 do
				block[(i<<1) + j] := blockU[offset + j];
			end
			offset := 16 + offset;		
		end
	end	
	/*************************************************************************
	 * output_V
	 ************************************************************************/	
	output_V : action ==> Block_out:[block] repeat 4
    var
    	 uint(size=8) block[4],
		 int(size=16) offset := 0
	do
		offset := scan4x4_UV_offset[block4x4Idx & 3] + scan8x8_UV_offset[(block4x4Idx>>2) & 3] + scan16x16_UV_offset[(block4x4Idx>>4) & 3];
		foreach int i in 0 .. 1 do
			foreach int j in 0 .. 1 do
				block[(i<<1) + j] := blockV[offset + j];
			end
			offset := 16 + offset;			
		end
		block4x4Idx := block4x4Idx + 1;
	end		
	/*************************************************************************
	 * schedule
	 ************************************************************************/	
	schedule fsm merge_Y:
		merge_Y   ( merge_Y_loop  )--> merge_Y;
		merge_Y   ( merge_Y       )--> merge_U;
		merge_Y   ( merge_Y_64x64 )--> zero_UV;
		zero_UV   ( merge_UV_64x64)--> merge_Y;
		merge_U   ( merge_U       )--> merge_V;
		merge_V   ( merge_V       )--> output_Y;
		output_Y  ( output_Y      )--> output_U;
		output_U  ( output_U      )--> output_V;
		output_V  ( output_V      )--> output_Y;
		output_Y  ( output_done   )--> merge_Y;
	end	
end
