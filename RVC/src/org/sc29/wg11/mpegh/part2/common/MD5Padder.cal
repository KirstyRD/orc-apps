/********************************************************************************

This software module was originally developed by 
khaled JERBI (IETR/INSA of Rennes), 
in the course of development of the ISO/IEC 23002-5 (Video Tool Library) 
for reference purposes and its performance may not have been optimized. 
This software module is an implementation of one or more tools as 
specified by the ISO/IEC 23002-5.

ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright 
license to copy, distribute, and make derivative works of this software 
module or modifications thereof for use in implementations of the 
ISO/IEC 23002-5 in products that satisfy conformance criteria (if any). 

Those intending to use this software module in products are advised that 
its use may infringe existing patents. ISO/IEC have no liability for use 
of this software module or modifications thereof.

Copyright is not released for products that do not conform to audiovisual 
and image-coding related ITU Recommendations and/or ISO/IEC International 
Standards. 

Assurance that the originally developed software module can be used 
(1) in the ISO/IEC 23002-5 once the ISO/IEC 23002-5 has been adopted; and 
(2) to develop the ISO/IEC 23002-5: 

IETR/INSA of Rennes grants ISO/IEC all rights necessary to 
include the originally developed software module or modifications thereof 
in the ISO/IEC 23002-5 and to permit ISO/IEC to offer You a royalty-free, 
worldwide, non-exclusive, copyright license to copy, distribute, and make 
derivative works for use in implementations of the ISO/IEC 23002-5 in 
products that satisfy conformance criteria (if any), and to the extent 
that such originally developed software module or portions of it are 
included in the ISO/IEC 23002-5.  To the extent that IETR/INSA of Rennes
owns patent rights that would be required to make, use, or 
sell the originally developed software module or portions thereof 
included in the ISO/IEC 23002-5 in a conforming product, IETR/INSA of
Rennes will assure the ISO/IEC that it is willing to 
negotiate licenses under reasonable and non-discriminatory terms and 
conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications 
thereof for the sole  purpose of developing theISO/IEC 23002-5

IETR/INSA of Rennes retains full right to modify and use the 
code for its own purpose, assign or donate the code to a third party and 
to inhibit third parties from using the code for products that do not 
conform to MPEG-related ITU Recommendations and/or ISO/IEC International 
Standards. 

This copyright notice must be included in all copies or derivative works. 
Copyright (c) ISO/IEC 2011-2014.
 

*****************************************************************************/

// Author: khaled JERBI

/******************************************************************************
 * Definition of CommonPackage
 *****************************************************************************/
package org.sc29.wg11.mpegh.part2.common;

actor MD5Padder () uint(size=64) LENGTH, uint(size=16) DATA ==> uint (size=16) OUT, uint(size=64) NEWLENGTH:

	uint(size= 8) BIT_DEPTH_SHIFT = 3;
	uint(size=16) padStart = 128;

	uint(size=64) length;
	uint(size=64) newLength;
	uint(size=64) counter:=0;

	uint(size= 1) isLengthOdd;
	uint(size= 8) numZeroBytes;

	computeNewLength: action LENGTH:[len] ==> NEWLENGTH:[newLength]
	do
	    length  := len * if BIT_DEPTH_SHIFT > 3 then 2 else 1 end;
	    isLengthOdd := length & 1;

		newLength := (length << 3) + 1;
		while ((newLength & 511)!=448) do
			newLength := newLength + 1;
		end
		newLength := newLength >> 3;

		// new + 8 bytes to get in bits a multiple of 512 // length + 1 (128) + 8 (64 bits for the length)
		numZeroBytes := (newLength + 8) - (length + 9); 
		
//println("length "+length + " newLength "+newLength+" "+(newLength << 3));
//println("isLengthOdd "+isLengthOdd + " numZeroBytes "+numZeroBytes+" ");
		// directSend: nb of bytes to send before the appearance of padding bits
		// remainSend: nb of bytes to send with padding bits
		// directSend:= length >> 6; // >>6 equivalent to div 64 when 64 = 512 / 8
		// remainSend:= length & 63;
		// zeroSend  : nb of O bytes to send after the 128 (10000000) byte
		// zeroSend  := newLength - (length + 1)
	end

	copyData.BitDepth8_case1: action DATA:[i] repeat 2 ==> OUT:[(((i[1]<<8)&0xFF00) + ((i[0]&0xFF))&0xFFFF)]
	guard
		BIT_DEPTH_SHIFT = 3,
		counter < (length - isLengthOdd)
	do
        counter := counter + 2;
	end

	copyData.BitDepth8_case2: action DATA:[i] ==> OUT:[(padStart << 8) + (i&0xFF)]
	guard
		BIT_DEPTH_SHIFT = 3,
		isLengthOdd = 1,
		counter = (length - isLengthOdd)
	do
        counter := counter + 2;
	end

	copyData.BitDepth16: action DATA:[i] ==> OUT:[i]
	guard
		BIT_DEPTH_SHIFT = 4,
		counter < length
	do
        counter := counter + 2;
	end

	endCopy.case1: action ==> OUT:[padStart] // padding "10000000"
	guard
		counter = length
	do
		counter := 1;		// First zero pad Byte is being sent here.
	end

	endCopy.case2: action ==> 
	guard
		counter > length
	do
		counter := 0;
	end

	zeroPadding: action ==> OUT:[0]
	guard
		(counter+1) < numZeroBytes
	do
//println(" zeroPadding "+counter);
		counter := counter + 2;	
	end
	
	endZeroPadding: action ==> OUT:[chunkedLength] repeat 4
	guard
		counter = numZeroBytes
	var
		uint(size=16) chunkedLength[4],
		uint(size=64) length_tmp = length << 3
	do
//println(" zeroPaddingEnd "+counter);
		 counter := 0; // reset counter
        //send length of 64 bits in a set of 4 words(16-bit)
         chunkedLength[3] := (length_tmp >> 48) & 0xFFFF;
         chunkedLength[2] := (length_tmp >> 32) & 0xFFFF;
         chunkedLength[1] := (length_tmp >> 16) & 0xFFFF;
         chunkedLength[0] := (length_tmp >>  0) & 0xFFFF;
/*foreach int i in 0 .. 7 do
	print(chunkedLength[i]+" ");
end        println(""); 
*/
	end

	procedure hexDigitPrint(uint(size=8) digit)
	begin
		if    digit =  0 then print("0");
		elsif digit =  1 then print("1");
		elsif digit =  2 then print("2");
		elsif digit =  3 then print("3");
		elsif digit =  4 then print("4");
		elsif digit =  5 then print("5");
		elsif digit =  6 then print("6");
		elsif digit =  7 then print("7");
		elsif digit =  8 then print("8");
		elsif digit =  9 then print("9");
		elsif digit = 10 then print("a");
		elsif digit = 11 then print("b");
		elsif digit = 12 then print("c");
		elsif digit = 13 then print("d");
		elsif digit = 14 then print("e");
		elsif digit = 15 then print("f");
		end
	end

	procedure hexPrint16(uint(size=16) val)
	begin
	   foreach int(size=8) i in 0 .. 1 do
           hexDigitPrint((val >> (12 - (( (1-i) * 2)     << 2))) & 0xf);
           hexDigitPrint((val >> (12 - (( (1-i) * 2 + 1) << 2))) & 0xf);
	   end
	end
	
	schedule fsm initLength:
		initLength ( computeNewLength ) --> copy;
		copy       ( copyData         ) --> copy;
		copy       ( endCopy          ) --> padding;
		padding    ( zeroPadding      ) --> padding;
		padding    ( endZeroPadding   ) --> initLength;
	end
	
	priority
		endCopy>copyData;
		endZeroPadding>zeroPadding;
	end
end