/********************************************************************************

This software module was originally developed by 
Junaid Jameel Ahmad (EPFL), 
in the course of development of the ISO/IEC 23002-5 (Video Tool Library) 
for reference purposes and its performance may not have been optimized. 
This software module is an implementation of one or more tools as 
specified by the ISO/IEC 23002-5.

ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright 
license to copy, distribute, and make derivative works of this software 
module or modifications thereof for use in implementations of the 
ISO/IEC 23002-5 in products that satisfy conformance criteria (if any). 

Those intending to use this software module in products are advised that 
its use may infringe existing patents. ISO/IEC have no liability for use 
of this software module or modifications thereof.

Copyright is not released for products that do not conform to audiovisual 
and image-coding related ITU Recommendations and/or ISO/IEC International 
Standards.

Assurance that the originally developed software module can be used 
(1) in the ISO/IEC 23002-5 once the ISO/IEC 23002-5 has been adopted; and 
(2) to develop the ISO/IEC 23002-5: 

EPFL grants ISO/IEC all rights necessary to 
include the originally developed software module or modifications thereof 
in the ISO/IEC 23002-5 and to permit ISO/IEC to offer You a royalty-free, 
worldwide, non-exclusive, copyright license to copy, distribute, and make 
derivative works for use in implementations of the ISO/IEC 23002-5 in 
products that satisfy conformance criteria (if any), and to the extent 
that such originally developed software module or portions of it are 
included in the ISO/IEC 23002-5.  To the extent that EPFL
owns patent rights that would be required to make, use, or 
sell the originally developed software module or portions thereof 
included in the ISO/IEC 23002-5 in a conforming product, EPFL
will assure the ISO/IEC that it is willing to 
negotiate licenses under reasonable and non-discriminatory terms and 
conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications 
thereof for the sole  purpose of developing theISO/IEC 23002-5

EPFL retains full right to modify and use the 
code for its own purpose, assign or donate the code to a third party and 
to inhibit third parties from using the code for products that do not 
conform to MPEG-related ITU Recommendations and/or ISO/IEC International 
Standards. 

This copyright notice must be included in all copies or derivative works. 
Copyright (c) ISO/IEC 2011-2014.
*****************************************************************************/

package org.sc29.wg11.mpegh.part2.main.synParser;

actor Two_Parsers_Merger ()
                                uint(size=16) in1CUInfo, // Data port
                                uint(size= 6) in1IntraPredMode, // Data port
                                uint(size=16) in1SliceAddr, // Header port
                                uint(size=16) in1TilesCoord, // Header port
                                uint(size=16) in1RealTilesCoord, // Header port
                                uint(size= 8) in1LcuSizeMax, // Header port
                                uint(size= 4) in1PartMode, // Data port
                                uint(size= 4) in1PartModeSH, // Header port
               					uint(size= 2) in1IsPicSlcLcu, // Data port
               					uint(size= 2) in1IsPicSlcLcuSH, // Header port               					
               					uint(size= 2) in1IsPicSlc, // Header port
                				uint(size= 2) in1LFAcrossSlcTile, // Header port
                                uint(size=16) in1PictSize, // Header port
                                 int(size=16) in1Poc, // Header port
                                 int(size= 9) in1SaoSe, // Data port
                                 int(size= 9) in1SaoSeSH, // Header port
                                uint(size= 8) in1SEI_MD5, // Header port
                                uint(size= 2) in1SliceType, // Header port
                                bool          in1SplitTransform, // Data port
                                 int(size= 8) in1TUSize, // Data port
                                 int(size=16) in1Coeff, // Data port
                                bool          in1StrongIntraSmoothing, // Header port
                                uint(size=14) in1DispCoord, // Data port
                                uint(size= 9) in1PicSizeInMb, // Header port
                                uint(size= 5) in1NumRefIdxLxActive, // Header port
                                uint(size= 4) in1RefPicListModif, // Header port
                                 int(size=16) in1RefPoc, // Header port
                                 int(size=16) in1MvPredSyntaxElem, // Data port
                                 int(size=16) in1MvPredSyntaxElemSH, // Header port                                 
                                bool 		  in1Cbf, // Data port
                                bool		  in1DBFDisable, // Header port
                                 int(size= 8) in1DbfSe, // Header port
                                uint(size= 8) in1ReorderPics, // Header port
                                 int(size=16) in1WeightedPred, // Header port
                                uint(size=16) in1TileSize, // Header port
                                uint(size=16) in1TileCUInfo, // Data port
                                 int(size= 8) in1Qp, // Data port
                                 bool		  in1UnitFinished // Data port                                
                                 
                                ==>
                                
                                uint(size=16) opCUInfo,
                                uint(size= 6) opIntraPredMode,
                                uint(size=16) opSliceAddr,
                                uint(size=16) opTilesCoord,
                                uint(size=16) opRealTilesCoord,
                                uint(size= 8) opLcuSizeMax,
                                uint(size= 4) opPartMode,
               					uint(size= 2) opIsPicSlcLcu,
               					uint(size= 2) opIsPicSlc,
                				uint(size= 2) opLFAcrossSlcTile,
                                uint(size=16) opPictSize,
                                 int(size=16) opPoc,
                                 int(size= 9) opSaoSe,
                                uint(size= 8) opSEI_MD5,
                                uint(size= 2) opSliceType,
                                bool          opSplitTransform,
                                 int(size= 8) opTUSize,
                                 int(size=16) opCoeff,
                                bool          opStrongIntraSmoothing,
                                uint(size=14) opDispCoord,
                                uint(size= 9)  opPicSizeInMb,
                                uint(size= 5) opNumRefIdxLxActive,
                                uint(size= 4) opRefPicListModif,
                                 int(size=16) opRefPoc,
                                 int(size=16) opMvPredSyntaxElem,
                                bool		  opCbf,
                                bool		  opDBFDisable,
                                 int(size= 8) opDbfSe,
                                uint(size= 8) opReorderPics,
                                 int(size=16) opWeightedPred,
                                uint(size=16) opTileSize,
                                uint(size=16) opTileCUInfo,
                                 int(size= 8) opQp
:

/*--------------------- p1.Header ---------------------*/
	p1.Header_Done_SliceAdd:
	action in1SliceAddr:[x] repeat 2 ==> opSliceAddr:[x] repeat 2 end
	
	p1.Header.TilesCoord:
	action in1TilesCoord:[x] ==> opTilesCoord:[x] end
	
	p1.Header.RealTilesCoord:
	action in1RealTilesCoord:[x] ==> opRealTilesCoord:[x] end	
	
	p1.Header.LcuSizeMax:
	action in1LcuSizeMax:[x] ==> opLcuSizeMax:[x] end

	p1.Header.PartModeSH:
	action in1PartModeSH:[x] ==> opPartMode:[x] end

	p1.Header.IsPicSlcLcuSH:
	action in1IsPicSlcLcuSH:[x] ==> opIsPicSlcLcu:[x] end
	
	p1.Header.IsPicSlc:
	action in1IsPicSlc:[x] ==> opIsPicSlc:[x] end
	
	p1.Header.LFAcrossSlcTile:
	action in1LFAcrossSlcTile:[x] ==> opLFAcrossSlcTile:[x] end	
	
	p1.Header.PictSize:
	action in1PictSize:[x] repeat 2 ==> opPictSize:[x] repeat 2 end

	p1.Header.Poc:
	action in1Poc:[x] ==> opPoc:[x] end
	
	p1.Header.SaoSeSH:
	action in1SaoSeSH:[x] ==> opSaoSe:[x] end
	
	p1.Header.SEI_MD5:
	action in1SEI_MD5:[x] ==> opSEI_MD5:[x] end

	p1.Header.SliceType:
	action in1SliceType:[x] ==> opSliceType:[x] end
	
	p1.Header.StrongIntraSmoothing:
	action in1StrongIntraSmoothing:[x] repeat 2 ==> opStrongIntraSmoothing:[x] repeat 2 end
	
	p1.Header.PicSizeInMb:
	action in1PicSizeInMb:[x] repeat 2 ==> opPicSizeInMb:[x] repeat 2 end	
	
	p1.Header.NumRefIdxLxActive:
	action in1NumRefIdxLxActive:[x] repeat 2 ==> opNumRefIdxLxActive:[x] repeat 2 end

	p1.Header.RefPicListModif:
	action in1RefPicListModif:[x] ==> opRefPicListModif:[x] end
	
	p1.Header.RefPoc:
	action in1RefPoc:[x] ==> opRefPoc:[x] end

	p1.Header.MvPredSyntaxElemSH:
	action in1MvPredSyntaxElemSH:[x] repeat 2 ==> opMvPredSyntaxElem:[x] repeat 2 end
	
	p1.Header.DBFDisable:
	action in1DBFDisable:[x] ==> opDBFDisable:[x] end

	p1.Header.DbfSe:
	action in1DbfSe:[x] repeat 4 ==> opDbfSe:[x] repeat 4 end
	
	p1.Header.ReorderPics:
	action in1ReorderPics:[x] repeat 7 ==> opReorderPics:[x] repeat 7 end
	
	p1.Header.WeightedPred:
	action in1WeightedPred:[x] ==> opWeightedPred:[x] end
	
	p1.Header.TileSize:
	action in1TileSize:[x] repeat 2 ==> opTileSize:[x] repeat 2 end		

/*--------------------- p1.Data ---------------------*/	
	p1.Data.CUInfo:
	action in1CUInfo:[x] repeat 5 ==> opCUInfo:[x] repeat 5 end

	p1.Data.IntraPredMode:
	action in1IntraPredMode:[x] repeat 2 ==> opIntraPredMode:[x] repeat 2 end
	
	p1.Data.PartMode:
	action in1PartMode:[x] ==> opPartMode:[x] end
	
	p1.Data.IsPicSlcLcu:
	action in1IsPicSlcLcu:[x] ==> opIsPicSlcLcu:[x] end

	p1.Data.SaoSe:
	action in1SaoSe:[x] ==> opSaoSe:[x] end

	p1.Data.SplitTransform:
	action in1SplitTransform:[x] ==> opSplitTransform:[x] end	
	
	p1.Data.TUSize:
	action in1TUSize:[x] repeat 7 ==> opTUSize:[x] repeat 7 end

	p1.Data.Coeff:
	action in1Coeff:[x] repeat 16 ==> opCoeff:[x] repeat 16 end		
	
	p1.Data.DispCoord:
	action in1DispCoord:[x] repeat 4 ==> opDispCoord:[x] repeat 4 end
	
	p1.Data.MvPredSyntaxElem:
	action in1MvPredSyntaxElem:[x] ==> opMvPredSyntaxElem:[x] end
	
	p1.Data.Cbf:
	action in1Cbf:[x] ==> opCbf:[x] end	
	
	p1.Data.TileCUInfo:
	action in1TileCUInfo:[x] repeat 5 ==> opTileCUInfo:[x] repeat 5 end	
	
	p1.Data.Qp:
	action in1Qp:[x] repeat 2 ==> opQp:[x] repeat 2 end	
	
	p1.Data_UnitFinished:
	action in1UnitFinished:[x] ==> end	
	
	schedule fsm p1_Header:
		p1_Header (p1.Header) 				--> p1_Header;
		p1_Header (p1.Header_Done_SliceAdd)	--> p1_Data;
		p1_Data   (p1.Data)   				--> p1_Data;
		p1_Data   (p1.Data_UnitFinished)	--> p1_Header;
/*
		p2_Header (p2.Header) 				--> p2_Header;
		p2_Header (p2.Header_Done_SliceAdd)	--> p2_Data;
		p2_Data   (p2.Data)   				--> p2_Data;
		p2_Data   (p2.Data_UnitFinished)	--> p1_Header;*/
	end
	
	priority
		p1.Header > p1.Header_Done_SliceAdd;
		p1.Data   > p1.Data_UnitFinished;
/*
		p2.Header > p2.Header_Done_SliceAdd;
		p2.Data   > p2.Data_UnitFinished;
*/
	/*
		p1.Header.PartModeSH > p1.Data.PartMode;
		p1.Header.IsPicSlcLcuSH > p1.Data.IsPicSlcLcu;
		p1.Header.SaoSeSH > p1.Data.SaoSe;
		p1.Header.MvPredSyntaxElemSH > p1.Data.MvPredSyntaxElem;*/
	end

end
