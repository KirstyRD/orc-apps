/********************************************************************************

This software module was originally developed by 
Junaid Jameel Ahmad (EPFL), 
in the course of development of the ISO/IEC 23002-5 (Video Tool Library) 
for reference purposes and its performance may not have been optimized. 
This software module is an implementation of one or more tools as 
specified by the ISO/IEC 23002-5.

ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright 
license to copy, distribute, and make derivative works of this software 
module or modifications thereof for use in implementations of the 
ISO/IEC 23002-5 in products that satisfy conformance criteria (if any). 

Those intending to use this software module in products are advised that 
its use may infringe existing patents. ISO/IEC have no liability for use 
of this software module or modifications thereof.

Copyright is not released for products that do not conform to audiovisual 
and image-coding related ITU Recommendations and/or ISO/IEC International 
Standards.

Assurance that the originally developed software module can be used 
(1) in the ISO/IEC 23002-5 once the ISO/IEC 23002-5 has been adopted; and 
(2) to develop the ISO/IEC 23002-5: 

EPFL grants ISO/IEC all rights necessary to 
include the originally developed software module or modifications thereof 
in the ISO/IEC 23002-5 and to permit ISO/IEC to offer You a royalty-free, 
worldwide, non-exclusive, copyright license to copy, distribute, and make 
derivative works for use in implementations of the ISO/IEC 23002-5 in 
products that satisfy conformance criteria (if any), and to the extent 
that such originally developed software module or portions of it are 
included in the ISO/IEC 23002-5.  To the extent that EPFL
owns patent rights that would be required to make, use, or 
sell the originally developed software module or portions thereof 
included in the ISO/IEC 23002-5 in a conforming product, EPFL
will assure the ISO/IEC that it is willing to 
negotiate licenses under reasonable and non-discriminatory terms and 
conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications 
thereof for the sole  purpose of developing theISO/IEC 23002-5

EPFL retains full right to modify and use the 
code for its own purpose, assign or donate the code to a third party and 
to inhibit third parties from using the code for products that do not 
conform to MPEG-related ITU Recommendations and/or ISO/IEC International 
Standards. 

This copyright notice must be included in all copies or derivative works. 
Copyright (c) ISO/IEC 2011-2015.
*****************************************************************************/

package org.sc29.wg11.mpegh.part2.main.synParser.MultiParsers;

actor Merger3P ()
								// Parser 0 (p0)
                                uint(size=16) in0CUInfo, // Data port
                                uint(size= 6) in0IntraPredMode, // Data port
                                uint(size=16) in0SliceAddr, // Header port
                                uint(size=16) in0TilesCoord, // Header port
                                uint(size= 8) in0BitDepth, // Header port
                                uint(size= 8) in0LcuSize, // Header port
                                uint(size= 4) in0PartMode, // Data port
               					uint(size= 2) in0IsPicSlcLcu, // Data port              					
               					uint(size= 2) in0IsPicSlc, // Header port
                				uint(size= 2) in0LFAcrossSlcTile, // Header port
                                uint(size=16) in0PictSize, // Header port
                                 int(size=16) in0Poc, // Header port
                                 int(size= 9) in0SaoSe, // Data port
                                uint(size= 8) in0SEI_MD5, // Header port
                                uint(size= 2) in0SliceType, // Header port
                                bool          in0SplitTransform, // Data port
                                 int(size= 8) in0TUSize, // Data port
                                 int(size=16) in0Coeff, // Data port
                                bool          in0StrongIntraSmoothing, // Header port
                                uint(size=14) in0DispCoord, // Header port
                                uint(size= 9) in0PicSizeInMb, // Header port
                                uint(size= 5) in0NumRefIdxLxActive, // Header port
                                uint(size= 4) in0RefPicListModif, // Header port
                                 int(size=16) in0RefPoc, // Header port
                                 int(size=16) in0MvPredSyntaxElem, // Data port                                
                                bool 		  in0Cbf, // Data port
                                bool		  in0DBFDisable, // Header port
                                 int(size= 8) in0DbfSe, // Header port
                                uint(size= 8) in0ReorderPics, // Header port
                                 int(size=16) in0WeightedPred, // Header port
                                 int(size= 8) in0Qp, // Data port
                                uint(size= 8) in0PcmSize, // Data port
                                uint(size= 8) in0PcmBlk, // Data port
                                uint(size=16) in0LFBypassCUInfo, // Data port
                                 int(size= 8) in0HeaderControl,  // Control port
                                uint(size=16) in0NbTokens, // Control port  
                                
								// Parser 1 (p1)
                                uint(size=16) in1CUInfo, // Data port
                                uint(size= 6) in1IntraPredMode, // Data port
                                uint(size=16) in1SliceAddr, // Header port
                                uint(size=16) in1TilesCoord, // Header port
                                uint(size= 8) in1BitDepth, // Header port
                                uint(size= 8) in1LcuSize, // Header port
                                uint(size= 4) in1PartMode, // Data port
               					uint(size= 2) in1IsPicSlcLcu, // Data port              					
               					uint(size= 2) in1IsPicSlc, // Header port
                				uint(size= 2) in1LFAcrossSlcTile, // Header port
                                uint(size=16) in1PictSize, // Header port
                                 int(size=16) in1Poc, // Header port
                                 int(size= 9) in1SaoSe, // Data port
                                uint(size= 8) in1SEI_MD5, // Header port
                                uint(size= 2) in1SliceType, // Header port
                                bool          in1SplitTransform, // Data port
                                 int(size= 8) in1TUSize, // Data port
                                 int(size=16) in1Coeff, // Data port
                                bool          in1StrongIntraSmoothing, // Header port
                                uint(size=14) in1DispCoord, // Header port
                                uint(size= 9) in1PicSizeInMb, // Header port
                                uint(size= 5) in1NumRefIdxLxActive, // Header port
                                uint(size= 4) in1RefPicListModif, // Header port
                                 int(size=16) in1RefPoc, // Header port
                                 int(size=16) in1MvPredSyntaxElem, // Data port                                
                                bool 		  in1Cbf, // Data port
                                bool		  in1DBFDisable, // Header port
                                 int(size= 8) in1DbfSe, // Header port
                                uint(size= 8) in1ReorderPics, // Header port
                                 int(size=16) in1WeightedPred, // Header port
                                 int(size= 8) in1Qp, // Data port
                                uint(size= 8) in1PcmSize, // Data port
                                uint(size= 8) in1PcmBlk, // Data port
                                uint(size=16) in1LFBypassCUInfo, // Data port
                                 int(size= 8) in1HeaderControl,  // Control port
                                uint(size=16) in1NbTokens, // Control port                                  
                                
								// Parser 2 (p2)
                                uint(size=16) in2CUInfo, // Data port
                                uint(size= 6) in2IntraPredMode, // Data port
                                uint(size=16) in2SliceAddr, // Header port
                                uint(size=16) in2TilesCoord, // Header port
                                uint(size= 8) in2BitDepth, // Header port
                                uint(size= 8) in2LcuSize, // Header port
                                uint(size= 4) in2PartMode, // Data port
               					uint(size= 2) in2IsPicSlcLcu, // Data port              					
               					uint(size= 2) in2IsPicSlc, // Header port
                				uint(size= 2) in2LFAcrossSlcTile, // Header port
                                uint(size=16) in2PictSize, // Header port
                                 int(size=16) in2Poc, // Header port
                                 int(size= 9) in2SaoSe, // Data port
                                uint(size= 8) in2SEI_MD5, // Header port
                                uint(size= 2) in2SliceType, // Header port
                                bool          in2SplitTransform, // Data port
                                 int(size= 8) in2TUSize, // Data port
                                 int(size=16) in2Coeff, // Data port
                                bool          in2StrongIntraSmoothing, // Header port
                                uint(size=14) in2DispCoord, // Header port
                                uint(size= 9) in2PicSizeInMb, // Header port
                                uint(size= 5) in2NumRefIdxLxActive, // Header port
                                uint(size= 4) in2RefPicListModif, // Header port
                                 int(size=16) in2RefPoc, // Header port
                                 int(size=16) in2MvPredSyntaxElem, // Data port                                
                                bool 		  in2Cbf, // Data port
                                bool		  in2DBFDisable, // Header port
                                 int(size= 8) in2DbfSe, // Header port
                                uint(size= 8) in2ReorderPics, // Header port
                                 int(size=16) in2WeightedPred, // Header port
                                 int(size= 8) in2Qp, // Data port
                                uint(size= 8) in2PcmSize, // Data port
                                uint(size= 8) in2PcmBlk, // Data port
                                uint(size=16) in2LFBypassCUInfo, // Data port
                                 int(size= 8) in2HeaderControl,  // Control port
                                uint(size=16) in2NbTokens // Control port
                                
                                ==>
                                // Output ports
                                uint(size=16) opCUInfo,
                                uint(size= 6) opIntraPredMode,
                                uint(size=16) opSliceAddr,
                                uint(size=16) opTilesCoord,
                                uint(size= 8) opBitDepth,
                                uint(size= 8) opLcuSize,
                                uint(size= 4) opPartMode,
               					uint(size= 2) opIsPicSlcLcu,
               					uint(size= 2) opIsPicSlc,
                				uint(size= 2) opLFAcrossSlcTile,
                                uint(size=16) opPictSize,
                                 int(size=16) opPoc,
                                 int(size= 9) opSaoSe,
                                uint(size= 8) opSEI_MD5,
                                uint(size= 2) opSliceType,
                                bool          opSplitTransform,
                                 int(size= 8) opTUSize,
                                 int(size=16) opCoeff,
                                bool          opStrongIntraSmoothing,
                                uint(size=14) opDispCoord,
                                uint(size= 9)  opPicSizeInMb,
                                uint(size= 5) opNumRefIdxLxActive,
                                uint(size= 4) opRefPicListModif,
                                 int(size=16) opRefPoc,
                                 int(size=16) opMvPredSyntaxElem,
                                bool		  opCbf,
                                bool		  opDBFDisable,
                                 int(size= 8) opDbfSe,
                                uint(size= 8) opReorderPics,
                                 int(size=16) opWeightedPred,
                                 int(size= 8) opQp,
                                uint(size= 8) opPcmSize,
                                uint(size= 8) opPcmBlk,
                                uint(size=16) opLFBypassCUInfo
:
/*--------------------- p0.Header_Fwd ---------------------*/
	p0.Header_Fwd.SliceAdd:
	action in0SliceAddr:[x] repeat 2 ==> opSliceAddr:[x] repeat 2
	guard cntTokensPerSH[0] < nbTokensPerSH[0]
	do
		cntTokensPerSH[0] := cntTokensPerSH[0] + 2;
		@inline
		updateFinishStatus(nbTokensPerSH[0], cntTokensPerSH[0], 0);
	end
	
	p0.Header_Fwd.TilesCoord:
	action in0TilesCoord:[x] ==> opTilesCoord:[x]
	guard cntTokensPerSH[1] < nbTokensPerSH[1]
	do
		cntTokensPerSH[1] := cntTokensPerSH[1] + 1;
		@inline
		updateFinishStatus(nbTokensPerSH[1], cntTokensPerSH[1], 1);
	end
	
	p0.Header_Fwd.BitDepth:
	action in0BitDepth:[x] repeat 2 ==> opBitDepth:[x] repeat 2
	guard cntTokensPerSH[2] < nbTokensPerSH[2]
	do
		cntTokensPerSH[2] := cntTokensPerSH[2] + 2;
		@inline
		updateFinishStatus(nbTokensPerSH[2], cntTokensPerSH[2], 2);
	end

	p0.Header_Fwd.LcuSize:
	action in0LcuSize:[x] repeat 2 ==> opLcuSize:[x] repeat 2
	guard cntTokensPerSH[3] < nbTokensPerSH[3]
	do
		cntTokensPerSH[3] := cntTokensPerSH[3] + 2;
		@inline
		updateFinishStatus(nbTokensPerSH[3], cntTokensPerSH[3], 3);
	end

	p0.Header_Fwd.PartModeSH:
	action in0PartMode:[x] ==> opPartMode:[x] 
	guard cntTokensPerSH[4] < nbTokensPerSH[4]
	do
		cntTokensPerSH[4] := cntTokensPerSH[4] + 1;
		@inline
		updateFinishStatus(nbTokensPerSH[4], cntTokensPerSH[4], 4);
	end

	p0.Header_Fwd.IsPicSlcLcuSH:
	action in0IsPicSlcLcu:[x] ==> opIsPicSlcLcu:[x]
	guard cntTokensPerSH[5] < nbTokensPerSH[5]
	do
		cntTokensPerSH[5] := cntTokensPerSH[5] + 1;
		@inline
		updateFinishStatus(nbTokensPerSH[5], cntTokensPerSH[5], 5);
	end
	
	p0.Header_Fwd.IsPicSlc:
	action in0IsPicSlc:[x] ==> opIsPicSlc:[x]
	guard cntTokensPerSH[6] < nbTokensPerSH[6]
	do
		cntTokensPerSH[6] := cntTokensPerSH[6] + 1;
		@inline
		updateFinishStatus(nbTokensPerSH[6], cntTokensPerSH[6], 6);
	end
	
	p0.Header_Fwd.LFAcrossSlcTile:
	action in0LFAcrossSlcTile:[x] ==> opLFAcrossSlcTile:[x]	
	guard cntTokensPerSH[7] < nbTokensPerSH[7]
	do
		cntTokensPerSH[7] := cntTokensPerSH[7] + 1;
		@inline
		updateFinishStatus(nbTokensPerSH[7], cntTokensPerSH[7], 7);
	end
	
	p0.Header_Fwd.PictSize:
	action in0PictSize:[x] repeat 2 ==> opPictSize:[x] repeat 2
	guard cntTokensPerSH[8] < nbTokensPerSH[8]
	do
		cntTokensPerSH[8] := cntTokensPerSH[8] + 2;
		@inline
		updateFinishStatus(nbTokensPerSH[8], cntTokensPerSH[8], 8);
	end

	p0.Header_Fwd.Poc:
	action in0Poc:[x] ==> opPoc:[x]
	guard cntTokensPerSH[9] < nbTokensPerSH[9]
	do
		cntTokensPerSH[9] := cntTokensPerSH[9] + 1;
		@inline
		updateFinishStatus(nbTokensPerSH[9], cntTokensPerSH[9], 9);
	end
	
	p0.Header_Fwd.SaoSeSH:
	action in0SaoSe:[x] ==> opSaoSe:[x]
	guard cntTokensPerSH[10] < nbTokensPerSH[10]
	do
		cntTokensPerSH[10] := cntTokensPerSH[10] + 1;
		@inline
		updateFinishStatus(nbTokensPerSH[10], cntTokensPerSH[10], 10);
	end
	
	p0.Header_Fwd.SEI_MD5:
	action in0SEI_MD5:[x] ==> opSEI_MD5:[x]
	guard cntTokensPerSH[11] < nbTokensPerSH[11]
	do
		cntTokensPerSH[11] := cntTokensPerSH[11] + 1;
		@inline
		updateFinishStatus(nbTokensPerSH[11], cntTokensPerSH[11], 11);
	end

	p0.Header_Fwd.SliceType:
	action in0SliceType:[x] ==> opSliceType:[x]
	guard cntTokensPerSH[12] < nbTokensPerSH[12]
	do
		cntTokensPerSH[12] := cntTokensPerSH[12] + 1;
		@inline
		updateFinishStatus(nbTokensPerSH[12], cntTokensPerSH[12], 12);
	end
	
	p0.Header_Fwd.StrongIntraSmoothing:
	action in0StrongIntraSmoothing:[x] repeat 2 ==> opStrongIntraSmoothing:[x] repeat 2
	guard cntTokensPerSH[13] < nbTokensPerSH[13]
	do
		cntTokensPerSH[13] := cntTokensPerSH[13] + 2;
		@inline
		updateFinishStatus(nbTokensPerSH[13], cntTokensPerSH[13], 13);
	end
	
	p0.Header_Fwd.DispCoord:
	action in0DispCoord:[x] repeat 4 ==> opDispCoord:[x] repeat 4
	guard cntTokensPerSH[14] < nbTokensPerSH[14]
	do
		cntTokensPerSH[14] := cntTokensPerSH[14] + 4;
		@inline
		updateFinishStatus(nbTokensPerSH[14], cntTokensPerSH[14], 14);
	end
	
	p0.Header_Fwd.PicSizeInMb:
	action in0PicSizeInMb:[x] repeat 2 ==> opPicSizeInMb:[x] repeat 2
	guard cntTokensPerSH[15] < nbTokensPerSH[15]
	do
		cntTokensPerSH[15] := cntTokensPerSH[15] + 2;
		@inline
		updateFinishStatus(nbTokensPerSH[15], cntTokensPerSH[15], 15);
	end
	
	p0.Header_Fwd.NumRefIdxLxActive:
	action in0NumRefIdxLxActive:[x] repeat 2 ==> opNumRefIdxLxActive:[x] repeat 2
	guard cntTokensPerSH[16] < nbTokensPerSH[16]
	do
		cntTokensPerSH[16] := cntTokensPerSH[16] + 2;
		@inline
		updateFinishStatus(nbTokensPerSH[16], cntTokensPerSH[16], 16);
	end

	p0.Header_Fwd.RefPicListModif:
	action in0RefPicListModif:[x] ==> opRefPicListModif:[x]
	guard cntTokensPerSH[17] < nbTokensPerSH[17]
	do
		cntTokensPerSH[17] := cntTokensPerSH[17] + 1;
		@inline
		updateFinishStatus(nbTokensPerSH[17], cntTokensPerSH[17], 17);
	end
	
	p0.Header_Fwd.RefPoc:
	action in0RefPoc:[x] ==> opRefPoc:[x]
	guard cntTokensPerSH[18] < nbTokensPerSH[18]
	do
		cntTokensPerSH[18] := cntTokensPerSH[18] + 1;
		@inline
		updateFinishStatus(nbTokensPerSH[18], cntTokensPerSH[18], 18);
	end

	p0.Header_Fwd.MvPredSyntaxElemSH:
	action in0MvPredSyntaxElem:[x] repeat 2 ==> opMvPredSyntaxElem:[x] repeat 2
	guard cntTokensPerSH[19] < nbTokensPerSH[19]
	do
		cntTokensPerSH[19] := cntTokensPerSH[19] + 2;
		@inline
		updateFinishStatus(nbTokensPerSH[19], cntTokensPerSH[19], 19);
	end
	
	p0.Header_Fwd.DBFDisable:
	action in0DBFDisable:[x] ==> opDBFDisable:[x]
	guard cntTokensPerSH[20] < nbTokensPerSH[20]
	do
		cntTokensPerSH[20] := cntTokensPerSH[20] + 1;
		@inline
		updateFinishStatus(nbTokensPerSH[20], cntTokensPerSH[20], 20);
	end

	p0.Header_Fwd.DbfSe:
	action in0DbfSe:[x] repeat 4 ==> opDbfSe:[x] repeat 4
	guard cntTokensPerSH[21] < nbTokensPerSH[21]
	do
		cntTokensPerSH[21] := cntTokensPerSH[21] + 4;
		@inline
		updateFinishStatus(nbTokensPerSH[21], cntTokensPerSH[21], 21);
	end
	
	p0.Header_Fwd.ReorderPics:
	action in0ReorderPics:[x] repeat 8 ==> opReorderPics:[x] repeat 8
	guard cntTokensPerSH[22] < nbTokensPerSH[22]
	do
		cntTokensPerSH[22] := cntTokensPerSH[22] + 8;
		@inline
		updateFinishStatus(nbTokensPerSH[22], cntTokensPerSH[22], 22);
	end
	
	p0.Header_Fwd.WeightedPred:
	action in0WeightedPred:[x] ==> opWeightedPred:[x]
	guard cntTokensPerSH[23] < nbTokensPerSH[23]
	do
		cntTokensPerSH[23] := cntTokensPerSH[23] + 1;
		@inline
		updateFinishStatus(nbTokensPerSH[23], cntTokensPerSH[23], 23);
	end
	
/*--------------------- p0.Header_Eat ---------------------*/
	p0.Header_Eat.SliceAdd:
	action in0SliceAddr:[x] repeat 2 ==> 
	guard cntTokensPerSH[0] < nbTokensPerSH[0]
	do
		cntTokensPerSH[0] := cntTokensPerSH[0] + 2;
		@inline
		updateFinishStatus(nbTokensPerSH[0], cntTokensPerSH[0], 0);
	end
	
	p0.Header_Eat.TilesCoord:
	action in0TilesCoord:[x] ==> 
	guard cntTokensPerSH[1] < nbTokensPerSH[1]
	do
		cntTokensPerSH[1] := cntTokensPerSH[1] + 1;
		@inline
		updateFinishStatus(nbTokensPerSH[1], cntTokensPerSH[1], 1);
	end
	
	p0.Header_Eat.BitDepth:
	action in0BitDepth:[x] repeat 2 ==>
	guard cntTokensPerSH[2] < nbTokensPerSH[2]
	do
		cntTokensPerSH[2] := cntTokensPerSH[2] + 2;
		@inline
		updateFinishStatus(nbTokensPerSH[2], cntTokensPerSH[2], 2);
	end

	p0.Header_Eat.LcuSize:
	action in0LcuSize:[x] repeat 2 ==> 
	guard cntTokensPerSH[3] < nbTokensPerSH[3]
	do
		cntTokensPerSH[3] := cntTokensPerSH[3] + 2;
		@inline
		updateFinishStatus(nbTokensPerSH[3], cntTokensPerSH[3], 3);
	end

	p0.Header_Eat.PartModeSH:
	action in0PartMode:[x] ==> 
	guard cntTokensPerSH[4] < nbTokensPerSH[4]
	do
		cntTokensPerSH[4] := cntTokensPerSH[4] + 1;
		@inline
		updateFinishStatus(nbTokensPerSH[4], cntTokensPerSH[4], 4);
	end

	p0.Header_Eat.IsPicSlcLcuSH:
	action in0IsPicSlcLcu:[x] ==> 
	guard cntTokensPerSH[5] < nbTokensPerSH[5]
	do
		cntTokensPerSH[5] := cntTokensPerSH[5] + 1;
		@inline
		updateFinishStatus(nbTokensPerSH[5], cntTokensPerSH[5], 5);
	end
	
	p0.Header_Eat.IsPicSlc:
	action in0IsPicSlc:[x] ==> 
	guard cntTokensPerSH[6] < nbTokensPerSH[6]
	do
		cntTokensPerSH[6] := cntTokensPerSH[6] + 1;
		@inline
		updateFinishStatus(nbTokensPerSH[6], cntTokensPerSH[6], 6);
	end
	
	p0.Header_Eat.LFAcrossSlcTile:
	action in0LFAcrossSlcTile:[x] ==> 
	guard cntTokensPerSH[7] < nbTokensPerSH[7]
	do
		cntTokensPerSH[7] := cntTokensPerSH[7] + 1;
		@inline
		updateFinishStatus(nbTokensPerSH[7], cntTokensPerSH[7], 7);
	end
	
	p0.Header_Eat.PictSize:
	action in0PictSize:[x] repeat 2 ==> 
	guard cntTokensPerSH[8] < nbTokensPerSH[8]
	do
		cntTokensPerSH[8] := cntTokensPerSH[8] + 2;
		@inline
		updateFinishStatus(nbTokensPerSH[8], cntTokensPerSH[8], 8);
	end

	p0.Header_Eat.Poc:
	action in0Poc:[x] ==> 
	guard cntTokensPerSH[9] < nbTokensPerSH[9]
	do
		cntTokensPerSH[9] := cntTokensPerSH[9] + 1;
		@inline
		updateFinishStatus(nbTokensPerSH[9], cntTokensPerSH[9], 9);
	end
	
	p0.Header_Eat.SaoSeSH:
	action in0SaoSe:[x] ==> 
	guard cntTokensPerSH[10] < nbTokensPerSH[10]
	do
		cntTokensPerSH[10] := cntTokensPerSH[10] + 1;
		@inline
		updateFinishStatus(nbTokensPerSH[10], cntTokensPerSH[10], 10);
	end
	
	p0.Header_Eat.SEI_MD5:
	action in0SEI_MD5:[x] ==> 
	guard cntTokensPerSH[11] < nbTokensPerSH[11]
	do
		cntTokensPerSH[11] := cntTokensPerSH[11] + 1;
		@inline
		updateFinishStatus(nbTokensPerSH[11], cntTokensPerSH[11], 11);
	end

	p0.Header_Eat.SliceType:
	action in0SliceType:[x] ==> 
	guard cntTokensPerSH[12] < nbTokensPerSH[12]
	do
		cntTokensPerSH[12] := cntTokensPerSH[12] + 1;
		@inline
		updateFinishStatus(nbTokensPerSH[12], cntTokensPerSH[12], 12);
	end
	
	p0.Header_Eat.StrongIntraSmoothing:
	action in0StrongIntraSmoothing:[x] repeat 2 ==> 
	guard cntTokensPerSH[13] < nbTokensPerSH[13]
	do
		cntTokensPerSH[13] := cntTokensPerSH[13] + 2;
		@inline
		updateFinishStatus(nbTokensPerSH[13], cntTokensPerSH[13], 13);
	end
	
	p0.Header_Eat.DispCoord:
	action in0DispCoord:[x] repeat 4 ==> 
	guard cntTokensPerSH[14] < nbTokensPerSH[14]
	do
		cntTokensPerSH[14] := cntTokensPerSH[14] + 4;
		@inline
		updateFinishStatus(nbTokensPerSH[14], cntTokensPerSH[14], 14);
	end
	
	p0.Header_Eat.PicSizeInMb:
	action in0PicSizeInMb:[x] repeat 2 ==> 
	guard cntTokensPerSH[15] < nbTokensPerSH[15]
	do
		cntTokensPerSH[15] := cntTokensPerSH[15] + 2;
		@inline
		updateFinishStatus(nbTokensPerSH[15], cntTokensPerSH[15], 15);
	end
	
	p0.Header_Eat.NumRefIdxLxActive:
	action in0NumRefIdxLxActive:[x] repeat 2 ==> 
	guard cntTokensPerSH[16] < nbTokensPerSH[16]
	do
		cntTokensPerSH[16] := cntTokensPerSH[16] + 2;
		@inline
		updateFinishStatus(nbTokensPerSH[16], cntTokensPerSH[16], 16);
	end

	p0.Header_Eat.RefPicListModif:
	action in0RefPicListModif:[x] ==> 
	guard cntTokensPerSH[17] < nbTokensPerSH[17]
	do
		cntTokensPerSH[17] := cntTokensPerSH[17] + 1;
		@inline
		updateFinishStatus(nbTokensPerSH[17], cntTokensPerSH[17], 17);
	end
	
	p0.Header_Eat.RefPoc:
	action in0RefPoc:[x] ==> 
	guard cntTokensPerSH[18] < nbTokensPerSH[18]
	do
		cntTokensPerSH[18] := cntTokensPerSH[18] + 1;
		@inline
		updateFinishStatus(nbTokensPerSH[18], cntTokensPerSH[18], 18);
		
	end

	p0.Header_Eat.MvPredSyntaxElemSH:
	action in0MvPredSyntaxElem:[x] repeat 2 ==> 
	guard cntTokensPerSH[19] < nbTokensPerSH[19]
	do
		cntTokensPerSH[19] := cntTokensPerSH[19] + 2;
		@inline
		updateFinishStatus(nbTokensPerSH[19], cntTokensPerSH[19], 19);
	end
	
	p0.Header_Eat.DBFDisable:
	action in0DBFDisable:[x] ==> 
	guard cntTokensPerSH[20] < nbTokensPerSH[20]
	do
		cntTokensPerSH[20] := cntTokensPerSH[20] + 1;
		@inline
		updateFinishStatus(nbTokensPerSH[20], cntTokensPerSH[20], 20);		
	end

	p0.Header_Eat.DbfSe:
	action in0DbfSe:[x] repeat 4 ==> 
	guard cntTokensPerSH[21] < nbTokensPerSH[21]
	do
		cntTokensPerSH[21] := cntTokensPerSH[21] + 4;
		@inline
		updateFinishStatus(nbTokensPerSH[21], cntTokensPerSH[21], 21);		
	end
	
	p0.Header_Eat.ReorderPics:
	action in0ReorderPics:[x] repeat 8 ==> 
	guard cntTokensPerSH[22] < nbTokensPerSH[22]
	do
		cntTokensPerSH[22] := cntTokensPerSH[22] + 8;
		@inline
		updateFinishStatus(nbTokensPerSH[22], cntTokensPerSH[22], 22);		
	end
	
	p0.Header_Eat.WeightedPred:
	action in0WeightedPred:[x] ==> 
	guard cntTokensPerSH[23] < nbTokensPerSH[23]
	do
		cntTokensPerSH[23] := cntTokensPerSH[23] + 1;
		@inline
		updateFinishStatus(nbTokensPerSH[23], cntTokensPerSH[23], 23);		
	end
	
/*--------------------- p0.Data ---------------------*/	
	p0.Data.CUInfo:
	action in0CUInfo:[x] repeat 5 ==> opCUInfo:[x] repeat 5
	guard cntTokensPerCTU[0] < nbTokensPerCTU[0] 
	do
		cntTokensPerCTU[0] := cntTokensPerCTU[0] + 5;
		@inline
		updateFinishStatus(nbTokensPerCTU[0], cntTokensPerCTU[0], 0);		
	end

	p0.Data.IntraPredMode:
	action in0IntraPredMode:[x] repeat 2 ==> opIntraPredMode:[x] repeat 2 
	guard cntTokensPerCTU[1] < nbTokensPerCTU[1] 
	do
		cntTokensPerCTU[1] := cntTokensPerCTU[1] + 2;
		@inline
		updateFinishStatus(nbTokensPerCTU[1], cntTokensPerCTU[1], 1);		
	end
	
	p0.Data.PartMode:
	action in0PartMode:[x] ==> opPartMode:[x]
	guard cntTokensPerCTU[2] < nbTokensPerCTU[2] 
	do
		cntTokensPerCTU[2] := cntTokensPerCTU[2] + 1;
		@inline
		updateFinishStatus(nbTokensPerCTU[2], cntTokensPerCTU[2], 2);		
	end
	
	p0.Data.IsPicSlcLcu:
	action in0IsPicSlcLcu:[x] ==> opIsPicSlcLcu:[x]
	guard cntTokensPerCTU[3] < nbTokensPerCTU[3] 
	do
		cntTokensPerCTU[3] := cntTokensPerCTU[3] + 1;
		@inline
		updateFinishStatus(nbTokensPerCTU[3], cntTokensPerCTU[3], 3);		
	end

	p0.Data.SaoSe:
	action in0SaoSe:[x] ==> opSaoSe:[x]
	guard cntTokensPerCTU[4] < nbTokensPerCTU[4] 
	do
		cntTokensPerCTU[4] := cntTokensPerCTU[4] + 1;
		@inline
		updateFinishStatus(nbTokensPerCTU[4], cntTokensPerCTU[4], 4);		
	end

	p0.Data.SplitTransform:
	action in0SplitTransform:[x] ==> opSplitTransform:[x]	
	guard cntTokensPerCTU[5] < nbTokensPerCTU[5] 
	do
		cntTokensPerCTU[5] := cntTokensPerCTU[5] + 1;
		@inline
		updateFinishStatus(nbTokensPerCTU[5], cntTokensPerCTU[5], 5);		
	end
	
	p0.Data.TUSize:
	action in0TUSize:[x] repeat 7 ==> opTUSize:[x] repeat 7
	guard cntTokensPerCTU[6] < nbTokensPerCTU[6] 
	do
		cntTokensPerCTU[6] := cntTokensPerCTU[6] + 7;
		@inline
		updateFinishStatus(nbTokensPerCTU[6], cntTokensPerCTU[6], 6);		
	end

	p0.Data.Coeff:
	action in0Coeff:[x] repeat 16 ==> opCoeff:[x] repeat 16		
	guard cntTokensPerCTU[7] < nbTokensPerCTU[7] 
	do
		cntTokensPerCTU[7] := cntTokensPerCTU[7] + 16;
		@inline
		updateFinishStatus(nbTokensPerCTU[7], cntTokensPerCTU[7], 7);		
	end
	
	p0.Data.MvPredSyntaxElem:
	action in0MvPredSyntaxElem:[x] ==> opMvPredSyntaxElem:[x]
	guard cntTokensPerCTU[8] < nbTokensPerCTU[8] 
	do
		cntTokensPerCTU[8] := cntTokensPerCTU[8] + 1;
		@inline
		updateFinishStatus(nbTokensPerCTU[8], cntTokensPerCTU[8], 8);		
	end
	
	p0.Data.Cbf:
	action in0Cbf:[x] ==> opCbf:[x]
	guard cntTokensPerCTU[9] < nbTokensPerCTU[9] 
	do
		cntTokensPerCTU[9] := cntTokensPerCTU[9] + 1;
		@inline
		updateFinishStatus(nbTokensPerCTU[9], cntTokensPerCTU[9], 9);		
	end
	
	p0.Data.Qp:
	action in0Qp:[x] repeat 2 ==> opQp:[x] repeat 2	
	guard cntTokensPerCTU[11] < nbTokensPerCTU[11] 
	do
		cntTokensPerCTU[11] := cntTokensPerCTU[11] + 2;
		@inline
		updateFinishStatus(nbTokensPerCTU[11], cntTokensPerCTU[11], 11);		
	end

	p0.Data.PcmSize:
	action in0PcmSize:[x] ==> opPcmSize:[x]
	guard cntTokensPerCTU[12] < nbTokensPerCTU[12] 
	do
		cntTokensPerCTU[12] := cntTokensPerCTU[12] + 1;
		@inline
		updateFinishStatus(nbTokensPerCTU[12], cntTokensPerCTU[12], 12);
	end

	p0.Data.PcmBlk:
	action in0PcmBlk:[x] ==> opPcmBlk:[x]
	guard cntTokensPerCTU[13] < nbTokensPerCTU[13] 
	do
		cntTokensPerCTU[13] := cntTokensPerCTU[13] + 1;
		@inline
		updateFinishStatus(nbTokensPerCTU[13], cntTokensPerCTU[13], 13);
	end

	p0.Data.LFBypassCUInfo:
	action in0LFBypassCUInfo:[x] repeat 5 ==> opLFBypassCUInfo:[x] repeat 5
	guard cntTokensPerCTU[14] < nbTokensPerCTU[14] 
	do
		cntTokensPerCTU[14] := cntTokensPerCTU[14] + 5;
		@inline
		updateFinishStatus(nbTokensPerCTU[14], cntTokensPerCTU[14], 14);
	end
	
/*--------------------- p1.Header_Fwd ---------------------*/
	p1.Header_Fwd.SliceAdd:
	action in1SliceAddr:[x] repeat 2 ==> opSliceAddr:[x] repeat 2
	guard cntTokensPerSH[0] < nbTokensPerSH[0]
	do
		cntTokensPerSH[0] := cntTokensPerSH[0] + 2;
		@inline
		updateFinishStatus(nbTokensPerSH[0], cntTokensPerSH[0], 0);
	end
	
	p1.Header_Fwd.TilesCoord:
	action in1TilesCoord:[x] ==> opTilesCoord:[x]
	guard cntTokensPerSH[1] < nbTokensPerSH[1]
	do
		cntTokensPerSH[1] := cntTokensPerSH[1] + 1;
		@inline
		updateFinishStatus(nbTokensPerSH[1], cntTokensPerSH[1], 1);
	end
	
	p1.Header_Fwd.BitDepth:
	action in1BitDepth:[x] repeat 2 ==> opBitDepth:[x] repeat 2
	guard cntTokensPerSH[2] < nbTokensPerSH[2]
	do
		cntTokensPerSH[2] := cntTokensPerSH[2] + 2;
		@inline
		updateFinishStatus(nbTokensPerSH[2], cntTokensPerSH[2], 2);
	end

	p1.Header_Fwd.LcuSize:
	action in1LcuSize:[x] repeat 2 ==> opLcuSize:[x] repeat 2
	guard cntTokensPerSH[3] < nbTokensPerSH[3]
	do
		cntTokensPerSH[3] := cntTokensPerSH[3] + 2;
		@inline
		updateFinishStatus(nbTokensPerSH[3], cntTokensPerSH[3], 3);
	end

	p1.Header_Fwd.PartModeSH:
	action in1PartMode:[x] ==> opPartMode:[x] 
	guard cntTokensPerSH[4] < nbTokensPerSH[4]
	do
		cntTokensPerSH[4] := cntTokensPerSH[4] + 1;
		@inline
		updateFinishStatus(nbTokensPerSH[4], cntTokensPerSH[4], 4);
	end

	p1.Header_Fwd.IsPicSlcLcuSH:
	action in1IsPicSlcLcu:[x] ==> opIsPicSlcLcu:[x]
	guard cntTokensPerSH[5] < nbTokensPerSH[5]
	do
		cntTokensPerSH[5] := cntTokensPerSH[5] + 1;
		@inline
		updateFinishStatus(nbTokensPerSH[5], cntTokensPerSH[5], 5);
	end
	
	p1.Header_Fwd.IsPicSlc:
	action in1IsPicSlc:[x] ==> opIsPicSlc:[x]
	guard cntTokensPerSH[6] < nbTokensPerSH[6]
	do
		cntTokensPerSH[6] := cntTokensPerSH[6] + 1;
		@inline
		updateFinishStatus(nbTokensPerSH[6], cntTokensPerSH[6], 6);
	end
	
	p1.Header_Fwd.LFAcrossSlcTile:
	action in1LFAcrossSlcTile:[x] ==> opLFAcrossSlcTile:[x]	
	guard cntTokensPerSH[7] < nbTokensPerSH[7]
	do
		cntTokensPerSH[7] := cntTokensPerSH[7] + 1;
		@inline
		updateFinishStatus(nbTokensPerSH[7], cntTokensPerSH[7], 7);
	end
	
	p1.Header_Fwd.PictSize:
	action in1PictSize:[x] repeat 2 ==> opPictSize:[x] repeat 2
	guard cntTokensPerSH[8] < nbTokensPerSH[8]
	do
		cntTokensPerSH[8] := cntTokensPerSH[8] + 2;
		@inline
		updateFinishStatus(nbTokensPerSH[8], cntTokensPerSH[8], 8);
	end

	p1.Header_Fwd.Poc:
	action in1Poc:[x] ==> opPoc:[x]
	guard cntTokensPerSH[9] < nbTokensPerSH[9]
	do
		cntTokensPerSH[9] := cntTokensPerSH[9] + 1;
		@inline
		updateFinishStatus(nbTokensPerSH[9], cntTokensPerSH[9], 9);
	end
	
	p1.Header_Fwd.SaoSeSH:
	action in1SaoSe:[x] ==> opSaoSe:[x]
	guard cntTokensPerSH[10] < nbTokensPerSH[10]
	do
		cntTokensPerSH[10] := cntTokensPerSH[10] + 1;
		@inline
		updateFinishStatus(nbTokensPerSH[10], cntTokensPerSH[10], 10);
	end
	
	p1.Header_Fwd.SEI_MD5:
	action in1SEI_MD5:[x] ==> opSEI_MD5:[x]
	guard cntTokensPerSH[11] < nbTokensPerSH[11]
	do
		cntTokensPerSH[11] := cntTokensPerSH[11] + 1;
		@inline
		updateFinishStatus(nbTokensPerSH[11], cntTokensPerSH[11], 11);
	end

	p1.Header_Fwd.SliceType:
	action in1SliceType:[x] ==> opSliceType:[x]
	guard cntTokensPerSH[12] < nbTokensPerSH[12]
	do
		cntTokensPerSH[12] := cntTokensPerSH[12] + 1;
		@inline
		updateFinishStatus(nbTokensPerSH[12], cntTokensPerSH[12], 12);
	end
	
	p1.Header_Fwd.StrongIntraSmoothing:
	action in1StrongIntraSmoothing:[x] repeat 2 ==> opStrongIntraSmoothing:[x] repeat 2
	guard cntTokensPerSH[13] < nbTokensPerSH[13]
	do
		cntTokensPerSH[13] := cntTokensPerSH[13] + 2;
		@inline
		updateFinishStatus(nbTokensPerSH[13], cntTokensPerSH[13], 13);
	end
	
	p1.Header_Fwd.DispCoord:
	action in1DispCoord:[x] repeat 4 ==> opDispCoord:[x] repeat 4
	guard cntTokensPerSH[14] < nbTokensPerSH[14]
	do
		cntTokensPerSH[14] := cntTokensPerSH[14] + 4;
		@inline
		updateFinishStatus(nbTokensPerSH[14], cntTokensPerSH[14], 14);
	end
	
	p1.Header_Fwd.PicSizeInMb:
	action in1PicSizeInMb:[x] repeat 2 ==> opPicSizeInMb:[x] repeat 2
	guard cntTokensPerSH[15] < nbTokensPerSH[15]
	do
		cntTokensPerSH[15] := cntTokensPerSH[15] + 2;
		@inline
		updateFinishStatus(nbTokensPerSH[15], cntTokensPerSH[15], 15);
	end
	
	p1.Header_Fwd.NumRefIdxLxActive:
	action in1NumRefIdxLxActive:[x] repeat 2 ==> opNumRefIdxLxActive:[x] repeat 2
	guard cntTokensPerSH[16] < nbTokensPerSH[16]
	do
		cntTokensPerSH[16] := cntTokensPerSH[16] + 2;
		@inline
		updateFinishStatus(nbTokensPerSH[16], cntTokensPerSH[16], 16);
	end

	p1.Header_Fwd.RefPicListModif:
	action in1RefPicListModif:[x] ==> opRefPicListModif:[x]
	guard cntTokensPerSH[17] < nbTokensPerSH[17]
	do
		cntTokensPerSH[17] := cntTokensPerSH[17] + 1;
		@inline
		updateFinishStatus(nbTokensPerSH[17], cntTokensPerSH[17], 17);
	end
	
	p1.Header_Fwd.RefPoc:
	action in1RefPoc:[x] ==> opRefPoc:[x]
	guard cntTokensPerSH[18] < nbTokensPerSH[18]
	do
		cntTokensPerSH[18] := cntTokensPerSH[18] + 1;
		@inline
		updateFinishStatus(nbTokensPerSH[18], cntTokensPerSH[18], 18);
	end

	p1.Header_Fwd.MvPredSyntaxElemSH:
	action in1MvPredSyntaxElem:[x] repeat 2 ==> opMvPredSyntaxElem:[x] repeat 2
	guard cntTokensPerSH[19] < nbTokensPerSH[19]
	do
		cntTokensPerSH[19] := cntTokensPerSH[19] + 2;
		@inline
		updateFinishStatus(nbTokensPerSH[19], cntTokensPerSH[19], 19);
	end
	
	p1.Header_Fwd.DBFDisable:
	action in1DBFDisable:[x] ==> opDBFDisable:[x]
	guard cntTokensPerSH[20] < nbTokensPerSH[20]
	do
		cntTokensPerSH[20] := cntTokensPerSH[20] + 1;
		@inline
		updateFinishStatus(nbTokensPerSH[20], cntTokensPerSH[20], 20);
	end

	p1.Header_Fwd.DbfSe:
	action in1DbfSe:[x] repeat 4 ==> opDbfSe:[x] repeat 4
	guard cntTokensPerSH[21] < nbTokensPerSH[21]
	do
		cntTokensPerSH[21] := cntTokensPerSH[21] + 4;
		@inline
		updateFinishStatus(nbTokensPerSH[21], cntTokensPerSH[21], 21);
	end
	
	p1.Header_Fwd.ReorderPics:
	action in1ReorderPics:[x] repeat 8 ==> opReorderPics:[x] repeat 8
	guard cntTokensPerSH[22] < nbTokensPerSH[22]
	do
		cntTokensPerSH[22] := cntTokensPerSH[22] + 8;
		@inline
		updateFinishStatus(nbTokensPerSH[22], cntTokensPerSH[22], 22);
	end
	
	p1.Header_Fwd.WeightedPred:
	action in1WeightedPred:[x] ==> opWeightedPred:[x]
	guard cntTokensPerSH[23] < nbTokensPerSH[23]
	do
		cntTokensPerSH[23] := cntTokensPerSH[23] + 1;
		@inline
		updateFinishStatus(nbTokensPerSH[23], cntTokensPerSH[23], 23);
	end
	
/*--------------------- p1.Header_Eat ---------------------*/
	p1.Header_Eat.SliceAdd:
	action in1SliceAddr:[x] repeat 2 ==> 
	guard cntTokensPerSH[0] < nbTokensPerSH[0]
	do
		cntTokensPerSH[0] := cntTokensPerSH[0] + 2;
		@inline
		updateFinishStatus(nbTokensPerSH[0], cntTokensPerSH[0], 0);
	end
	
	p1.Header_Eat.TilesCoord:
	action in1TilesCoord:[x] ==> 
	guard cntTokensPerSH[1] < nbTokensPerSH[1]
	do
		cntTokensPerSH[1] := cntTokensPerSH[1] + 1;
		@inline
		updateFinishStatus(nbTokensPerSH[1], cntTokensPerSH[1], 1);
	end
	
	p1.Header_Eat.BitDepth:
	action in1BitDepth:[x] repeat 2 ==>
	guard cntTokensPerSH[2] < nbTokensPerSH[2]
	do
		cntTokensPerSH[2] := cntTokensPerSH[2] + 2;
		@inline
		updateFinishStatus(nbTokensPerSH[2], cntTokensPerSH[2], 2);
	end

	p1.Header_Eat.LcuSize:
	action in1LcuSize:[x] repeat 2 ==> 
	guard cntTokensPerSH[3] < nbTokensPerSH[3]
	do
		cntTokensPerSH[3] := cntTokensPerSH[3] + 2;
		@inline
		updateFinishStatus(nbTokensPerSH[3], cntTokensPerSH[3], 3);
	end

	p1.Header_Eat.PartModeSH:
	action in1PartMode:[x] ==> 
	guard cntTokensPerSH[4] < nbTokensPerSH[4]
	do
		cntTokensPerSH[4] := cntTokensPerSH[4] + 1;
		@inline
		updateFinishStatus(nbTokensPerSH[4], cntTokensPerSH[4], 4);
	end

	p1.Header_Eat.IsPicSlcLcuSH:
	action in1IsPicSlcLcu:[x] ==> 
	guard cntTokensPerSH[5] < nbTokensPerSH[5]
	do
		cntTokensPerSH[5] := cntTokensPerSH[5] + 1;
		@inline
		updateFinishStatus(nbTokensPerSH[5], cntTokensPerSH[5], 5);
	end
	
	p1.Header_Eat.IsPicSlc:
	action in1IsPicSlc:[x] ==> 
	guard cntTokensPerSH[6] < nbTokensPerSH[6]
	do
		cntTokensPerSH[6] := cntTokensPerSH[6] + 1;
		@inline
		updateFinishStatus(nbTokensPerSH[6], cntTokensPerSH[6], 6);
	end
	
	p1.Header_Eat.LFAcrossSlcTile:
	action in1LFAcrossSlcTile:[x] ==> 
	guard cntTokensPerSH[7] < nbTokensPerSH[7]
	do
		cntTokensPerSH[7] := cntTokensPerSH[7] + 1;
		@inline
		updateFinishStatus(nbTokensPerSH[7], cntTokensPerSH[7], 7);
	end
	
	p1.Header_Eat.PictSize:
	action in1PictSize:[x] repeat 2 ==> 
	guard cntTokensPerSH[8] < nbTokensPerSH[8]
	do
		cntTokensPerSH[8] := cntTokensPerSH[8] + 2;
		@inline
		updateFinishStatus(nbTokensPerSH[8], cntTokensPerSH[8], 8);
	end

	p1.Header_Eat.Poc:
	action in1Poc:[x] ==> 
	guard cntTokensPerSH[9] < nbTokensPerSH[9]
	do
		cntTokensPerSH[9] := cntTokensPerSH[9] + 1;
		@inline
		updateFinishStatus(nbTokensPerSH[9], cntTokensPerSH[9], 9);
	end
	
	p1.Header_Eat.SaoSeSH:
	action in1SaoSe:[x] ==> 
	guard cntTokensPerSH[10] < nbTokensPerSH[10]
	do
		cntTokensPerSH[10] := cntTokensPerSH[10] + 1;
		@inline
		updateFinishStatus(nbTokensPerSH[10], cntTokensPerSH[10], 10);
	end
	
	p1.Header_Eat.SEI_MD5:
	action in1SEI_MD5:[x] ==> 
	guard cntTokensPerSH[11] < nbTokensPerSH[11]
	do
		cntTokensPerSH[11] := cntTokensPerSH[11] + 1;
		@inline
		updateFinishStatus(nbTokensPerSH[11], cntTokensPerSH[11], 11);
	end

	p1.Header_Eat.SliceType:
	action in1SliceType:[x] ==> 
	guard cntTokensPerSH[12] < nbTokensPerSH[12]
	do
		cntTokensPerSH[12] := cntTokensPerSH[12] + 1;
		@inline
		updateFinishStatus(nbTokensPerSH[12], cntTokensPerSH[12], 12);
	end
	
	p1.Header_Eat.StrongIntraSmoothing:
	action in1StrongIntraSmoothing:[x] repeat 2 ==> 
	guard cntTokensPerSH[13] < nbTokensPerSH[13]
	do
		cntTokensPerSH[13] := cntTokensPerSH[13] + 2;
		@inline
		updateFinishStatus(nbTokensPerSH[13], cntTokensPerSH[13], 13);
	end
	
	p1.Header_Eat.DispCoord:
	action in1DispCoord:[x] repeat 4 ==> 
	guard cntTokensPerSH[14] < nbTokensPerSH[14]
	do
		cntTokensPerSH[14] := cntTokensPerSH[14] + 4;
		@inline
		updateFinishStatus(nbTokensPerSH[14], cntTokensPerSH[14], 14);
	end
	
	p1.Header_Eat.PicSizeInMb:
	action in1PicSizeInMb:[x] repeat 2 ==> 
	guard cntTokensPerSH[15] < nbTokensPerSH[15]
	do
		cntTokensPerSH[15] := cntTokensPerSH[15] + 2;
		@inline
		updateFinishStatus(nbTokensPerSH[15], cntTokensPerSH[15], 15);
	end
	
	p1.Header_Eat.NumRefIdxLxActive:
	action in1NumRefIdxLxActive:[x] repeat 2 ==> 
	guard cntTokensPerSH[16] < nbTokensPerSH[16]
	do
		cntTokensPerSH[16] := cntTokensPerSH[16] + 2;
		@inline
		updateFinishStatus(nbTokensPerSH[16], cntTokensPerSH[16], 16);
	end

	p1.Header_Eat.RefPicListModif:
	action in1RefPicListModif:[x] ==> 
	guard cntTokensPerSH[17] < nbTokensPerSH[17]
	do
		cntTokensPerSH[17] := cntTokensPerSH[17] + 1;
		@inline
		updateFinishStatus(nbTokensPerSH[17], cntTokensPerSH[17], 17);
	end
	
	p1.Header_Eat.RefPoc:
	action in1RefPoc:[x] ==> 
	guard cntTokensPerSH[18] < nbTokensPerSH[18]
	do
		cntTokensPerSH[18] := cntTokensPerSH[18] + 1;
		@inline
		updateFinishStatus(nbTokensPerSH[18], cntTokensPerSH[18], 18);
		
	end

	p1.Header_Eat.MvPredSyntaxElemSH:
	action in1MvPredSyntaxElem:[x] repeat 2 ==> 
	guard cntTokensPerSH[19] < nbTokensPerSH[19]
	do
		cntTokensPerSH[19] := cntTokensPerSH[19] + 2;
		@inline
		updateFinishStatus(nbTokensPerSH[19], cntTokensPerSH[19], 19);
	end
	
	p1.Header_Eat.DBFDisable:
	action in1DBFDisable:[x] ==> 
	guard cntTokensPerSH[20] < nbTokensPerSH[20]
	do
		cntTokensPerSH[20] := cntTokensPerSH[20] + 1;
		@inline
		updateFinishStatus(nbTokensPerSH[20], cntTokensPerSH[20], 20);		
	end

	p1.Header_Eat.DbfSe:
	action in1DbfSe:[x] repeat 4 ==> 
	guard cntTokensPerSH[21] < nbTokensPerSH[21]
	do
		cntTokensPerSH[21] := cntTokensPerSH[21] + 4;
		@inline
		updateFinishStatus(nbTokensPerSH[21], cntTokensPerSH[21], 21);		
	end
	
	p1.Header_Eat.ReorderPics:
	action in1ReorderPics:[x] repeat 8 ==> 
	guard cntTokensPerSH[22] < nbTokensPerSH[22]
	do
		cntTokensPerSH[22] := cntTokensPerSH[22] + 8;
		@inline
		updateFinishStatus(nbTokensPerSH[22], cntTokensPerSH[22], 22);		
	end
	
	p1.Header_Eat.WeightedPred:
	action in1WeightedPred:[x] ==> 
	guard cntTokensPerSH[23] < nbTokensPerSH[23]
	do
		cntTokensPerSH[23] := cntTokensPerSH[23] + 1;
		@inline
		updateFinishStatus(nbTokensPerSH[23], cntTokensPerSH[23], 23);		
	end
	
/*--------------------- p1.Data ---------------------*/	
	p1.Data.CUInfo:
	action in1CUInfo:[x] repeat 5 ==> opCUInfo:[x] repeat 5
	guard cntTokensPerCTU[0] < nbTokensPerCTU[0] 
	do
		cntTokensPerCTU[0] := cntTokensPerCTU[0] + 5;
		@inline
		updateFinishStatus(nbTokensPerCTU[0], cntTokensPerCTU[0], 0);		
	end

	p1.Data.IntraPredMode:
	action in1IntraPredMode:[x] repeat 2 ==> opIntraPredMode:[x] repeat 2 
	guard cntTokensPerCTU[1] < nbTokensPerCTU[1] 
	do
		cntTokensPerCTU[1] := cntTokensPerCTU[1] + 2;
		@inline
		updateFinishStatus(nbTokensPerCTU[1], cntTokensPerCTU[1], 1);		
	end
	
	p1.Data.PartMode:
	action in1PartMode:[x] ==> opPartMode:[x]
	guard cntTokensPerCTU[2] < nbTokensPerCTU[2] 
	do
		cntTokensPerCTU[2] := cntTokensPerCTU[2] + 1;
		@inline
		updateFinishStatus(nbTokensPerCTU[2], cntTokensPerCTU[2], 2);		
	end
	
	p1.Data.IsPicSlcLcu:
	action in1IsPicSlcLcu:[x] ==> opIsPicSlcLcu:[x]
	guard cntTokensPerCTU[3] < nbTokensPerCTU[3] 
	do
		cntTokensPerCTU[3] := cntTokensPerCTU[3] + 1;
		@inline
		updateFinishStatus(nbTokensPerCTU[3], cntTokensPerCTU[3], 3);		
	end

	p1.Data.SaoSe:
	action in1SaoSe:[x] ==> opSaoSe:[x]
	guard cntTokensPerCTU[4] < nbTokensPerCTU[4] 
	do
		cntTokensPerCTU[4] := cntTokensPerCTU[4] + 1;
		@inline
		updateFinishStatus(nbTokensPerCTU[4], cntTokensPerCTU[4], 4);		
	end

	p1.Data.SplitTransform:
	action in1SplitTransform:[x] ==> opSplitTransform:[x]	
	guard cntTokensPerCTU[5] < nbTokensPerCTU[5] 
	do
		cntTokensPerCTU[5] := cntTokensPerCTU[5] + 1;
		@inline
		updateFinishStatus(nbTokensPerCTU[5], cntTokensPerCTU[5], 5);		
	end
	
	p1.Data.TUSize:
	action in1TUSize:[x] repeat 7 ==> opTUSize:[x] repeat 7
	guard cntTokensPerCTU[6] < nbTokensPerCTU[6] 
	do
		cntTokensPerCTU[6] := cntTokensPerCTU[6] + 7;
		@inline
		updateFinishStatus(nbTokensPerCTU[6], cntTokensPerCTU[6], 6);		
	end

	p1.Data.Coeff:
	action in1Coeff:[x] repeat 16 ==> opCoeff:[x] repeat 16		
	guard cntTokensPerCTU[7] < nbTokensPerCTU[7] 
	do
		cntTokensPerCTU[7] := cntTokensPerCTU[7] + 16;
		@inline
		updateFinishStatus(nbTokensPerCTU[7], cntTokensPerCTU[7], 7);		
	end
	
	p1.Data.MvPredSyntaxElem:
	action in1MvPredSyntaxElem:[x] ==> opMvPredSyntaxElem:[x]
	guard cntTokensPerCTU[8] < nbTokensPerCTU[8] 
	do
		cntTokensPerCTU[8] := cntTokensPerCTU[8] + 1;
		@inline
		updateFinishStatus(nbTokensPerCTU[8], cntTokensPerCTU[8], 8);		
	end
	
	p1.Data.Cbf:
	action in1Cbf:[x] ==> opCbf:[x]
	guard cntTokensPerCTU[9] < nbTokensPerCTU[9] 
	do
		cntTokensPerCTU[9] := cntTokensPerCTU[9] + 1;
		@inline
		updateFinishStatus(nbTokensPerCTU[9], cntTokensPerCTU[9], 9);		
	end

	p1.Data.Qp:
	action in1Qp:[x] repeat 2 ==> opQp:[x] repeat 2	
	guard cntTokensPerCTU[11] < nbTokensPerCTU[11] 
	do
		cntTokensPerCTU[11] := cntTokensPerCTU[11] + 2;
		@inline
		updateFinishStatus(nbTokensPerCTU[11], cntTokensPerCTU[11], 11);		
	end

	p1.Data.PcmSize:
	action in1PcmSize:[x] ==> opPcmSize:[x]
	guard cntTokensPerCTU[12] < nbTokensPerCTU[12] 
	do
		cntTokensPerCTU[12] := cntTokensPerCTU[12] + 1;
		@inline
		updateFinishStatus(nbTokensPerCTU[12], cntTokensPerCTU[12], 12);
	end

	p1.Data.PcmBlk:
	action in1PcmBlk:[x] ==> opPcmBlk:[x]
	guard cntTokensPerCTU[13] < nbTokensPerCTU[13] 
	do
		cntTokensPerCTU[13] := cntTokensPerCTU[13] + 1;
		@inline
		updateFinishStatus(nbTokensPerCTU[13], cntTokensPerCTU[13], 13);
	end

	p1.Data.LFBypassCUInfo:
	action in1LFBypassCUInfo:[x] repeat 5 ==> opLFBypassCUInfo:[x] repeat 5
	guard cntTokensPerCTU[14] < nbTokensPerCTU[14] 
	do
		cntTokensPerCTU[14] := cntTokensPerCTU[14] + 5;
		@inline
		updateFinishStatus(nbTokensPerCTU[14], cntTokensPerCTU[14], 14);
	end
	
/*--------------------- p2.Header_Fwd ---------------------*/
	p2.Header_Fwd.SliceAdd:
	action in2SliceAddr:[x] repeat 2 ==> opSliceAddr:[x] repeat 2
	guard cntTokensPerSH[0] < nbTokensPerSH[0]
	do
		cntTokensPerSH[0] := cntTokensPerSH[0] + 2;
		@inline
		updateFinishStatus(nbTokensPerSH[0], cntTokensPerSH[0], 0);
	end
	
	p2.Header_Fwd.TilesCoord:
	action in2TilesCoord:[x] ==> opTilesCoord:[x]
	guard cntTokensPerSH[1] < nbTokensPerSH[1]
	do
		cntTokensPerSH[1] := cntTokensPerSH[1] + 1;
		@inline
		updateFinishStatus(nbTokensPerSH[1], cntTokensPerSH[1], 1);
	end
	
	p2.Header_Fwd.BitDepth:
	action in2BitDepth:[x] repeat 2 ==> opBitDepth:[x] repeat 2
	guard cntTokensPerSH[2] < nbTokensPerSH[2]
	do
		cntTokensPerSH[2] := cntTokensPerSH[2] + 2;
		@inline
		updateFinishStatus(nbTokensPerSH[2], cntTokensPerSH[2], 2);
	end

	p2.Header_Fwd.LcuSize:
	action in2LcuSize:[x] repeat 2 ==> opLcuSize:[x] repeat 2
	guard cntTokensPerSH[3] < nbTokensPerSH[3]
	do
		cntTokensPerSH[3] := cntTokensPerSH[3] + 2;
		@inline
		updateFinishStatus(nbTokensPerSH[3], cntTokensPerSH[3], 3);
	end

	p2.Header_Fwd.PartModeSH:
	action in2PartMode:[x] ==> opPartMode:[x] 
	guard cntTokensPerSH[4] < nbTokensPerSH[4]
	do
		cntTokensPerSH[4] := cntTokensPerSH[4] + 1;
		@inline
		updateFinishStatus(nbTokensPerSH[4], cntTokensPerSH[4], 4);
	end

	p2.Header_Fwd.IsPicSlcLcuSH:
	action in2IsPicSlcLcu:[x] ==> opIsPicSlcLcu:[x]
	guard cntTokensPerSH[5] < nbTokensPerSH[5]
	do
		cntTokensPerSH[5] := cntTokensPerSH[5] + 1;
		@inline
		updateFinishStatus(nbTokensPerSH[5], cntTokensPerSH[5], 5);
	end
	
	p2.Header_Fwd.IsPicSlc:
	action in2IsPicSlc:[x] ==> opIsPicSlc:[x]
	guard cntTokensPerSH[6] < nbTokensPerSH[6]
	do
		cntTokensPerSH[6] := cntTokensPerSH[6] + 1;
		@inline
		updateFinishStatus(nbTokensPerSH[6], cntTokensPerSH[6], 6);
	end
	
	p2.Header_Fwd.LFAcrossSlcTile:
	action in2LFAcrossSlcTile:[x] ==> opLFAcrossSlcTile:[x]	
	guard cntTokensPerSH[7] < nbTokensPerSH[7]
	do
		cntTokensPerSH[7] := cntTokensPerSH[7] + 1;
		@inline
		updateFinishStatus(nbTokensPerSH[7], cntTokensPerSH[7], 7);
	end
	
	p2.Header_Fwd.PictSize:
	action in2PictSize:[x] repeat 2 ==> opPictSize:[x] repeat 2
	guard cntTokensPerSH[8] < nbTokensPerSH[8]
	do
		cntTokensPerSH[8] := cntTokensPerSH[8] + 2;
		@inline
		updateFinishStatus(nbTokensPerSH[8], cntTokensPerSH[8], 8);
	end

	p2.Header_Fwd.Poc:
	action in2Poc:[x] ==> opPoc:[x]
	guard cntTokensPerSH[9] < nbTokensPerSH[9]
	do
		cntTokensPerSH[9] := cntTokensPerSH[9] + 1;
		@inline
		updateFinishStatus(nbTokensPerSH[9], cntTokensPerSH[9], 9);
	end
	
	p2.Header_Fwd.SaoSeSH:
	action in2SaoSe:[x] ==> opSaoSe:[x]
	guard cntTokensPerSH[10] < nbTokensPerSH[10]
	do
		cntTokensPerSH[10] := cntTokensPerSH[10] + 1;
		@inline
		updateFinishStatus(nbTokensPerSH[10], cntTokensPerSH[10], 10);
	end
	
	p2.Header_Fwd.SEI_MD5:
	action in2SEI_MD5:[x] ==> opSEI_MD5:[x]
	guard cntTokensPerSH[11] < nbTokensPerSH[11]
	do
		cntTokensPerSH[11] := cntTokensPerSH[11] + 1;
		@inline
		updateFinishStatus(nbTokensPerSH[11], cntTokensPerSH[11], 11);
	end

	p2.Header_Fwd.SliceType:
	action in2SliceType:[x] ==> opSliceType:[x]
	guard cntTokensPerSH[12] < nbTokensPerSH[12]
	do
		cntTokensPerSH[12] := cntTokensPerSH[12] + 1;
		@inline
		updateFinishStatus(nbTokensPerSH[12], cntTokensPerSH[12], 12);
	end
	
	p2.Header_Fwd.StrongIntraSmoothing:
	action in2StrongIntraSmoothing:[x] repeat 2 ==> opStrongIntraSmoothing:[x] repeat 2
	guard cntTokensPerSH[13] < nbTokensPerSH[13]
	do
		cntTokensPerSH[13] := cntTokensPerSH[13] + 2;
		@inline
		updateFinishStatus(nbTokensPerSH[13], cntTokensPerSH[13], 13);
	end
	
	p2.Header_Fwd.DispCoord:
	action in2DispCoord:[x] repeat 4 ==> opDispCoord:[x] repeat 4
	guard cntTokensPerSH[14] < nbTokensPerSH[14]
	do
		cntTokensPerSH[14] := cntTokensPerSH[14] + 4;
		@inline
		updateFinishStatus(nbTokensPerSH[14], cntTokensPerSH[14], 14);
	end
	
	p2.Header_Fwd.PicSizeInMb:
	action in2PicSizeInMb:[x] repeat 2 ==> opPicSizeInMb:[x] repeat 2
	guard cntTokensPerSH[15] < nbTokensPerSH[15]
	do
		cntTokensPerSH[15] := cntTokensPerSH[15] + 2;
		@inline
		updateFinishStatus(nbTokensPerSH[15], cntTokensPerSH[15], 15);
	end
	
	p2.Header_Fwd.NumRefIdxLxActive:
	action in2NumRefIdxLxActive:[x] repeat 2 ==> opNumRefIdxLxActive:[x] repeat 2
	guard cntTokensPerSH[16] < nbTokensPerSH[16]
	do
		cntTokensPerSH[16] := cntTokensPerSH[16] + 2;
		@inline
		updateFinishStatus(nbTokensPerSH[16], cntTokensPerSH[16], 16);
	end

	p2.Header_Fwd.RefPicListModif:
	action in2RefPicListModif:[x] ==> opRefPicListModif:[x]
	guard cntTokensPerSH[17] < nbTokensPerSH[17]
	do
		cntTokensPerSH[17] := cntTokensPerSH[17] + 1;
		@inline
		updateFinishStatus(nbTokensPerSH[17], cntTokensPerSH[17], 17);
	end
	
	p2.Header_Fwd.RefPoc:
	action in2RefPoc:[x] ==> opRefPoc:[x]
	guard cntTokensPerSH[18] < nbTokensPerSH[18]
	do
		cntTokensPerSH[18] := cntTokensPerSH[18] + 1;
		@inline
		updateFinishStatus(nbTokensPerSH[18], cntTokensPerSH[18], 18);
	end

	p2.Header_Fwd.MvPredSyntaxElemSH:
	action in2MvPredSyntaxElem:[x] repeat 2 ==> opMvPredSyntaxElem:[x] repeat 2
	guard cntTokensPerSH[19] < nbTokensPerSH[19]
	do
		cntTokensPerSH[19] := cntTokensPerSH[19] + 2;
		@inline
		updateFinishStatus(nbTokensPerSH[19], cntTokensPerSH[19], 19);
	end
	
	p2.Header_Fwd.DBFDisable:
	action in2DBFDisable:[x] ==> opDBFDisable:[x]
	guard cntTokensPerSH[20] < nbTokensPerSH[20]
	do
		cntTokensPerSH[20] := cntTokensPerSH[20] + 1;
		@inline
		updateFinishStatus(nbTokensPerSH[20], cntTokensPerSH[20], 20);
	end

	p2.Header_Fwd.DbfSe:
	action in2DbfSe:[x] repeat 4 ==> opDbfSe:[x] repeat 4
	guard cntTokensPerSH[21] < nbTokensPerSH[21]
	do
		cntTokensPerSH[21] := cntTokensPerSH[21] + 4;
		@inline
		updateFinishStatus(nbTokensPerSH[21], cntTokensPerSH[21], 21);
	end
	
	p2.Header_Fwd.ReorderPics:
	action in2ReorderPics:[x] repeat 8 ==> opReorderPics:[x] repeat 8
	guard cntTokensPerSH[22] < nbTokensPerSH[22]
	do
		cntTokensPerSH[22] := cntTokensPerSH[22] + 8;
		@inline
		updateFinishStatus(nbTokensPerSH[22], cntTokensPerSH[22], 22);
	end
	
	p2.Header_Fwd.WeightedPred:
	action in2WeightedPred:[x] ==> opWeightedPred:[x]
	guard cntTokensPerSH[23] < nbTokensPerSH[23]
	do
		cntTokensPerSH[23] := cntTokensPerSH[23] + 1;
		@inline
		updateFinishStatus(nbTokensPerSH[23], cntTokensPerSH[23], 23);
	end
	
/*--------------------- p2.Header_Eat ---------------------*/
	p2.Header_Eat.SliceAdd:
	action in2SliceAddr:[x] repeat 2 ==> 
	guard cntTokensPerSH[0] < nbTokensPerSH[0]
	do
		cntTokensPerSH[0] := cntTokensPerSH[0] + 2;
		@inline
		updateFinishStatus(nbTokensPerSH[0], cntTokensPerSH[0], 0);
	end
	
	p2.Header_Eat.TilesCoord:
	action in2TilesCoord:[x] ==> 
	guard cntTokensPerSH[1] < nbTokensPerSH[1]
	do
		cntTokensPerSH[1] := cntTokensPerSH[1] + 1;
		@inline
		updateFinishStatus(nbTokensPerSH[1], cntTokensPerSH[1], 1);
	end
	
	p2.Header_Eat.BitDepth:
	action in2BitDepth:[x] repeat 2 ==>
	guard cntTokensPerSH[2] < nbTokensPerSH[2]
	do
		cntTokensPerSH[2] := cntTokensPerSH[2] + 2;
		@inline
		updateFinishStatus(nbTokensPerSH[2], cntTokensPerSH[2], 2);
	end

	p2.Header_Eat.LcuSize:
	action in2LcuSize:[x] repeat 2 ==> 
	guard cntTokensPerSH[3] < nbTokensPerSH[3]
	do
		cntTokensPerSH[3] := cntTokensPerSH[3] + 2;
		@inline
		updateFinishStatus(nbTokensPerSH[3], cntTokensPerSH[3], 3);
	end

	p2.Header_Eat.PartModeSH:
	action in2PartMode:[x] ==> 
	guard cntTokensPerSH[4] < nbTokensPerSH[4]
	do
		cntTokensPerSH[4] := cntTokensPerSH[4] + 1;
		@inline
		updateFinishStatus(nbTokensPerSH[4], cntTokensPerSH[4], 4);
	end

	p2.Header_Eat.IsPicSlcLcuSH:
	action in2IsPicSlcLcu:[x] ==> 
	guard cntTokensPerSH[5] < nbTokensPerSH[5]
	do
		cntTokensPerSH[5] := cntTokensPerSH[5] + 1;
		@inline
		updateFinishStatus(nbTokensPerSH[5], cntTokensPerSH[5], 5);
	end
	
	p2.Header_Eat.IsPicSlc:
	action in2IsPicSlc:[x] ==> 
	guard cntTokensPerSH[6] < nbTokensPerSH[6]
	do
		cntTokensPerSH[6] := cntTokensPerSH[6] + 1;
		@inline
		updateFinishStatus(nbTokensPerSH[6], cntTokensPerSH[6], 6);
	end
	
	p2.Header_Eat.LFAcrossSlcTile:
	action in2LFAcrossSlcTile:[x] ==> 
	guard cntTokensPerSH[7] < nbTokensPerSH[7]
	do
		cntTokensPerSH[7] := cntTokensPerSH[7] + 1;
		@inline
		updateFinishStatus(nbTokensPerSH[7], cntTokensPerSH[7], 7);
	end
	
	p2.Header_Eat.PictSize:
	action in2PictSize:[x] repeat 2 ==> 
	guard cntTokensPerSH[8] < nbTokensPerSH[8]
	do
		cntTokensPerSH[8] := cntTokensPerSH[8] + 2;
		@inline
		updateFinishStatus(nbTokensPerSH[8], cntTokensPerSH[8], 8);
	end

	p2.Header_Eat.Poc:
	action in2Poc:[x] ==> 
	guard cntTokensPerSH[9] < nbTokensPerSH[9]
	do
		cntTokensPerSH[9] := cntTokensPerSH[9] + 1;
		@inline
		updateFinishStatus(nbTokensPerSH[9], cntTokensPerSH[9], 9);
	end
	
	p2.Header_Eat.SaoSeSH:
	action in2SaoSe:[x] ==> 
	guard cntTokensPerSH[10] < nbTokensPerSH[10]
	do
		cntTokensPerSH[10] := cntTokensPerSH[10] + 1;
		@inline
		updateFinishStatus(nbTokensPerSH[10], cntTokensPerSH[10], 10);
	end
	
	p2.Header_Eat.SEI_MD5:
	action in2SEI_MD5:[x] ==> 
	guard cntTokensPerSH[11] < nbTokensPerSH[11]
	do
		cntTokensPerSH[11] := cntTokensPerSH[11] + 1;
		@inline
		updateFinishStatus(nbTokensPerSH[11], cntTokensPerSH[11], 11);
	end

	p2.Header_Eat.SliceType:
	action in2SliceType:[x] ==> 
	guard cntTokensPerSH[12] < nbTokensPerSH[12]
	do
		cntTokensPerSH[12] := cntTokensPerSH[12] + 1;
		@inline
		updateFinishStatus(nbTokensPerSH[12], cntTokensPerSH[12], 12);
	end
	
	p2.Header_Eat.StrongIntraSmoothing:
	action in2StrongIntraSmoothing:[x] repeat 2 ==> 
	guard cntTokensPerSH[13] < nbTokensPerSH[13]
	do
		cntTokensPerSH[13] := cntTokensPerSH[13] + 2;
		@inline
		updateFinishStatus(nbTokensPerSH[13], cntTokensPerSH[13], 13);
	end
	
	p2.Header_Eat.DispCoord:
	action in2DispCoord:[x] repeat 4 ==> 
	guard cntTokensPerSH[14] < nbTokensPerSH[14]
	do
		cntTokensPerSH[14] := cntTokensPerSH[14] + 4;
		@inline
		updateFinishStatus(nbTokensPerSH[14], cntTokensPerSH[14], 14);
	end
	
	p2.Header_Eat.PicSizeInMb:
	action in2PicSizeInMb:[x] repeat 2 ==> 
	guard cntTokensPerSH[15] < nbTokensPerSH[15]
	do
		cntTokensPerSH[15] := cntTokensPerSH[15] + 2;
		@inline
		updateFinishStatus(nbTokensPerSH[15], cntTokensPerSH[15], 15);
	end
	
	p2.Header_Eat.NumRefIdxLxActive:
	action in2NumRefIdxLxActive:[x] repeat 2 ==> 
	guard cntTokensPerSH[16] < nbTokensPerSH[16]
	do
		cntTokensPerSH[16] := cntTokensPerSH[16] + 2;
		@inline
		updateFinishStatus(nbTokensPerSH[16], cntTokensPerSH[16], 16);
	end

	p2.Header_Eat.RefPicListModif:
	action in2RefPicListModif:[x] ==> 
	guard cntTokensPerSH[17] < nbTokensPerSH[17]
	do
		cntTokensPerSH[17] := cntTokensPerSH[17] + 1;
		@inline
		updateFinishStatus(nbTokensPerSH[17], cntTokensPerSH[17], 17);
	end
	
	p2.Header_Eat.RefPoc:
	action in2RefPoc:[x] ==> 
	guard cntTokensPerSH[18] < nbTokensPerSH[18]
	do
		cntTokensPerSH[18] := cntTokensPerSH[18] + 1;
		@inline
		updateFinishStatus(nbTokensPerSH[18], cntTokensPerSH[18], 18);
		
	end

	p2.Header_Eat.MvPredSyntaxElemSH:
	action in2MvPredSyntaxElem:[x] repeat 2 ==> 
	guard cntTokensPerSH[19] < nbTokensPerSH[19]
	do
		cntTokensPerSH[19] := cntTokensPerSH[19] + 2;
		@inline
		updateFinishStatus(nbTokensPerSH[19], cntTokensPerSH[19], 19);
	end
	
	p2.Header_Eat.DBFDisable:
	action in2DBFDisable:[x] ==> 
	guard cntTokensPerSH[20] < nbTokensPerSH[20]
	do
		cntTokensPerSH[20] := cntTokensPerSH[20] + 1;
		@inline
		updateFinishStatus(nbTokensPerSH[20], cntTokensPerSH[20], 20);		
	end

	p2.Header_Eat.DbfSe:
	action in2DbfSe:[x] repeat 4 ==> 
	guard cntTokensPerSH[21] < nbTokensPerSH[21]
	do
		cntTokensPerSH[21] := cntTokensPerSH[21] + 4;
		@inline
		updateFinishStatus(nbTokensPerSH[21], cntTokensPerSH[21], 21);		
	end
	
	p2.Header_Eat.ReorderPics:
	action in2ReorderPics:[x] repeat 8 ==> 
	guard cntTokensPerSH[22] < nbTokensPerSH[22]
	do
		cntTokensPerSH[22] := cntTokensPerSH[22] + 8;
		@inline
		updateFinishStatus(nbTokensPerSH[22], cntTokensPerSH[22], 22);		
	end
	
	p2.Header_Eat.WeightedPred:
	action in2WeightedPred:[x] ==> 
	guard cntTokensPerSH[23] < nbTokensPerSH[23]
	do
		cntTokensPerSH[23] := cntTokensPerSH[23] + 1;
		@inline
		updateFinishStatus(nbTokensPerSH[23], cntTokensPerSH[23], 23);		
	end
	
/*--------------------- p2.Data ---------------------*/	
	p2.Data.CUInfo:
	action in2CUInfo:[x] repeat 5 ==> opCUInfo:[x] repeat 5
	guard cntTokensPerCTU[0] < nbTokensPerCTU[0] 
	do
		cntTokensPerCTU[0] := cntTokensPerCTU[0] + 5;
		@inline
		updateFinishStatus(nbTokensPerCTU[0], cntTokensPerCTU[0], 0);		
	end

	p2.Data.IntraPredMode:
	action in2IntraPredMode:[x] repeat 2 ==> opIntraPredMode:[x] repeat 2 
	guard cntTokensPerCTU[1] < nbTokensPerCTU[1] 
	do
		cntTokensPerCTU[1] := cntTokensPerCTU[1] + 2;
		@inline
		updateFinishStatus(nbTokensPerCTU[1], cntTokensPerCTU[1], 1);		
	end
	
	p2.Data.PartMode:
	action in2PartMode:[x] ==> opPartMode:[x]
	guard cntTokensPerCTU[2] < nbTokensPerCTU[2] 
	do
		cntTokensPerCTU[2] := cntTokensPerCTU[2] + 1;
		@inline
		updateFinishStatus(nbTokensPerCTU[2], cntTokensPerCTU[2], 2);		
	end
	
	p2.Data.IsPicSlcLcu:
	action in2IsPicSlcLcu:[x] ==> opIsPicSlcLcu:[x]
	guard cntTokensPerCTU[3] < nbTokensPerCTU[3] 
	do
		cntTokensPerCTU[3] := cntTokensPerCTU[3] + 1;
		@inline
		updateFinishStatus(nbTokensPerCTU[3], cntTokensPerCTU[3], 3);		
	end

	p2.Data.SaoSe:
	action in2SaoSe:[x] ==> opSaoSe:[x]
	guard cntTokensPerCTU[4] < nbTokensPerCTU[4] 
	do
		cntTokensPerCTU[4] := cntTokensPerCTU[4] + 1;
		@inline
		updateFinishStatus(nbTokensPerCTU[4], cntTokensPerCTU[4], 4);		
	end

	p2.Data.SplitTransform:
	action in2SplitTransform:[x] ==> opSplitTransform:[x]	
	guard cntTokensPerCTU[5] < nbTokensPerCTU[5] 
	do
		cntTokensPerCTU[5] := cntTokensPerCTU[5] + 1;
		@inline
		updateFinishStatus(nbTokensPerCTU[5], cntTokensPerCTU[5], 5);		
	end
	
	p2.Data.TUSize:
	action in2TUSize:[x] repeat 7 ==> opTUSize:[x] repeat 7
	guard cntTokensPerCTU[6] < nbTokensPerCTU[6] 
	do
		cntTokensPerCTU[6] := cntTokensPerCTU[6] + 7;
		@inline
		updateFinishStatus(nbTokensPerCTU[6], cntTokensPerCTU[6], 6);		
	end

	p2.Data.Coeff:
	action in2Coeff:[x] repeat 16 ==> opCoeff:[x] repeat 16		
	guard cntTokensPerCTU[7] < nbTokensPerCTU[7] 
	do
		cntTokensPerCTU[7] := cntTokensPerCTU[7] + 16;
		@inline
		updateFinishStatus(nbTokensPerCTU[7], cntTokensPerCTU[7], 7);		
	end
	
	p2.Data.MvPredSyntaxElem:
	action in2MvPredSyntaxElem:[x] ==> opMvPredSyntaxElem:[x]
	guard cntTokensPerCTU[8] < nbTokensPerCTU[8] 
	do
		cntTokensPerCTU[8] := cntTokensPerCTU[8] + 1;
		@inline
		updateFinishStatus(nbTokensPerCTU[8], cntTokensPerCTU[8], 8);		
	end
	
	p2.Data.Cbf:
	action in2Cbf:[x] ==> opCbf:[x]
	guard cntTokensPerCTU[9] < nbTokensPerCTU[9] 
	do
		cntTokensPerCTU[9] := cntTokensPerCTU[9] + 1;
		@inline
		updateFinishStatus(nbTokensPerCTU[9], cntTokensPerCTU[9], 9);		
	end

	p2.Data.Qp:
	action in2Qp:[x] repeat 2 ==> opQp:[x] repeat 2	
	guard cntTokensPerCTU[11] < nbTokensPerCTU[11] 
	do
		cntTokensPerCTU[11] := cntTokensPerCTU[11] + 2;
		@inline
		updateFinishStatus(nbTokensPerCTU[11], cntTokensPerCTU[11], 11);		
	end

	p2.Data.PcmSize:
	action in2PcmSize:[x] ==> opPcmSize:[x]
	guard cntTokensPerCTU[12] < nbTokensPerCTU[12] 
	do
		cntTokensPerCTU[12] := cntTokensPerCTU[12] + 1;
		@inline
		updateFinishStatus(nbTokensPerCTU[12], cntTokensPerCTU[12], 12);
	end

	p2.Data.PcmBlk:
	action in2PcmBlk:[x] ==> opPcmBlk:[x]
	guard cntTokensPerCTU[13] < nbTokensPerCTU[13] 
	do
		cntTokensPerCTU[13] := cntTokensPerCTU[13] + 1;
		@inline
		updateFinishStatus(nbTokensPerCTU[13], cntTokensPerCTU[13], 13);
	end

	p2.Data.LFBypassCUInfo:
	action in2LFBypassCUInfo:[x] repeat 5 ==> opLFBypassCUInfo:[x] repeat 5
	guard cntTokensPerCTU[14] < nbTokensPerCTU[14] 
	do
		cntTokensPerCTU[14] := cntTokensPerCTU[14] + 5;
		@inline
		updateFinishStatus(nbTokensPerCTU[14], cntTokensPerCTU[14], 14);
	end
	
/*--------------------- State-vars and procedures ---------------------*/
	uint(size=16) nbTokensPerSH[26] := [0: for int i in 0 .. 25];
	uint(size=16) cntTokensPerSH[26] := [0: for int i in 0 .. 25];
	uint(size=16) nbTokensPerCTU[15] := [0: for int i in 0 .. 14];
	uint(size=16) cntTokensPerCTU[15] := [0: for int i in 0 .. 14];

	uint(size=16) cntCTUs := 0;
	uint(size=1) eouFlag := 0;
	int headerControl := 0;
	uint(size=32) bitmapFinishStatus := 0;
	int lastHC5 := -1;

	@inline
	procedure updateFinishStatus(uint(size=16) nbTokens, uint(size=16) cntTokens, uint(size=8) i)
	begin
		bitmapFinishStatus  := bitmapFinishStatus | (if((nbTokens - cntTokens) <= 0) then 1 else 0 end)<<i;		
	end

	@inline
	procedure resetVarsSH(uint(size=16) list[26])
	begin
		bitmapFinishStatus := 0;
		foreach int i in 0 .. 25 do
			nbTokensPerSH[i]	:= list[i];
			cntTokensPerSH[i]	:= 0;
			bitmapFinishStatus  := bitmapFinishStatus | (if(nbTokensPerSH[i] = 0) then 1 else 0 end)<<i;			
		end
	end		

	@inline
	procedure resetVarsCTU(uint(size=16) list[15])
	begin
		bitmapFinishStatus := 0;
		foreach int i in 0 .. 14 do
			nbTokensPerCTU[i]	:= list[i];
			cntTokensPerCTU[i]	:= 0;
			bitmapFinishStatus  := bitmapFinishStatus | (if(nbTokensPerCTU[i] = 0) then 1 else 0 end)<<i;			
		end		
	end	
	
	@inline	
	procedure resetZeroVarsCTU()
	begin
		cntCTUs 		:= 0;
		eouFlag 		:= 0;		
		nbTokensPerCTU	:= [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
		cntTokensPerCTU	:= [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
		bitmapFinishStatus := 0;
	end
	
/*--------------------- p0.Header_Control ---------------------*/
	p0.Header_Control_Fwd:
	action in0HeaderControl:[hc], in0NbTokens:[list] repeat 26 ==>
	guard hc <= 1
	do
		headerControl := hc; 
		resetVarsSH(list);
		lastHC5 := 2; //(selectedFWD + 2) mod 3;
	end
	
	p0.Header_Control_Eat:
	action in0HeaderControl:[hc], in0NbTokens:[list] repeat 26 ==>
	guard hc >= 3 
	do
		headerControl := hc;
		resetVarsSH(list);
	end
		
	p0.Header_Control_noHeader:
	action in0HeaderControl:[hc] ==>
	guard hc = 2
	do
		headerControl := hc;
	end
	
/*--------------------- p1.Header_Control ---------------------*/
	p1.Header_Control_Fwd:
	action in1HeaderControl:[hc], in1NbTokens:[list] repeat 26 ==>
	guard hc <= 1	
	do
		headerControl := hc;
		resetVarsSH(list);
		lastHC5 := 0; //(selectedFWD + 2) mod 3;
	end
	
	p1.Header_Control_Eat:
	action in1HeaderControl:[hc], in1NbTokens:[list] repeat 26 ==>
	guard hc >= 3
	do
		headerControl := hc;
		resetVarsSH(list);
	end	

	p1.Header_Control_noHeader:
	action in1HeaderControl:[hc] ==>
	guard hc = 2
	do
		headerControl := hc;
	end	

/*--------------------- p2.Header_Control ---------------------*/
	p2.Header_Control_Fwd:
	action in2HeaderControl:[hc], in2NbTokens:[list] repeat 26 ==>
	guard hc <= 1	
	do
		headerControl := hc;
		resetVarsSH(list);
		lastHC5 := 1; //(selectedFWD + 2) mod 3;
	end
	
	p2.Header_Control_Eat:
	action in2HeaderControl:[hc], in2NbTokens:[list] repeat 26 ==>
	guard hc >= 3
	do
		headerControl := hc;
		resetVarsSH(list);
	end	

	p2.Header_Control_noHeader:
	action in2HeaderControl:[hc] ==>
	guard hc = 2
	do
		headerControl := hc;
	end	
	
/*--------------------- p0.Data_Control ---------------------*/
	p0.Data_Control_getNbTokensCTU:
	action in0HeaderControl:[eou], in0NbTokens:[list] repeat 15 ==>
	guard eouFlag = 0
	do
		eouFlag := eou;
		resetVarsCTU(list);
	end
		
	p0.Data_Control_unitEnd:
	action ==>
	guard  eouFlag = 1
	do
		resetZeroVarsCTU();
	end

/*--------------------- p1.Data_Control ---------------------*/
	p1.Data_Control_getNbTokensCTU:
	action in1HeaderControl:[eou], in1NbTokens:[list] repeat 15 ==>
	guard eouFlag = 0
	do
		eouFlag := eou;
		resetVarsCTU(list);
	end	

	p1.Data_Control_unitEnd:
	action ==>
	guard  eouFlag = 1
	do
		resetZeroVarsCTU();	
	end

/*--------------------- p2.Data_Control ---------------------*/
	p2.Data_Control_getNbTokensCTU:
	action in2HeaderControl:[eou], in2NbTokens:[list] repeat 15 ==>
	guard eouFlag = 0
	do
		eouFlag := eou;
		resetVarsCTU(list);
	end	

	p2.Data_Control_unitEnd:
	action ==>
	guard  eouFlag = 1
	do
		resetZeroVarsCTU();	
	end
	
/*--------------------- Common Header/Data Actions ---------------------*/
	Header_Eat_Done_HC3:
	action ==> 
	guard headerControl = 3 
	do 
		headerControl := 0; 
	end

	Header_Eat_Done_HC4:
	action ==> 
	guard headerControl = 4 
	do 
		headerControl := 0; 
	end

	Header_Eat_Done_HC5:
	action ==> 
	guard headerControl = 5 
	do 
		headerControl := 0; 
	end

	Header_endSH:
	action ==> 
	guard bitmapFinishStatus = 0x3FFFFFF end

	Data_endCTU:
	action ==>
	guard bitmapFinishStatus = 0x7FFF
	do
		cntCTUs := cntCTUs + 1;
	end	

/*--------------------- Confuse state ---------------------*/
	p0_goto_p1:
	action ==> guard lastHC5 != 0 end

	p0_checkNextHC_p1_fwd1: //lastfwd
	action in1HeaderControl:[hc], in1NbTokens:[list] repeat 26 ==> 
	guard lastHC5 = 0 and hc = 1 
	do
		headerControl := hc; 
		resetVarsSH(list);
		lastHC5 := 0; //(selectedFWD + 2) mod 3;
	end	

	p0_checkNextHC_p2_fwd0: //nxtfwd
	action in2HeaderControl:[hc], in2NbTokens:[list] repeat 26 ==> 
	guard lastHC5 = 0 and hc <= 1 
	do
		headerControl := hc; 
		resetVarsSH(list);
		lastHC5 := 1; //(selectedFWD + 2) mod 3;
	end
//--
	p1_goto_p2:
	action ==> guard lastHC5 != 1 end	

	p1_checkNextHC_p2_fwd1: //lastfwd
	action in2HeaderControl:[hc], in2NbTokens:[list] repeat 26 ==> 
	guard lastHC5 = 1 and hc = 1 
	do
		headerControl := hc; 
		resetVarsSH(list);
		lastHC5 := 1; //(selectedFWD + 2) mod 3;
	end	
	
	p1_checkNextHC_p0_fwd0: //nxtfwd0
	action in0HeaderControl:[hc], in0NbTokens:[list] repeat 26 ==> 
	guard lastHC5 = 1 and hc <= 1 
	do
		headerControl := hc; 
		resetVarsSH(list);
		lastHC5 := 2; //(selectedFWD + 2) mod 3;
	end
//--	
	p2_goto_p0:
	action ==> guard lastHC5 != 2 end
	
	p2_checkNextHC_p0_fwd1: //lastfwd
	action in0HeaderControl:[hc], in0NbTokens:[list] repeat 26 ==> 
	guard lastHC5 = 2 and hc = 1 
	do
		headerControl := hc; 
		resetVarsSH(list);
		lastHC5 := 2; //(selectedFWD + 2) mod 3;
	end	
	
	p2_checkNextHC_p1_fwd0: //nxtfwd
	action in1HeaderControl:[hc], in1NbTokens:[list] repeat 26 ==> 
	guard lastHC5 = 2 and hc <= 1 
	do
		headerControl := hc; 
		resetVarsSH(list);
		lastHC5 := 0; //(selectedFWD + 2) mod 3;
	end

/*--------------------- FSM ---------------------*/	
	schedule fsm p0_Header_Control:
		p0_Header_Control (p0.Header_Control_Fwd) 	   --> p0_Header_Fwd;
		p0_Header_Control (p0.Header_Control_Eat) 	   --> p0_Header_Eat;
		p0_Header_Control (p0.Header_Control_noHeader) --> p0_Data_Control;
		
		p0_Header_Fwd (p0.Header_Fwd) 				   --> p0_Header_Fwd;
		p0_Header_Fwd (Header_endSH)	   		   	   --> p0_Data_Control;
		
		p0_Header_Eat (p0.Header_Eat) 			   	   --> p0_Header_Eat;
		p0_Header_Eat (Header_endSH)            	   --> p0_Header_Eat_Done;		

		p0_Header_Eat_Done (Header_Eat_Done_HC3)		--> p0_Data_Control;
		p0_Header_Eat_Done (Header_Eat_Done_HC4)    	--> p0_Header_Control;
		p0_Header_Eat_Done (Header_Eat_Done_HC5)    	--> confuse_state0;//p1_Header_Control; 	// Go to P1.

		p0_Data_Control (p0.Data_Control_getNbTokensCTU) --> p0_Data;
		p0_Data_Control (p0.Data_Control_unitEnd) 	     --> p1_Header_Control;	// Go to P1.
		
		p0_Data   (p0.Data)   				--> p0_Data;
		p0_Data   (Data_endCTU)				--> p0_Data_Control;
//------------------------------------------------------------------------//
		p1_Header_Control (p1.Header_Control_Fwd) 	   --> p1_Header_Fwd;
		p1_Header_Control (p1.Header_Control_Eat) 	   --> p1_Header_Eat;
		p1_Header_Control (p1.Header_Control_noHeader) --> p1_Data_Control;
		
		p1_Header_Fwd (p1.Header_Fwd) 				   --> p1_Header_Fwd;
		p1_Header_Fwd (Header_endSH)	   		   	   --> p1_Data_Control;
		
		p1_Header_Eat (p1.Header_Eat)				   --> p1_Header_Eat;
		p1_Header_Eat (Header_endSH)            	   --> p1_Header_Eat_Done;

		p1_Header_Eat_Done (Header_Eat_Done_HC3)		--> p1_Data_Control;
		p1_Header_Eat_Done (Header_Eat_Done_HC4)		--> p1_Header_Control;
		p1_Header_Eat_Done (Header_Eat_Done_HC5)		--> confuse_state1;//p2_Header_Control; 	// Go to P2.

		p1_Data_Control (p1.Data_Control_getNbTokensCTU) --> p1_Data;
		p1_Data_Control (p1.Data_Control_unitEnd) 	     --> p2_Header_Control; // Go to P2.
		
		p1_Data   (p1.Data)   				--> p1_Data;
		p1_Data   (Data_endCTU)				--> p1_Data_Control;
//------------------------------------------------------------------------//
		p2_Header_Control (p2.Header_Control_Fwd) 	   --> p2_Header_Fwd;
		p2_Header_Control (p2.Header_Control_Eat) 	   --> p2_Header_Eat;
		p2_Header_Control (p2.Header_Control_noHeader) --> p2_Data_Control;
		
		p2_Header_Fwd (p2.Header_Fwd) 				   --> p2_Header_Fwd;
		p2_Header_Fwd (Header_endSH)	   		   	   --> p2_Data_Control;
		
		p2_Header_Eat (p2.Header_Eat)				   --> p2_Header_Eat;
		p2_Header_Eat (Header_endSH)            	   --> p2_Header_Eat_Done;

		p2_Header_Eat_Done (Header_Eat_Done_HC3)		--> p2_Data_Control;
		p2_Header_Eat_Done (Header_Eat_Done_HC4)    	--> p2_Header_Control;
		p2_Header_Eat_Done (Header_Eat_Done_HC5)    	--> confuse_state2;//p0_Header_Control; 	// Go to P0.

		p2_Data_Control (p2.Data_Control_getNbTokensCTU) --> p2_Data;
		p2_Data_Control (p2.Data_Control_unitEnd) 	     --> p0_Header_Control; // Go to P0.
		
		p2_Data   (p2.Data)   				--> p2_Data;
		p2_Data   (Data_endCTU)				--> p2_Data_Control;
		
//------------------------------------------------------------------------//

		confuse_state0 (p0_goto_p1) --> p1_Header_Control;
		confuse_state0 (p0_checkNextHC_p1_fwd1) --> p1_Header_Fwd;
		confuse_state0 (p0_checkNextHC_p2_fwd0) --> p2_Header_Fwd;		
		
		confuse_state1 (p1_goto_p2) --> p2_Header_Control;
		confuse_state1 (p1_checkNextHC_p2_fwd1) --> p2_Header_Fwd;
		confuse_state1 (p1_checkNextHC_p0_fwd0) --> p0_Header_Fwd;		

		confuse_state2 (p2_goto_p0) --> p0_Header_Control;
		confuse_state2 (p2_checkNextHC_p0_fwd1) --> p0_Header_Fwd;
		confuse_state2 (p2_checkNextHC_p1_fwd0) --> p1_Header_Fwd;
	end
	
end
