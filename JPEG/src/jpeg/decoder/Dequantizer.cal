/*
 * Copyright (c) 2010, Regents of the Akatech SA, EPFL
 * 
 * All rights reserved.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Akatech SA, EPFL nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE REGENTS AND CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 
package jpeg.decoder;


import jpeg.encoder.common.Tables.inv_zigzag;

actor Dequantizer() 
	int(size=24) Block, uint(size=8) QT, int(size=16) SOI ==> int(size=13) Out:

	List(type:List(type:uint(size=8), size=64), size=2) quant;
	
	int count := 0;
	int comp;

	receive_QT:action QT:[q] repeat 130, SOI:[w, h] ==>
	guard 
		count = 0
	do
		foreach int i in 0 .. 63 do
			quant[0][i] := q[i + 1];
			quant[1][i] := q[i + 66];
		end
		comp := 0;
		count := 6 * (w) * (h);
	end
	
	// Dequant and unzigzag.
	receive_block:action Block:[b] repeat 64 ==> Out:[out] repeat 64
	guard 
		count != 0
	var 
		int compType, 
		int(size=24) out[64]
	do
		compType := comp >> 2;
		foreach int i in 0 .. 63 do 
			out[inv_zigzag[i]] := b[i] * quant[compType][i];
		end
		
		count := count - 1;
	
		comp := (comp + 1) mod 6;
	end
	
	priority
		receive_QT > receive_block;
	end
end
