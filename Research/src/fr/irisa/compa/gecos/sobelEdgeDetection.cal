package fr.irisa.compa.gecos;
import fr.irisa.common.Simulation.*;


@gecos (tile="64",actors="4")
actor sobelEdgeDetection () int(size=32) inArrayAA ==> int(size=32) outArray :



	int N = 512;
	int M = 512;
//	int inArrayA[N*M];
//	int outArrayA[N*M];
////	int inArrayAArrayB[N*M];

//@native procedure custom_memcpy(int inTable[N*M], int addr,	int outTable[N*M]) end
//@native procedure custom_memcpy(int addr) end

	@gecos (inArrayAA="2,512,512", outArray="2,512,512")
	sendData: action inArrayAA:[inArrayA] repeat N*M ==> 
					outArray:[outArrayA] repeat N*M  
	var
		int outArrayA[N*M],
		int tmp_gradientH,
		int tmp_gradientV,
		int tmp_pixelVal
	do
	
//	inArrayA := inArrayAPort;
//	
//	custom_memcpy(inArrayAPort,N*M*4,inArrayA);
//	print_cyclecount();

//	custom_memcpy(N*M);
	
//	foreach int i in 0 .. N-1 do
//		outArray[i*N+0] := 0;
//		outArray[0*N+i] := 0;
//		outArray[i*N+N-1] := 0;
//		outArray[(N-1)*N+i] := 0;
//	end
	   //Applying sobel operator; for each frame; only Y Plane
      foreach int i in 1 .. N-2
      do
		foreach int j in 1 .. M-2
		do
        	tmp_gradientV := (inArrayA[(i-1)*N + (j-1 )] - inArrayA[(i-1)*N + (j+1)] + 2*inArrayA[i*N + (j-1)] - 2*inArrayA [ i*N + (j+1) ] + inArrayA[ (i+1)*N + (j-1)] - inArrayA [ (i+1)*N + (j+1)])/8 ;
        	tmp_gradientH := (inArrayA[(i-1)*N + (j-1)] + 2*inArrayA[(i-1)*N + j] + inArrayA[(i-1)*N + (j+1)] - inArrayA [(i+1)*N + (j-1)] - 2*inArrayA [(i+1)*N + j ]  - inArrayA [(i+1)*N + (j+1)] )/8;
        	tmp_pixelVal := tmp_gradientV + tmp_gradientH;
//        	if ( (pixelVal) < 0 ) then
//				pixelVal := 0;
//			else if (  (pixelVal) >  255 ) then
//				pixelVal := 255;
//			end
//			end
        	outArrayA[( i - 1 )*N + (j- 1 )] := tmp_pixelVal;
          end
      end 
            
//       print_cyclecount();
//            
//      outArrayPort := outArray;
//		custom_memcpy(outArrayA,N*M*4,outArrayAPort);			
	end 

end