package fr.irisa.compa.gecos;
import fr.irisa.common.Simulation.*;

@gecos (tile="128",actors="2")
actor matrixMultiplication () int inputA, int inputB ==> int output :

	int N = 512;
	int M = 512;
//	int inArrayA[N*M];
//	int outArray[N*M];
//	int inArrayB[N*M];

	function max (int a, int b) --> int :
		if ( a > b ) then
			a
		else
			b
		end
	end
	
	function min (int a, int b) --> int :
		if ( a < b ) then
			a
		else
			b
		end
	end


	@gecos (inputA="2,1024,1024",inputB="2,1024,1024",output="2,1024,1024")
	sendData: action inputA:[inArrayA] repeat N*M, inputB:[inArrayB] repeat N*M ==> 
					output:[outArray] repeat N*M  
	var

		int outArray[N*M]
	do
//		inArrayA := inArrayAPort;
//		inArrayB := inArrayBPort;
		/*foreach int i in 0 .. N - 1
		do
			outArray[i] := 0;
			outArray[i*N+0] := 0;
		end */  
		//print_cyclecount();
		
		
		/*foreach  int ii in 0 .. (N -1)/128 
		do
			foreach int jj in 0 .. (N - 1)/128
			do
				foreach int kk in 0 .. (N-1)/128 do
					foreach int i in  128*ii .. max(128*ii+127,N-1) do 
					if ( k = 0 ) then
						outArray[i*N+j] := inArrayA[i*N+k] * inArrayB[k*N+j];
					else
						outArray[i*N+j] := outArray[i*N+j] + inArrayA[i*N+k] * inArrayB[k*N+j];
					end
				end
			end
			print_cyclecount();
		end*/
		
		foreach  int ii in 0 .. (N -1)/64 	do
			foreach int jj in 0 .. (N - 1)/64 do
				foreach int kk in 0 .. (N-1)/64 do
					foreach int i in  64*ii ..   64*ii+63 do //min(64*ii+63,N-1) do
						foreach int j in  64*jj .. 64*jj+63 do //min(64*jj+63,N-1) do
							foreach int k in  64*kk .. 64*kk+63 do //min(64*kk+63,N-1) do 
								//print_cyclecount();
								if ( k = 0 ) then
									outArray[i*N+j] := inArrayA[i*N+k] * inArrayB[k*N+j];
								else
									outArray[i*N+j] := outArray[i*N+j] + inArrayA[i*N+k] * inArrayB[k*N+j];
								end
							end
						end
						//print_cyclecount();
					end
				//	print_cyclecount();
				end
			end
		end  
	 /* foreach  int i in 1 .. N -1 
		do
			foreach int j in 1 .. M - 1
			do
				outArray[j] := outArray[j-1] + 
							outArray[j] + inArray[j];
			end
		end  */
	//	print_cyclecount();
//		
//		outArrayPort := outArray;
		
	end 

end