package fr.irisa.compa.gecos;

@gecos (tile="64",actors="2")
actor hornSchunckCompute () int(size=32) currImage, int(size=32) prevImage ==> int(size=32) normal, 
									int(size=32) Ux, int(size=32) Vy:

	int N = 512;
	int M = 512;
//	int inArrayAArrayA[N*M];
	//int outArrayArray[N*M];
//	int inArrayAArrayB[N*M];
	int numIter = 64;
	int alpha = 10;



	@gecos (currImage="2,512,512", prevImage="2,512,512", normal="2,512,512", Ux="2,512,512", Vy="2,512,512")
	sendData: action currImage:[currFrame] repeat N*M, prevImage:[prevFrame] repeat N*M ==> 
					normal:[tempNormal] repeat N*M, Ux:[tempU] repeat N*M, Vy:[tempV] repeat N*M  
	var
		int tempNormal[N*M],
		int tempU[N*M],
		int tempV[N*M],
		int tempEx[N][M],
		int tempEy[N][M],
		int tempEt[N][M],
		int vbar[N][M],
		int ubar[N][M],
		int x
	do
		foreach int i in 0 .. N-1 do
    		foreach int j in 0 .. M-1 do
        		if ( i = 0 && j = 0 )  then 
            		tempEx[i][j] := -1 * currFrame[i*N+j]/4;
          		else if ( j = 0 ) then
            		tempEx[i][j] := (currFrame[(i-1)*N+j] + currFrame[i*N+j])/4;
        		else if ( i = 0 ) then 
            		tempEx[i][j] := (currFrame[i*N+j] - currFrame[i*N+j-1])/4;
        		else 
            		tempEx[i][j] := (currFrame[(i-1)*N+j] - currFrame[(i-1)*N+j-1] + currFrame[i*N+j] - currFrame[i*N+j-1])/4 + 
                           	(prevFrame[(i-1)*N+j] - prevFrame[(i-1)*N+j-1] + prevFrame[i*N+j] - prevFrame[i*N+j-1])/4;
            		tempEy[i][j] := (currFrame[i*N+j-1] - currFrame[(i-1)*N+j-1] + currFrame[i*N+j] - currFrame[(i-1)*N+j])/4 + 
                           (prevFrame[i*N+j-1] - prevFrame[(i-1)*N+j-1] + prevFrame[i*N+j] - prevFrame[(i-1)*N+j])/4;
            		tempEt[i][j] := (currFrame[i*N+j-1] + currFrame[(i-1)*N+j-1] + currFrame[i*N+j] + currFrame[(i-1)*N+j])/4 -
                           (prevFrame[i*N+j-1] + prevFrame[(i-1)*N+j-1] + prevFrame[i*N+j] + prevFrame[(i-1)*N+j])/4;
        		end
        		end
        		end
        		//TODO: add sqrt function
        		x := (tempEy[i][j]*tempEy[i][j] + tempEx[i][j]*tempEy[i][j]);
        		tempNormal[i*N+j] := tempEt[i][j] + x;
        	end
        end
        
	foreach int i in 0 .. N-1 do
		foreach int j in 0 .. M-1 do
			tempU[i*N+j] := 0;
			tempV[i*N+j] := 0;
		end
	end
        
    foreach int it in 0 .. numIter-1 do
    	foreach int i in 2 .. N-1 do 
    		foreach int j in 2 .. N-1 do 
        		ubar[i][j] := (tempU[(i-2)*N+j-2] + tempU[(i-2)*N+j-1]*2 + tempU[(i-2)*N+j] + 
                     			tempU[(i-1)*N+j-2]*2 + tempU[(i-1)*N+j-1]*0 + tempU[(i-1)*N+j]*2 + 
                     			tempU[i*N+j-2] + tempU[i*N+j-1]*2 + tempU[i*N+j])/12;
        		vbar[i][j] := (tempV[(i-2)*N+j-2] + tempV[(i-2)*N+j-1]*2 + tempV[(i-2)*N+j] + 
                     			tempV[(i-1)*N+j-2]*2 + tempV[(i-1)*N+j-1]*0 + tempV[(i-1)*N+j]*2 + 
                     			tempV[i*N+j-2] + tempV[i*N+j-1]*2 + tempV[i*N+j])/12;
        		tempU[i*N+j] := ubar[i][j] - (tempEx[i][j] * ( tempEx[i][j] * ubar[i][j] + tempEy[i][j] * vbar[i][j] + tempEt[i][j])/
                        				(alpha*alpha+ tempEx[i][j] * tempEx[i][j] + tempEy[i][j] * tempEy[i][j]));
        		tempV[i*N+j] := vbar[i][j] - (tempEy[i][j] * ( tempEx[i][j] * ubar[i][j] + tempEy[i][j] * vbar[i][j] + tempEt[i][j])/
                        (alpha*alpha+ tempEx[i][j] * tempEx[i][j] + tempEy[i][j] * tempEy[i][j]));
			end
		end
	end
	
		
		
	end
end