// MPEG4_algo_Add.cal
//
// Author: David B. Parlour (dave.parlour@xilinx.com)
// Modified by: Christophe Lucarz (christophe.lucarz@epfl.ch)
//
// Copyright (c) 2004-2005 Xilinx Inc.
// All Rights Reserved
//
// Disclaimer:  THIS PROGRAM IS PROVIDED "AS IS" WITH NO WARRANTY 
//              WHATSOEVER AND XILINX SPECIFICALLY DISCLAIMS ANY 
//              IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//              A PARTICULAR PURPOSE, OR AGAINST INFRINGEMENT.
// Add motion and texture to produce pixels

package ch.epfl.mpeg4.part2.motion;

import org.sc29.wg11.mpeg4.part2.Constants.BTYPE_SZ;
import org.sc29.wg11.mpeg4.part2.Constants.ACCODED;
import org.sc29.wg11.mpeg4.part2.Constants.PIX_SZ;

import org.ietr.mpeg4.part2.sp.ConstantsBtype.NEWVOP;
import org.ietr.mpeg4.part2.sp.ConstantsBtype.INTRA;

actor Algo_Add ()
	uint(size=PIX_SZ-1) MOT, int(size=PIX_SZ) TEX, int(size=BTYPE_SZ) BTYPE 
	==> 
	uint(size=PIX_SZ-1) VID :

	cmd.newVop: action BTYPE:[ cmd ] ==>
	guard
		(cmd & NEWVOP) != 0
	end

	// Pure texture
	cmd.textureOnly: action BTYPE:[ cmd ] ==>
	guard
		(cmd & INTRA) != 0
	end

	// Pure motion
	cmd.motionOnly: action BTYPE:[ cmd ] ==>
	guard
		(cmd & ACCODED) = 0
	end

	// Mixed texture and motion
	// (Also used to skip vop w,h)
	cmd.other: action BTYPE:[ cmd ] ==>
	end

	texture: action TEX:[ tex ] repeat 64 ==> VID:[ tex ] repeat 64
	end

	motion: action MOT:[ mot ] repeat 64 ==> VID:[ mot ] repeat 64
	end

	combine: action MOT:[ mot ] repeat 64, TEX:[ tex ] repeat 64 ==> VID:[ [ if tex[i] + mot[i] < 0 then
			0
		else
			if tex[i] + mot[i] > 255 then
				255
			else
				tex[i] + mot[i]
			end
		end : for int i in 0 .. 63 ] ] repeat 64
	end

	schedule fsm cmd :
		cmd ( cmd.newVop ) --> skipw;
		cmd ( cmd.textureOnly ) --> texture;
		cmd ( cmd.motionOnly ) --> motion;
		cmd ( cmd.other ) --> combine;
		texture ( texture ) --> cmd;
		motion ( motion ) --> cmd;
		combine ( combine ) --> cmd;
		skipw (cmd.other) --> skiph;
		skiph (cmd.other) --> cmd;		
	end

	priority
		cmd.newVop > cmd.textureOnly > cmd.motionOnly > cmd.other;
	end

end