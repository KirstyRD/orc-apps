package ch.epfl.mpeg4.part2.texture;

import std.util.Math.*;

actor InverseDCPred16x16 () 
	int(size=12) BTYPE, int(size=13) QFS_in, int(size=6) QP ==>  
	int(size=13) QFS, uint(size=2) AC_PRED_DIR, int POS, bool SKIPPED, int(size=6) QP_OUT, bool SIGNED
:
	int NEWVOP = 2048;
	int INTRA = 1024;
	int INTER = 512;
	int ACCODED = 2;
	int ACPRED = 1;
	
	int MAXW_IN_MB = 120;
	int DC_DEFAULT = 2 << 9;
	
	int(size=32) mbx := 0;
	int(size=32) mby := 0;

	bool top_edge := true;
	bool left_edge;

	int(size=4) comp := 0;

	int(size=8) mbwidth := 0;

	int(size=6) qp;

	int(size=13) dc;
	
	int(size=13) dc_pred;

	int(size=13) a;

	int(size=13) b;

	int(size=13) c;

	bool a_skipped;
	
	bool c_skipped;

	bool is_intra;
		
	bool ac_pred;

	bool coded[2][MAXW_IN_MB][4];

	int(size=13) dc_samples[2][MAXW_IN_MB][4];

	// New VOP
	start: action BTYPE:[ cmd ] ==>
	guard
		(cmd & NEWVOP) != 0
	do
		mbx := 0;
		mby := 0;
		top_edge := true;
		left_edge := true;
		comp := 0;
	end

	getwh: action BTYPE:[ w, h ] ==>
	do
		mbwidth := w;
	end
	
	read.intra: action BTYPE:[ cmd ], QP:[ qpval ] ==>
	do
		qp := qpval;
		is_intra := true;
		coded[mby & 1][mbx][comp] := true;
		ac_pred := (cmd & ACPRED) != 0;
	end

	read.inter_ac: action BTYPE:[ cmd ], QP:[ qpval ] ==>
	guard
		(cmd & INTER) != 0,
		(cmd & ACCODED) != 0
	do
		qp := qpval;
		is_intra := false;
		coded[mby & 1][mbx][comp] := false;
	end
	
	read.other: action BTYPE:[ cmd ], QP:[ qpval ] ==>
	guard
		(cmd & INTRA) = 0
	do
		qp := qpval;
		is_intra := false;
		coded[mby & 1][mbx][comp] := false;
	end
	
	predict.b0: action ==>
	guard
		comp = 0
	do
		a := DC_DEFAULT;
		b := DC_DEFAULT;
		c := DC_DEFAULT;
		if not left_edge then
			a := dc_samples[mby&1][mbx-1][1];
			a_skipped := not coded[mby & 1][mbx-1][1];
			if not coded[mby & 1][mbx-1][1] then
				a := DC_DEFAULT;
			end			
			if not top_edge then
				b := dc_samples[(mby-1)&1][mbx-1][3];
				if not coded[(mby-1)&1][mbx-1][3] then
					b := DC_DEFAULT;
				end
			end
		end

		if not top_edge then
			c := dc_samples[(mby-1)&1][mbx][2];
			c_skipped := not coded[(mby-1)&1][mbx][2];
			
			if not coded[(mby-1) & 1][mbx][2] then
				c := DC_DEFAULT;
			end
		end
	end

	predict.b1: action ==>
	guard
		comp = 1
	do
		a := dc_samples[mby&1][mbx][0];
		a_skipped := not coded[mby&1][mbx][0];
		b := DC_DEFAULT;
		c := DC_DEFAULT;
		if not coded[mby & 1][mbx][0] then
			a := DC_DEFAULT;
		end
		
		if not top_edge then
			b := dc_samples[(mby-1)&1][mbx][2];
			if not coded[(mby-1) & 1][mbx][2] then
				b := DC_DEFAULT;
			end
		end

		if not top_edge then
			c := dc_samples[(mby-1)&1][mbx][3];
			c_skipped := not coded[(mby-1) & 1][mbx][3];
			if not coded[(mby-1) & 1][mbx][3] then
				c := DC_DEFAULT;
			end
		end
	end

	predict.b2: action ==>
	guard
		comp = 2
	do
		a := DC_DEFAULT;
		b := DC_DEFAULT;
		if not left_edge then
			a := dc_samples[mby&1][mbx-1][3];
			a_skipped := not coded[mby&1][mbx-1][3];
			if not coded[mby&1][mbx-1][3] then
				a := DC_DEFAULT;
			end
			
			b := dc_samples[mby&1][mbx-1][1];
			if not coded[mby&1][mbx-1][1] then
				b := DC_DEFAULT;
			end
		end
		c := dc_samples[mby&1][mbx][0];
		c_skipped := not coded[mby&1][mbx][0];
		
		if not coded[mby&1][mbx][0] then
			c := DC_DEFAULT;
		end
	end

	predict.b3: action ==>
	guard
		comp = 3
	do
		a := dc_samples[mby&1][mbx][2];
		a_skipped := not coded[mby&1][mbx][2];
		if not coded[mby&1][mbx][2] then
			a := DC_DEFAULT;
		end
		
		b := dc_samples[mby&1][mbx][0];
		if not coded[mby&1][mbx][0] then
			b := DC_DEFAULT;
		end
		
		c := dc_samples[mby&1][mbx][1];
		c_skipped := not coded[mby&1][mbx][1];

		if not coded[mby&1][mbx][1] then
			c := DC_DEFAULT;
		end
	end

	function dc_scaler() --> int(size=7) :
			if qp > 0 and qp < 5 then
				8
			else
				if qp > 4 and qp < 9 then
					2 * qp
				else
					if qp > 8 and qp < 25 then
						qp + 8
					else
						(2 * qp) - 16
					end
				end
			end
	end

	getdc.intra: action QFS_in:[qfs] repeat 64 ==> QFS:[qfsOut] repeat 64, AC_PRED_DIR:[ac_pred_dir], POS:[mby, mbx, comp], SKIPPED:[skipped], SIGNED:[ false ], QP_OUT:[ qp ]
	guard 
		is_intra
	var
		int(size=7) scaler,
		int(size=13) vert = abs(a - b),
		int(size=13) horiz = abs(c - b),
		bool c_dir = vert < horiz,
		bool skipped,
		int(size=13) ac_pred_dir,
		int(size=13) qfsOut[64] := [qfs[i] :for int i in 0 .. 63]
	do
		dc_pred := if c_dir then c else a end;
		ac_pred_dir := if not ac_pred then 0 else if c_dir then 2 else 1 end end;
		skipped := if c_dir then c_skipped else a_skipped end;
		
		scaler := dc_scaler();
		dc_pred := (dc_pred + (scaler >> 1)) / scaler;
		dc := qfs[0];
		dc := (dc + dc_pred) * scaler;
		dc := clip_i32(dc, -2048, 2047);
		dc_samples[mby&1][mbx][comp] := dc;
		qfsOut[0] := dc;
	end
	
	
	getdc.inter: action QFS_in:[qfs] repeat 64 ==> QFS:[qfsOut] repeat 64, AC_PRED_DIR:[0], POS:[mby, mbx, comp], SKIPPED:[false], SIGNED:[ true ], QP_OUT:[ qp ]
	var	
	int(size=13) dc, int(size=13) v,
	int(size=13) qfsOut[64] := [qfs[i] :for int i in 0 .. 63]
	do
		v := (qp * ((abs(qfs[0]) << 1) + 1)) - ((qp & 1) ^ 1);
		
		dc := 
			if qfs[0] = 0 then
				0
			else
				if qfs[0] < 0 then
					-v
				else
					v
				end
			end;
		dc := clip_i32(dc, -2048, 2047);
		dc_samples[mby&1][mbx][comp] := dc;
		qfsOut[0] := dc;
	end
		
	advance: action ==>
	do
		comp := comp + 1;
		if comp = 4 then
			comp := 0;
			mbx := mbx + 1;
			left_edge := false;
			if mbx = mbwidth then
				mbx := 0;
				mby := mby + 1;
				top_edge := false;
				left_edge := true;
			end
		end
	end
	
	schedule fsm read :
		read ( start ) --> getwh;
		read ( read.intra ) --> predict;
		read ( read.inter_ac ) --> predict;
		read ( read.other ) --> advance;
		getwh(getwh) --> read;
		predict ( predict ) --> get_qfs;
		get_qfs ( getdc ) --> advance;
		advance ( advance ) --> read;
	end

	priority
		start > read;
		read.inter_ac > read.other > read.intra;
		getdc.intra > getdc.inter;
	end
end
