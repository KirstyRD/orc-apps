/*
 * Copyright (c) 2012, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/**
 * This actor is a picture buffer containing all reference pictures. It sends
 *		samples needed for the inter prediction
 * 
 * 
 * @input IsBiPred : Indicates when the current CU is using Bi-prediction.
 * 
 * @input IsReadOrNewSlc : Indicates if samples are asked from the current RPS
 *		or if there is a new picture.
 * 
 * @input Mv : movement vectors of the current CU.
 * 
 * @input PicSize : size of the current picture.
 * 
 * @input Poc : Picture Order Count of the current slice.
 * 
 * @output PocRef : POC used for the prediction of the current CU.
 * 
 * @input PredCuSize : Size of the largest side of the current CU.
 * 
 * @input Sample : Samples from the Inloop filter. It represents the pixels
 * 		which will be displayed.
 * 
 * 
 * @output Sample : Samples needed for the inter prediction.
 * 
 * 
 * @author Damien de Saint Jorre (EPFL) <damien.desaintjorre@epfl.ch>
 */
package org.ietr.mpegh.part2.main.inter;

import std.util.Math.*;
import devel.org.sc29.wg11.mpegh.part2.common.CommonConstantHEVC.*;

import org.ietr.mpegh.part2.main.inter.DecodingPictureBufferFunctions.*;

actor DecodingPictureBufferChroma ()
	uint(size=2)  IsBiPredOrLx,
	uint(size=8)  LcuSizeMax,
	uint(size=1)  IsReadOrNewSlc,
	int (size=32) Mv,
	uint(size=16) PicSize,
	int(size=16)  Poc,
	int (size=16) PocRef,
	uint(size=7)  PredCuSize,
	int (size=16) RpsPoc,
	uint          ReorderPics,
	uint(size=8)  Sample
		==>
	uint(size=8)  RefSample,
	uint(size=8)  VID
		:

	uint(size=8)  pictureBuffer[DPB_SIZE][PICT_HEIGHT/2+2*BORDER_SIZE][PICT_WIDTH/2+2*BORDER_SIZE];
	int (size=16) pocIndex[32];
	int (size=16) pocRef[DPB_SIZE] := [-1 : for int i in 0 .. DPB_SIZE-1];

	uint(size=8)  currIdx := 0;
	uint(size=6)  picSizeInCu[2];
	uint(size=16) picSize[2];
	uint(size=6)  xIdx;
	uint(size=6)  yIdx;
	uint(size=1)  numPocRef := 0;
	uint          pictNum;
	int           numReorderPic;
	int           numAvailablePic := 0;

	bool          isRef[DPB_SIZE];
	bool          isStillRef[DPB_SIZE];
	uint(size=3)  nbList;
	uint(size=3)  sizeOfList;
	
	bool pocDone[32] := [false : for int i in 0 .. 31];
	int sendingPoc := 0;
	int readingPoc := -1;
	uint sendx := 0;
	uint sendy := 0;
	uint(size=8)  lcuSizeMax;
	
	@optimize_c(condition="defined(SSE_ENABLE)", name="getmvinfo_dpb_64_chroma_orcc")
    procedure getmvinfo_dpb_64_chroma_cal(
  	      uint(size= 8) pictureBufferTmp[DPB_SIZE][PICT_HEIGHT / 2 + 2 * BORDER_SIZE][PICT_WIDTH / 2 + 2 * BORDER_SIZE],
  	      uint(size= 8) RefCu[(32 + 3) * (32 + 3)],
  	      uint(size= 3) idx,
  	      uint(size= 8) sideMax, 
  	      int (size=32) xOffset,
  	      int (size=32) yOffset)
    begin
      foreach int y in 0 .. sideMax - 1
		do
			foreach int x in 0 .. sideMax - 1
			do
				RefCu[x+y*(sideMax)] := pictureBuffer[idx][y+yOffset][x+xOffset];
			end
		end
    end
  
    @optimize_c(condition="defined(SSE_ENABLE)", name="getmvinfo_dpb_32_chroma_orcc")
    procedure getmvinfo_dpb_32_chroma_cal(
  	      uint(size= 8) pictureBufferTmp[DPB_SIZE][PICT_HEIGHT / 2 + 2 * BORDER_SIZE][PICT_WIDTH / 2 + 2 * BORDER_SIZE],
  	      uint(size= 8) RefCu[(16 + 3) * (16 + 3)],
  	      uint(size= 3) idx,
  	      uint(size= 8) sideMax, 
  	      int (size=32) xOffset,
  	      int (size=32) yOffset)
    begin
      foreach int y in 0 .. sideMax - 1
		do
			foreach int x in 0 .. sideMax - 1
			do
				RefCu[x+y*(sideMax)] := pictureBuffer[idx][y+yOffset][x+xOffset];
			end
		end
    end
  
    @optimize_c(condition="defined(SSE_ENABLE)", name="getmvinfo_dpb_16_chroma_orcc")
    procedure getmvinfo_dpb_16_chroma_cal(
  	      uint(size= 8) pictureBufferTmp[DPB_SIZE][PICT_HEIGHT / 2 + 2 * BORDER_SIZE][PICT_WIDTH / 2 + 2 * BORDER_SIZE],
  	      uint(size= 8) RefCu[(8 + 3) * (8 + 3)],
  	      uint(size= 3) idx,
  	      uint(size= 8) sideMax, 
  	      int (size=32) xOffset,
  	      int (size=32) yOffset)
    begin
		foreach int y in 0 .. sideMax - 1
		do
			foreach int x in 0 .. sideMax - 1
			do
				RefCu[x+y*(sideMax)] := pictureBuffer[idx][y+yOffset][x+xOffset];
			end
		end
    end
	
	/** Getting informations from new slice/picture. Updating these informations **/
	isNewSlice: action IsReadOrNewSlc:[isRead], PicSize:[picWidthInPix,
		picHeightInPix], Poc:[poc], LcuSizeMax:[log2LcuSize] ==>
	guard
		/* Fix me : We should know when there is a new picture */
		isRead = 0,
		poc = readingPoc
	do	
		lcuSizeMax := 1 << log2LcuSize;
		isStillRef := [false: for int i in 0 .. DPB_SIZE - 1];
		nbList := 0;
	end
	
	isNewPict: action IsReadOrNewSlc:[isRead], PicSize:[picWidthInPix,
					  picHeightInPix], Poc:[poc], ReorderPics:[noOutputOfPriorPicsFlag, spsNumReorderPics, picOutputFlag] 
					  ,LcuSizeMax:[log2LcuSize] ==>
	guard
		isRead = 0,
		poc != readingPoc
	do
		lcuSizeMax := 1 << log2LcuSize;
//		println("Dpb ; Pict num "+pictNum);
		pictNum := pictNum + 1;
		picSizeInCu[0] := (picWidthInPix+lcuSizeMax-1)/lcuSizeMax;
		picSizeInCu[1] := (picHeightInPix+lcuSizeMax-1)/lcuSizeMax;
		picSize[0] := picWidthInPix;
		picSize[1] := picHeightInPix;
		xIdx := 0;
		yIdx := 0;
		readingPoc := poc;
		isStillRef := [false: for int i in 0 .. DPB_SIZE - 1];
		nbList := 0;
		
		pocIndex[readingPoc & 31] := currIdx;
		pocRef[currIdx] := readingPoc;
		
		if noOutputOfPriorPicsFlag = 1 then
			// Flush the queue of next displayed frames
			sendingPoc := poc;
			numAvailablePic := 0;
		end
		
		// Number of frames needed to display 
		numReorderPic := spsNumReorderPics;
		
		// Always display the frame with the smallest poc
		if readingPoc < sendingPoc then 
			sendingPoc := readingPoc;
		end
	end
	
	/** We get all the references from the 5 lists of the Rps
	 * (StCurrentBefore, StCurrentAfter, StFollowing, LtCurrent, LtFollowing)
	 **/
	getRps.launch: action RpsPoc:[numPic]==>
	guard
		nbList < 5
	do
		sizeOfList := numPic;
	end

	getRps.done: action ==>
	guard
		nbList = 5
	do
		/* We remove from the Dpb all the pictures who are not in the Rps of
		 * the current picture
		 */
		foreach int i in 0 .. DPB_SIZE - 1
		do
			isRef[i] := isRef[i] and isStillRef[i];
		end
		isRef[currIdx]:= true;
	end

	/** For each we check the index of the reference poc
	 * (in order to not remove them from the Dpb).
	 **/
	getRpsPoc.launch: action RpsPoc:[pocVal] ==>
	guard
		sizeOfList > 0
	do
		foreach int i in 0 .. DPB_SIZE - 1
		do
			if(pocRef[i] = pocVal)then
				isStillRef[i] := true;
			end
		end

		sizeOfList := sizeOfList - 1;
	end

	getRpsPoc.done: action ==>
	guard
		sizeOfList = 0
	do
		nbList := nbList + 1;
	end

	/* We get the whole Cu decoded (luma and chroma components) and we save
	 * it in the Dpb (pictureBuffer).
	 */
	getCuPix.launch.x64: action Sample:[samp] repeat 32*32 ==>
	guard
		yIdx < picSizeInCu[1], lcuSizeMax = 64
	var
		int xPixIdx,
		int yPixIdx
	do
		xPixIdx := (BORDER_SIZE + xIdx*64)>>1;
		yPixIdx := (BORDER_SIZE + yIdx*64)>>1;
		
		copy_cu_dpb_chroma_cal(
          samp,
  	      pictureBuffer,
  	      xPixIdx,
  	      yPixIdx,
  	      pocIndex[readingPoc & 31]);
		
		xIdx := xIdx + 1;
		if(xIdx = picSizeInCu[0]) then
			xIdx := 0;
			yIdx := yIdx + 1;
		end
	end
	
	getCuPix.launch.x32: action Sample:[samp] repeat 16*16 ==>
	guard
		yIdx < picSizeInCu[1], lcuSizeMax = 32
	var
		int xPixIdx,
		int yPixIdx
	do
		xPixIdx := (BORDER_SIZE + xIdx*32)>>1;
		yPixIdx := (BORDER_SIZE + yIdx*32)>>1;
		
		copy_cu_dpb_chroma_cal(
          samp,
  	      pictureBuffer,
  	      xPixIdx,
  	      yPixIdx,
  	      pocIndex[readingPoc & 31]);
		
		xIdx := xIdx + 1;
		if(xIdx = picSizeInCu[0]) then
			xIdx := 0;
			yIdx := yIdx + 1;
		end
	end
	
	getCuPix.launch.x16: action Sample:[samp] repeat 8*8 ==>
	guard
		yIdx < picSizeInCu[1], lcuSizeMax = 16
	var
		int xPixIdx,
		int yPixIdx
	do
		xPixIdx := (BORDER_SIZE + xIdx*16)>>1;
		yPixIdx := (BORDER_SIZE + yIdx*16)>>1;
		
		copy_cu_dpb_chroma_cal(
          samp,
  	      pictureBuffer,
  	      xPixIdx,
  	      yPixIdx,
  	      pocIndex[readingPoc & 31]);
		
		xIdx := xIdx + 1;
		if(xIdx = picSizeInCu[0]) then
			xIdx := 0;
			yIdx := yIdx + 1;
		end
	end
	
	getCuPix.done: action ==>
	guard
		yIdx = picSizeInCu[1]
	var
		int xSize := picSize[0],
		int ySize := picSize[1]
	do
		/* Fill in chroma border */
		fillBorder_chroma_cal(
			pictureBuffer,
			pocIndex[readingPoc & 31],
			xSize / 2,
			ySize / 2,
			BORDER_SIZE / 2);
		
		pocDone[readingPoc & 31] := true;
		numAvailablePic := numAvailablePic + 1;
		
		// Find the next available buffer
		while isRef[currIdx] do
			currIdx := currIdx + 1;
			if currIdx = DPB_SIZE then currIdx := 0; end
		end
		
		if pocRef[currIdx] != -1 then
			pocDone[pocRef[currIdx] & 31] := false;
		end
	end
	
	sendCuPix.launch.x64: action ==> VID:[CU] repeat 32*32
	guard
		sendy < picSizeInCu[1],
		pocDone[sendingPoc & 31],
		numAvailablePic >= numReorderPic,
		lcuSizeMax = 64
	var
		uint (size=8) CU[32*32]
	do
		foreach int i in 0 .. 31 do	
			foreach int j in 0 .. 31 do
				CU[i*32 + j] := pictureBuffer[pocIndex[sendingPoc & 31]][((BORDER_SIZE + sendy * 64) >> 1 )+ i][((BORDER_SIZE + sendx * 64) >> 1 ) + j];
			end
		end
			
		sendx := sendx + 1;
		if(sendx = picSizeInCu[0]) then
			sendx := 0;
			sendy := sendy + 1;
		end
	end
	
	sendCuPix.launch.x32: action ==> VID:[CU] repeat 16*16
	guard
		sendy < picSizeInCu[1],
		pocDone[sendingPoc & 31],
		numAvailablePic >= numReorderPic,
		lcuSizeMax = 32
	var
		uint (size=8) CU[16*16]
	do
		foreach int i in 0 .. 15 do	
			foreach int j in 0 .. 15 do
				CU[i*16 + j] := pictureBuffer[pocIndex[sendingPoc & 31]][((BORDER_SIZE + sendy * 32) >> 1 )+ i][((BORDER_SIZE + sendx * 32) >> 1 ) + j];
			end
		end
			
		sendx := sendx + 1;
		if(sendx = picSizeInCu[0]) then
			sendx := 0;
			sendy := sendy + 1;
		end
	end
	
	sendCuPix.launch.x16: action ==> VID:[CU] repeat 8*8
	guard
		sendy < picSizeInCu[1],
		pocDone[sendingPoc & 31],
		numAvailablePic >= numReorderPic,
		lcuSizeMax = 16
	var
		uint (size=8) CU[8*8]
	do
		foreach int i in 0 .. 7 do	
			foreach int j in 0 .. 7 do
				CU[i*8 + j] := pictureBuffer[pocIndex[sendingPoc & 31]][((BORDER_SIZE + sendy * 16) >> 1 )+ i][((BORDER_SIZE + sendx * 16) >> 1 ) + j];
			end
		end
			
		sendx := sendx + 1;
		if(sendx = picSizeInCu[0]) then
			sendx := 0;
			sendy := sendy + 1;
		end
	end
	
	sendCuPix.done: action ==>
	guard
		sendy = picSizeInCu[1],
		pocDone[sendingPoc & 31]
	do
		sendx := 0;
		sendy := 0;
		sendingPoc := sendingPoc + 1;
		numAvailablePic := numAvailablePic - 1;
	end

	getReadAddr: action IsReadOrNewSlc:[isRead], IsBiPredOrLx:[isBiPredOrLx] ==>
	guard
		isRead = 1,
		numPocRef = 0
	do
		numPocRef :=
			if(isBiPredOrLx = BI_PRED) then
				2
			else
				1
			end;
	end

	/* We get all the informations needed for sending the reference Cu. We save
	 * these samples in refCu, it will be sent with the actions sendCu.isYxY
	 */
	getMvInfo.launch.is64: action PocRef:[poc], PredCuSize:[predCuSize],
		Mv:[mvX, mvY] ==> RefSample:[refCu] repeat (32+3)*(32+3)
	guard
		numPocRef != 0 && predCuSize = 64,
		pocDone[poc & 31]
	var
		int idx := pocIndex[poc & 31],
		int (size=32) xOffset,
		int (size=32) yOffset,
		uint(size=7)  sideMax = 64,
		uint(size=8)  refCu[(32+3)*(32+3)]
	do


		/* We remove 1 for each coordinate component, because for the chroma
		 * prediction we need the previous pixel
		 */
		xOffset := (mvX >> 3);
		xOffset := min(xOffset, picSize[0]/2+1);
		xOffset := max(xOffset, -(4 +1 -1) -(sideMax/2-1));
		xOffset := xOffset +BORDER_SIZE/2-1;
		yOffset := (mvY >> 3);
		yOffset := min(yOffset, picSize[1]/2+1);
		yOffset := max(yOffset, -(4 +1 -1) -(sideMax/2-1));
		yOffset := yOffset +BORDER_SIZE/2-1;
		/* We also need the 2 next pixels for the prediction, that's why we
		 * add 3 to sideMax
		 */
		
		getmvinfo_dpb_64_chroma_cal(
  	      pictureBuffer,
  	      refCu,
  	      idx, 
  	      sideMax / 2 + 3, 
  	      xOffset,
  	      yOffset);
		numPocRef := numPocRef - 1;
	end
	
	getMvInfo.launch.is32: action PocRef:[poc], PredCuSize:[predCuSize],
		Mv:[mvX, mvY] ==> RefSample:[refCu] repeat (16+3)*(16+3)
	guard
		numPocRef != 0 && predCuSize = 32,
		pocDone[poc & 31]
	var
		int idx := pocIndex[poc & 31],
		int (size=32) xOffset,
		int (size=32) yOffset,
		uint(size=7)  sideMax = 32,
		uint(size=8)  refCu[(16+3)*(16+3)]
	do

		/* We remove 1 for each coordinate component, because for the chroma
		 * prediction we need the previous pixel
		 */
		xOffset := (mvX >> 3);
		xOffset := min(xOffset, picSize[0]/2+1);
		xOffset := max(xOffset, -(4 +1 -1) -(sideMax/2-1));
		xOffset := xOffset +BORDER_SIZE/2-1;
		yOffset := (mvY >> 3);
		yOffset := min(yOffset, picSize[1]/2+1);
		yOffset := max(yOffset, -(4 +1 -1) -(sideMax/2-1));
		yOffset := yOffset +BORDER_SIZE/2-1;
		/* We also need the 2 next pixels for the prediction, that's why we
		 * add 3 to sideMax
		 */
		
		getmvinfo_dpb_32_chroma_cal(
  	      pictureBuffer,
  	      refCu,
  	      idx, 
  	      sideMax / 2 + 3, 
  	      xOffset,
  	      yOffset);
		numPocRef := numPocRef - 1;
	end
	
	getMvInfo.launch.is16: action PocRef:[poc], PredCuSize:[predCuSize],
		Mv:[mvX, mvY] ==> RefSample:[refCu] repeat (8+3)*(8+3)
	guard
		numPocRef != 0 && predCuSize = 16,
		pocDone[poc & 31]
	var
		int idx := pocIndex[poc & 31],
		int (size=32) xOffset,
		int (size=32) yOffset,
		uint(size=7)  sideMax = 16,
		uint(size=8)  refCu[(8+3)*(8+3)]
	do

		/* We remove 1 for each coordinate component, because for the chroma
		 * prediction we need the previous pixel
		 */
		xOffset := (mvX >> 3);
		xOffset := min(xOffset, picSize[0]/2+1);
		xOffset := max(xOffset, -(4 +1 -1) -(sideMax/2-1));
		xOffset := xOffset +BORDER_SIZE/2-1;
		yOffset := (mvY >> 3);
		yOffset := min(yOffset, picSize[1]/2+1);
		yOffset := max(yOffset, -(4 +1 -1) -(sideMax/2-1));
		yOffset := yOffset +BORDER_SIZE/2-1;
		/* We also need the 2 next pixels for the prediction, that's why we
		 * add 3 to sideMax
		 */
		
		getmvinfo_dpb_16_chroma_cal(
  	      pictureBuffer,
  	      refCu,
  	      idx, 
  	      sideMax / 2 + 3, 
  	      xOffset,
  	      yOffset);
		numPocRef := numPocRef - 1;
	end
	
	getMvInfo.launch.is8: action PocRef:[poc], PredCuSize:[predCuSize],
		Mv:[mvX, mvY] ==> RefSample:[refCu] repeat(4+3)*(4+3)
	guard
		numPocRef != 0 && predCuSize = 8,
		pocDone[poc & 31]
	var
		int idx := pocIndex[poc & 31],
		int (size=32) xOffset,
		int (size=32) yOffset,
		uint(size=7)  sideMax = 8,
		uint(size=8)  refCu[(4+3)*(4+3)]
	do

		/* We remove 1 for each coordinate component, because for the chroma
		 * prediction we need the previous pixel
		 */
		xOffset := (mvX >> 3);
		xOffset := min(xOffset, picSize[0]/2+1);
		xOffset := max(xOffset, -(4 +1 -1) -(sideMax/2-1));
		xOffset := xOffset +BORDER_SIZE/2-1;
		yOffset := (mvY >> 3);
		yOffset := min(yOffset, picSize[1]/2+1);
		yOffset := max(yOffset, -(4 +1 -1) -(sideMax/2-1));
		yOffset := yOffset +BORDER_SIZE/2-1;
		/* We also need the 2 next pixels for the prediction, that's why we
		 * add 3 to sideMax
		 */
		
		foreach int y in 0 .. sideMax/2+3 -1
		do
			foreach int x in 0 .. sideMax/2+3 -1
			do
				refCu[x+y*(sideMax/2+3)] := pictureBuffer[idx][y+yOffset][x+xOffset];
			end
		end
		numPocRef := numPocRef - 1;
	end
	
	getMvInfo.launch.is4: action PocRef:[poc], PredCuSize:[predCuSize],
		Mv:[mvX, mvY] ==> RefSample:[refCu] repeat (2+3)*(2+3)
	guard
		numPocRef != 0 && predCuSize = 4,
		pocDone[poc & 31]
	var
		int idx := pocIndex[poc & 31],
		int (size=32) xOffset,
		int (size=32) yOffset,
		uint(size=7)  sideMax = 4,
		uint(size=8)  refCu[(2+3)*(2+3)]
	do

		/* We remove 1 for each coordinate component, because for the chroma
		 * prediction we need the previous pixel
		 */
		xOffset := (mvX >> 3);
		xOffset := min(xOffset, picSize[0]/2+1);
		xOffset := max(xOffset, -(4 +1 -1) -(sideMax/2-1));
		xOffset := xOffset +BORDER_SIZE/2-1;
		yOffset := (mvY >> 3);
		yOffset := min(yOffset, picSize[1]/2+1);
		yOffset := max(yOffset, -(4 +1 -1) -(sideMax/2-1));
		yOffset := yOffset +BORDER_SIZE/2-1;
		/* We also need the 2 next pixels for the prediction, that's why we
		 * add 3 to sideMax
		 */
		
		foreach int y in 0 .. sideMax/2+3 -1
		do
			foreach int x in 0 .. sideMax/2+3 -1
			do
				refCu[x+y*(sideMax/2+3)] := pictureBuffer[idx][y+yOffset][x+xOffset];
			end
		end
		numPocRef := numPocRef - 1;
	end
	
	getMvInfo.done: action ==>
	guard
		numPocRef = 0
	end

	schedule fsm IsNewPict:
		IsNewPict (isNewPict        )--> GetRps;

		ManageCu (isNewSlice        )--> GetRps;
		ManageCu (getReadAddr       )--> GetMvInfo;
		ManageCu (getCuPix.launch   )--> ManageCu;
		ManageCu (getCuPix.done     )--> IsNewPict;
		ManageCu (sendCuPix.launch  )--> ManageCu;
		ManageCu (sendCuPix.done    )--> ManageCu;
		
		GetMvInfo (getMvInfo.launch )--> GetMvInfo;
		GetMvInfo (getMvInfo.done   )--> ManageCu;
		
		GetRps (getRps.launch )--> GetRpsPoc;
		GetRps (getRps.done   )--> ManageCu;
		GetRpsPoc (getRpsPoc.launch )--> GetRpsPoc;
		GetRpsPoc (getRpsPoc.done   )--> GetRps;
	end
	
	priority 
		sendCuPix > getReadAddr > isNewSlice > getCuPix;
		sendCuPix.launch > sendCuPix.done;
		getCuPix.launch > getCuPix.done;
	end
end
