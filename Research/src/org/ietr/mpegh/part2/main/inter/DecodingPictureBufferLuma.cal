/*
 * Copyright (c) 2012, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/**
 * This actor is a picture buffer containing all reference pictures. It sends
 *		samples needed for the inter prediction
 * 
 * 
 * @input IsBiPred : Indicates when the current CU is using Bi-prediction.
 * 
 * @input IsReadOrNewSlc : Indicates if samples are asked from the current RPS
 *		or if there is a new picture.
 * 
 * @input Mv : movement vectors of the current CU.
 * 
 * @input PicSize : size of the current picture.
 * 
 * @input Poc : Picture Order Count of the current slice.
 * 
 * @output PocRef : POC used for the prediction of the current CU.
 * 
 * @input PredCuSize : Size of the largest side of the current CU.
 * 
 * @input Sample : Samples from the Inloop filter. It represents the pixels
 * 		which will be displayed.
 * 
 * 
 * @output Sample : Samples needed for the inter prediction.
 * 
 * 
 * @author Damien de Saint Jorre (EPFL) <damien.desaintjorre@epfl.ch>
 */
package org.ietr.mpegh.part2.main.inter;

import std.util.Math.*;
import devel.org.sc29.wg11.mpegh.part2.common.CommonConstantHEVC.*;

import org.ietr.mpegh.part2.main.inter.DecodingPictureBufferFunctions.*;
//@DEBUG
actor DecodingPictureBufferLuma ()
	uint(size=2)  IsBiPredOrLx,
	uint(size=1)  IsReadOrNewSlc,
	int (size=32) Mv,
	uint(size=16) PicSize,
	int(size=16)  Poc,
	int (size=16) PocRef,
	uint(size=7)  PredCuSize,
	int (size=16) RpsPoc,
	uint(size=8)  Sample,
	uint(size=2)  IsBiPredOrLx2,
	uint(size=1)  IsReadOrNewSlc2,
	int (size=32) Mv2,
	uint(size=16) PicSize2,
	int(size=16)  Poc2,
	int (size=16) PocRef2,
	uint(size=7)  PredCuSize2,
	int (size=16) RpsPoc2,
	uint(size=8)  Sample2
		==>
	uint(size=8)  RefSample,
	uint(size=8)  VID,
	uint(size=8)  RefSample2
		:


	/* /!\ : Check the size of the border. */
	/* Same values have to be used in DecodingPictureBufferFunctions ! */
	uint(size = 16) BORDER_SIZE = 128;
	uint(size = 8) DPB_SIZE = 17;

	uint(size=8)  pictureBuffer[DPB_SIZE][PICT_HEIGHT+2*BORDER_SIZE][PICT_WIDTH+2*BORDER_SIZE];
	int (size=16) pocRef[DPB_SIZE];
	bool          isRef[DPB_SIZE];
	bool          isStillRef[DPB_SIZE];
	bool pocDone[1000] := [false : for int i in 0 .. 16];
	uint pocToIndex[1000] := [0 : for int i in 0 .. 16];
	uint currentPoc := 0;	

	int (size=4)  currIdx := -1;
	int (size=4)  lastIdx := -1;
	uint(size=6)  picSizeInCu[2];
	uint(size=16) picSize[2];
	uint(size=6)  xIdx;
	uint(size=6)  yIdx;
	uint(size=1)  numPocRef;
	uint(size=3)  nbList;
	uint(size=3)  sizeOfList;
	bool          isNewPicture;
	uint pictNum;
	int idx := 0;
	uint sendx := 0;
	uint sendy := 0;
	
	int (size=4)  currIdx2 := -1;
	int (size=4)  lastIdx2 := -1;
	uint(size=6)  picSizeInCu2[2];
	uint(size=16) picSize2[2];
	uint(size=6)  xIdx2;
	uint(size=6)  yIdx2;
	uint(size=1)  numPocRef2;
	uint(size=3)  nbList2;
	uint(size=3)  sizeOfList2;
	bool          isNewPicture2;
	uint pictNum2;
	int idx2 := 0;
	uint sendx2 := 0;
	uint sendy2 := 0;
	
	@optimize_c(condition="defined(SSE_ENABLE)", name="getmvinfo_dpb_64_luma_orcc")
    procedure getmvinfo_dpb_64_luma_cal(
  	      uint(size= 8) pictureBufferTmp[DPB_SIZE][PICT_HEIGHT+2*BORDER_SIZE][PICT_WIDTH+2*BORDER_SIZE],
  	      uint(size= 8) RefCu[(64 + 7) * (64 + 7)],
  	      uint(size= 3) idx,
  	      uint(size= 8) sideMax, 
  	      int (size=32) xOffset,
  	      int (size=32) yOffset)
    begin
      foreach int y in 0 .. sideMax - 1
	  	do
			foreach int x in 0 .. sideMax - 1
			do
				RefCu[x+y*(sideMax)] := pictureBuffer[idx][y+yOffset][x+xOffset];
			end
		end
    end
  
    @optimize_c(condition="defined(SSE_ENABLE)", name="getmvinfo_dpb_32_luma_orcc")
    procedure getmvinfo_dpb_32_luma_cal(
  	      uint(size= 8) pictureBufferTmp[DPB_SIZE][PICT_HEIGHT+2*BORDER_SIZE][PICT_WIDTH+2*BORDER_SIZE],
  	      uint(size= 8) RefCu[(32 + 7) * (32 + 7)],
  	      uint(size= 3) idx,
  	      uint(size= 8) sideMax, 
  	      int (size=32) xOffset,
  	      int (size=32) yOffset)
    begin
      foreach int y in 0 .. sideMax - 1
		do
			foreach int x in 0 .. sideMax - 1
			do
				RefCu[x+y*(sideMax)] := pictureBuffer[idx][y+yOffset][x+xOffset];
			end
		end
    end
  
    @optimize_c(condition="defined(SSE_ENABLE)", name="getmvinfo_dpb_16_luma_orcc")
    procedure getmvinfo_dpb_16_luma_cal(
  	      uint(size= 8) pictureBufferTmp[DPB_SIZE][PICT_HEIGHT+2*BORDER_SIZE][PICT_WIDTH+2*BORDER_SIZE],
  	      uint(size= 8) RefCu[(16 + 7) * (16 + 7)],
  	      uint(size= 3) idx,
  	      uint(size= 8) sideMax, 
  	      int (size=32) xOffset,
  	      int (size=32) yOffset)
    begin
      foreach int y in 0 .. sideMax - 1
		do
			foreach int x in 0 .. sideMax - 1
			do
				RefCu[x+y*(sideMax)] := pictureBuffer[idx][y+yOffset][x+xOffset];
			end
		end
    end
  
    @optimize_c(condition="defined(SSE_ENABLE)", name="getmvinfo_dpb_8_luma_orcc")
    procedure getmvinfo_dpb_8_luma_cal(
  	      uint(size= 8) pictureBufferTmp[DPB_SIZE][PICT_HEIGHT+2*BORDER_SIZE][PICT_WIDTH+2*BORDER_SIZE],
  	      uint(size= 8) RefCu[(8 + 7) * (8 + 7)],
  	      uint(size= 3) idx,
  	      uint(size= 8) sideMax, 
  	      int (size=32) xOffset,
  	      int (size=32) yOffset)
    begin
    foreach int y in 0 .. sideMax - 1
		do
			foreach int x in 0 .. sideMax - 1
			do
				RefCu[x+y*(sideMax)] := pictureBuffer[idx][y+yOffset][x+xOffset];
			end
		end
    end
	
	/** Getting informations from new slice/picture. Updating these informations **/
	action IsReadOrNewSlc:[isRead], PicSize:[picWidthInPix,
		picHeightInPix], Poc:[poc] ==>
	guard
		/* Fix me : We should know when there is a new picture */
		idx = 3, isRead = 0 and if(currIdx = -1) then false else poc = pocRef[currIdx]end
	do
		isNewPicture := false;
		nbList := 0;
		isStillRef := [false: for int i in 0 .. DPB_SIZE - 1];
		idx := 4;
	end
	
	action IsReadOrNewSlc:[isRead], PicSize:[picWidthInPix,
		picHeightInPix], Poc:[poc] ==>
	guard
		(idx = 0 or idx = 3), isRead = 0 and not(if(currIdx = -1) then false else poc = pocRef[currIdx]end)
	do
//		println("Dpb ; Pict num "+pictNum);
		pictNum := pictNum + 1;
		picSizeInCu[0] := (picWidthInPix+15)/16;
		picSizeInCu[1] := (picHeightInPix+15)/16;
		picSize[0] := picWidthInPix;
		picSize[1] := picHeightInPix;
		xIdx := 0;
		yIdx := 0;
		lastIdx := currIdx;
		foreach uint i in 0 .. DPB_SIZE - 1
		do
			if(not isRef[i]) then
				currIdx := i;
			end
		end
		isRef[currIdx]  := true;
		pocRef[currIdx] := poc;
		isNewPicture    := true;
		nbList          := 0;
		isStillRef := [false: for int i in 0 .. DPB_SIZE - 1];
		
		if idx = 0 then
			idx := 1;
		else
			idx := 4;
		end
	end

	/** We get all the references from the 5 lists of the Rps
	 * (StCurrentBefore, StCurrentAfter, StFollowing, LtCurrent, LtFollowing)
	 **/
	action RpsPoc:[numPic]==>
	guard
		(idx = 1 or idx = 4), nbList < 5
	do
		sizeOfList := numPic;
		
		if idx = 1 then
			idx := 2;
		else
			idx := 5;
		end
	end

	action ==>
	guard
		(idx = 1 or idx = 4), nbList = 5
	do
		/* We remove from the Dpb all the pictures who are not in the Rps of
		 * the current picture
		 */
		foreach int i in 0 .. DPB_SIZE - 1
		do
			isRef[i] := isRef[i] and isStillRef[i];
		end
		isRef[currIdx] := true;
		
		if idx = 1 then
			idx := 3;
		else
			idx := 6;
		end
	end

	/** For each we check the index of the reference poc
	 * (in order to not remove them from the Dpb).
	 **/
	action RpsPoc:[pocVal] ==>
	guard
		(idx = 2 or idx = 5), sizeOfList > 0
	do
		sizeOfList := sizeOfList - 1;
		foreach int i in 0 .. DPB_SIZE - 1
		do
			if(pocRef[i] = pocVal)then
				isStillRef[i] := true;
			end
		end
	end

	action ==>
	guard
		(idx = 2 or idx = 5), sizeOfList = 0
	do
		nbList := nbList + 1;
		if idx = 2 then
			idx := 1;
		else
			idx := 4;
		end
	end

	/* We get the whole Cu decoded (luma and chroma components) and we save
	 * it in the Dpb (pictureBuffer).
	 */
	action Sample:[samp] repeat 16*16 ==>
	guard
		idx = 7, yIdx < picSizeInCu[1]
	var
		int xPixIdx,
		int yPixIdx
	do
		xPixIdx := BORDER_SIZE + xIdx*16;
		yPixIdx := BORDER_SIZE + yIdx*16;
		
		copy_cu_dpb_luma_cal(
          samp,
  	      pictureBuffer,
  	      xPixIdx,
  	      yPixIdx,
  	      lastIdx);
  	    
		xIdx := xIdx + 1;
		if(xIdx = picSizeInCu[0]) then
			xIdx := 0;
			yIdx := yIdx + 1;
		end
	end

	/* When we get the picture we add the border (in order to be able to give a
	 * reference pixels which can be outside of the picture).
	 */
	
	action ==> VID:[CU] repeat 16*16
	guard
		idx = 3,
		sendy < picSizeInCu[1],
		pocDone[currentPoc] = true
	var
		uint (size=8) CU[16*16]
	do
		foreach int i in 0 .. 15 do	
			foreach int j in 0 .. 15 do
				CU[i*16 + j] := pictureBuffer[pocToIndex[currentPoc]][BORDER_SIZE + sendy * 16 + i ][BORDER_SIZE + sendx * 16 + j];
			end
		end
			
		sendx := sendx + 1;
		if(sendx = picSizeInCu[0]) then
			sendx := 0;
			sendy := sendy + 1;
		end
	end
	
	action ==>
	guard
		idx = 3,
		sendy = picSizeInCu[1],
		pocDone[currentPoc] = true
	do
		sendx := 0;
		sendy := 0;
		pocDone[currentPoc] := false;
		currentPoc := currentPoc + 1;
		
	end
	
	action ==>
	guard
		idx = 7, yIdx = picSizeInCu[1]
	var
		int xSize := picSize[0],
		int ySize := picSize[1]
	do
		/* Fill in luma border */
		fillBorder_luma_cal(
			pictureBuffer,
			lastIdx,
			xSize,
			ySize,
			BORDER_SIZE);
			
			pocDone[pocRef[lastIdx]] := true;
			pocToIndex[pocRef[lastIdx]] := lastIdx;
		if pocRef[lastIdx] < currentPoc then
				currentPoc := 0;
		end
		idx := 3;
	end

	action IsReadOrNewSlc:[isRead], IsBiPredOrLx:[isBiPredOrLx] ==>
	guard
		idx = 3, isRead = 1
	do
		numPocRef :=
			if(isBiPredOrLx = BI_PRED) then
				2
			else
				1
			end;
		idx := 8;
	end

	/* We get all the informations needed for sending the reference Cu. We save
	 * these samples in RefCu, it will be sent with the actions sendCu.isYxY
	 */
	action PocRef:[poc], PredCuSize:[predCuSize],
		Mv:[mvX, mvY] ==> RefSample:[RefCu] repeat (64+7)*(64+7)
	guard
		idx = 8, numPocRef != 0 && predCuSize = 64
	var
		uint(size=3) idx := 0,
		int (size=32) xOffset,
		int (size=32) yOffset,
		uint(size=7)  sideMax = 64,
		uint(size=8)  RefCu[(64+7)*(64+7)]
	do
		foreach uint i in 0 .. DPB_SIZE - 1
		do
			if(pocRef[i] = poc and isRef[i]) then
				idx := i;
			end
		end
		/* The mv components correspond to the absolute movement vector, that's
		 * why we don't need to add the address of the current Cu
		 */

		/* We remove 3 for each coordinate component, because for the luma
		 * prediction we need the 3 previous pixels
		 */
		xOffset := (mvX >> 2);
		xOffset := min(xOffset, picSize[0]+3);
		xOffset := max(xOffset, -(8 +3 -1) -(sideMax-1));
		xOffset := xOffset +BORDER_SIZE-3;
		yOffset := (mvY >> 2);
		yOffset := min(yOffset, picSize[1]+3);
		yOffset := max(yOffset, -(8 +3 -1) -(sideMax-1));
		yOffset := yOffset +BORDER_SIZE-3;
		/* We also need the 2 next pixels for the prediction, that's why we
		 * add 7 to sideMax
		 */
		getmvinfo_dpb_64_luma_cal(
  	      pictureBuffer,
  	      RefCu,
  	      idx, 
  	      sideMax + 7, 
  	      xOffset,
  	      yOffset);
		numPocRef := numPocRef - 1;
	end
	
	action PocRef:[poc], PredCuSize:[predCuSize],
		Mv:[mvX, mvY] ==> RefSample:[RefCu] repeat (32+7)*(32+7)
	guard
		idx = 8, numPocRef != 0 && predCuSize = 32
	var
		uint(size=3) idx := 0,
		int (size=32) xOffset,
		int (size=32) yOffset,
		uint(size=7)  sideMax = 32,
		uint(size=8)  RefCu[(32+7)*(32+7)]
	do
		foreach uint i in 0 .. DPB_SIZE - 1
		do
			if(pocRef[i] = poc and isRef[i]) then
				idx := i;
			end
		end
		/* The mv components correspond to the absolute movement vector, that's
		 * why we don't need to add the address of the current Cu
		 */

		/* We remove 3 for each coordinate component, because for the luma
		 * prediction we need the 3 previous pixels
		 */
		xOffset := (mvX >> 2);
		xOffset := min(xOffset, picSize[0]+3);
		xOffset := max(xOffset, -(8 +3 -1) -(sideMax-1));
		xOffset := xOffset +BORDER_SIZE-3;
		yOffset := (mvY >> 2);
		yOffset := min(yOffset, picSize[1]+3);
		yOffset := max(yOffset, -(8 +3 -1) -(sideMax-1));
		yOffset := yOffset +BORDER_SIZE-3;
		/* We also need the 2 next pixels for the prediction, that's why we
		 * add 7 to sideMax
		 */
		getmvinfo_dpb_32_luma_cal(
  	      pictureBuffer,
  	      RefCu,
  	      idx, 
  	      sideMax + 7, 
  	      xOffset,
  	      yOffset);
		numPocRef := numPocRef - 1;
	end
	
	action PocRef:[poc], PredCuSize:[predCuSize],
		Mv:[mvX, mvY] ==> RefSample:[RefCu] repeat (16+7)*(16+7)
	guard
		idx = 8, numPocRef != 0 && predCuSize = 16
	var
		uint(size=3) idx := 0,
		int (size=32) xOffset,
		int (size=32) yOffset,
		uint(size=7)  sideMax = 16,
		uint(size=8)  RefCu[(16+7)*(16+7)]
	do
		foreach int i in 0 .. DPB_SIZE - 1
		do
			if(pocRef[i] = poc and isRef[i]) then
				idx := i;
			end
		end
		/* The mv components correspond to the absolute movement vector, that's
		 * why we don't need to add the address of the current Cu
		 */

		/* We remove 3 for each coordinate component, because for the luma
		 * prediction we need the 3 previous pixels
		 */
		xOffset := (mvX >> 2);
		xOffset := min(xOffset, picSize[0]+3);
		xOffset := max(xOffset, -(8 +3 -1) -(sideMax-1));
		xOffset := xOffset +BORDER_SIZE-3;
		yOffset := (mvY >> 2);
		yOffset := min(yOffset, picSize[1]+3);
		yOffset := max(yOffset, -(8 +3 -1) -(sideMax-1));
		yOffset := yOffset +BORDER_SIZE-3;
		/* We also need the 2 next pixels for the prediction, that's why we
		 * add 7 to sideMax
		 */
		getmvinfo_dpb_16_luma_cal(
  	      pictureBuffer,
  	      RefCu,
  	      idx, 
  	      sideMax + 7, 
  	      xOffset,
  	      yOffset);
		numPocRef := numPocRef - 1;
	end
	
	action PocRef:[poc], PredCuSize:[predCuSize],
		Mv:[mvX, mvY] ==> RefSample:[RefCu] repeat (8+7)*(8+7)
	guard
		idx = 8, numPocRef != 0 && predCuSize = 8
	var
		uint(size=3) idx := 0,
		int (size=32) xOffset,
		int (size=32) yOffset,
		uint(size=7)  sideMax = 8,
		uint(size=8)  RefCu[(8+7)*(8+7)]
	do
		foreach uint i in 0 .. DPB_SIZE - 1
		do
			if(pocRef[i] = poc and isRef[i]) then
				idx := i;
			end
		end
		/* The mv components correspond to the absolute motion vector, that's
		 * why we don't need to add the address of the current Cu
		 */

		/* We remove 3 for each coordinate component, because for the luma
		 * prediction we need the 3 previous pixels
		 */
		xOffset := (mvX >> 2);
		xOffset := min(xOffset, picSize[0]+3);
		xOffset := max(xOffset, -(8 +3 -1) -(sideMax-1));
		xOffset := xOffset +BORDER_SIZE-3;
		yOffset := (mvY >> 2);
		yOffset := min(yOffset, picSize[1]+3);
		yOffset := max(yOffset, -(8 +3 -1) -(sideMax-1));
		yOffset := yOffset +BORDER_SIZE-3;
		/* We also need the 2 next pixels for the prediction, that's why we
		 * add 7 to sideMax
		 */
		getmvinfo_dpb_8_luma_cal(
  	      pictureBuffer,
  	      RefCu,
  	      idx, 
  	      sideMax + 7, 
  	      xOffset,
  	      yOffset);
		numPocRef := numPocRef - 1;
	end
	
	action PocRef:[poc], PredCuSize:[predCuSize],
		Mv:[mvX, mvY] ==> RefSample:[refCu] repeat (4+7)*(4+7)
	guard
		idx = 8, numPocRef != 0 && predCuSize = 4
	var
		uint(size=3) idx := 0,
		int (size=32) xOffset,
		int (size=32) yOffset,
		uint(size=7)  sideMax = 4,
		uint(size=8)  refCu[(4+7)*(4+7)]
	do
		foreach int i in 0 .. DPB_SIZE - 1
		do
			if(pocRef[i] = poc and isRef[i]) then
				idx := i;
			end
		end
		/* The mv components correspond to the absolute movement vector, that's
		 * why we don't need to add the address of the current Cu
		 */

		/* We remove 3 for each coordinate component, because for the luma
		 * prediction we need the 3 previous pixels
		 */
		xOffset := (mvX >> 2);
		xOffset := min(xOffset, picSize[0]+3);
		xOffset := max(xOffset, -(8 +3 -1) -(sideMax-1));
		xOffset := xOffset +BORDER_SIZE-3;
		yOffset := (mvY >> 2);
		yOffset := min(yOffset, picSize[1]+3);
		yOffset := max(yOffset, -(8 +3 -1) -(sideMax-1));
		yOffset := yOffset +BORDER_SIZE-3;
		/* We also need the 2 next pixels for the prediction, that's why we
		 * add 7 to sideMax
		 */
		foreach int y in 0 .. sideMax+7 -1
		do
			foreach int x in 0 .. sideMax+7 -1
			do
				refCu[x+y*(sideMax+7)] := pictureBuffer[idx][y+yOffset][x+xOffset];
			end
		end
		numPocRef := numPocRef - 1;
	end
	
	
	action ==>
	guard
		idx = 8,
		numPocRef = 0
	do
		idx := 3;
	end

	action ==>
	guard
		idx = 6, isNewPicture
	do
		idx := 7;
	end

	action ==>
	guard
		idx = 6, not isNewPicture
	do
		idx := 3;
	end



////////////////////////////////////////////////////////////// second frame /////////////////////////////////////////////////////////////////////////////

/** Getting informations from new slice/picture. Updating these informations **/
	action IsReadOrNewSlc2:[isRead], PicSize2:[picWidthInPix,
		picHeightInPix], Poc2:[poc] ==>
	guard
		/* Fix me : We should know when there is a new picture */
		idx2 = 3, isRead = 0 and if(currIdx2 = -1) then false else poc = pocRef[currIdx2]end
	do
		isNewPicture2 := false;
		nbList2 := 0;
		isStillRef := [false: for int i in 0 .. DPB_SIZE - 1];
		idx2 := 4;
	end
	
	action IsReadOrNewSlc2:[isRead], PicSize2:[picWidthInPix,
		picHeightInPix], Poc2:[poc] ==>
	guard
		(idx2 = 0 or idx2 = 3), isRead = 0 and not(if(currIdx2 = -1) then false else poc = pocRef[currIdx2]end)
	do
//		println("Dpb ; Pict num "+pictNum);
		pictNum2 := pictNum2 + 1;
		picSizeInCu2[0] := (picWidthInPix+15)/16;
		picSizeInCu2[1] := (picHeightInPix+15)/16;
		picSize2[0] := picWidthInPix;
		picSize2[1] := picHeightInPix;
		xIdx2 := 0;
		yIdx2 := 0;
		lastIdx2 := currIdx2;
		foreach uint i in 0 .. DPB_SIZE - 1
		do
			if(not isRef[i]) then
				currIdx2 := i;
			end
		end
		isRef[currIdx2]  := true;
		pocRef[currIdx2] := poc;
		isNewPicture2    := true;
		nbList2         := 0;
		isStillRef := [false: for int i in 0 .. DPB_SIZE - 1];
		
		if idx2 = 0 then
			idx2 := 1;
		else
			idx2 := 4;
		end
	end

	/** We get all the references from the 5 lists of the Rps
	 * (StCurrentBefore, StCurrentAfter, StFollowing, LtCurrent, LtFollowing)
	 **/
	action RpsPoc2:[numPic]==>
	guard
		(idx2 = 1 or idx2 = 4), nbList2 < 5
	do
		sizeOfList2 := numPic;
		
		if idx2 = 1 then
			idx2 := 2;
		else
			idx2 := 5;
		end
	end

	action ==>
	guard
		(idx2 = 1 or idx2 = 4), nbList2 = 5
	do
		/* We remove from the Dpb all the pictures who are not in the Rps of
		 * the current picture
		 */
		foreach int i in 0 .. DPB_SIZE - 1
		do
			isRef[i] := isRef[i] and isStillRef[i];
		end
		isRef[currIdx2] := true;
		
		if idx2 = 1 then
			idx2 := 3;
		else
			idx2 := 6;
		end
	end

	/** For each we check the index of the reference poc
	 * (in order to not remove them from the Dpb).
	 **/
	action RpsPoc2:[pocVal] ==>
	guard
		(idx2 = 2 or idx2 = 5), sizeOfList2 > 0
	do
		sizeOfList2 := sizeOfList2 - 1;
		foreach int i in 0 .. DPB_SIZE - 1
		do
			if(pocRef[i] = pocVal)then
				isStillRef[i] := true;
			end
		end
	end

	action ==>
	guard
		(idx2 = 2 or idx2 = 5), sizeOfList2 = 0
	do
		nbList2 := nbList2 + 1;
		if idx2 = 2 then
			idx2 := 1;
		else
			idx2 := 4;
		end
	end

	/* We get the whole Cu decoded (luma and chroma components) and we save
	 * it in the Dpb (pictureBuffer).
	 */
	action Sample2:[samp] repeat 16*16 ==>
	guard
		idx2 = 7, yIdx2 < picSizeInCu2[1]
	var
		int xPixIdx,
		int yPixIdx
	do
		xPixIdx := BORDER_SIZE + xIdx2*16;
		yPixIdx := BORDER_SIZE + yIdx2*16;
		
		copy_cu_dpb_luma_cal(
          samp,
  	      pictureBuffer,
  	      xPixIdx,
  	      yPixIdx,
  	      lastIdx2);
  	    
		xIdx2 := xIdx2 + 1;
		if(xIdx2 = picSizeInCu2[0]) then
			xIdx2 := 0;
			yIdx2 := yIdx2 + 1;
		end
	end

	/* When we get the picture we add the border (in order to be able to give a
	 * reference pixels which can be outside of the picture).
	 */
	
	action ==> VID:[CU] repeat 16*16
	guard
		idx2 = 3,
		sendy2 < picSizeInCu2[1],
		pocDone[currentPoc] = true
	var
		uint (size=8) CU[16*16]
	do
		foreach int i in 0 .. 15 do	
			foreach int j in 0 .. 15 do
				CU[i*16 + j] := pictureBuffer[pocToIndex[currentPoc]][BORDER_SIZE + sendy2 * 16 + i ][BORDER_SIZE + sendx2 * 16 + j];
			end
		end
			
		sendx2 := sendx2 + 1;
		if(sendx2 = picSizeInCu2[0]) then
			sendx2 := 0;
			sendy2 := sendy2 + 1;
		end
	end
	
	action ==>
	guard
		idx2 = 3,
		sendy2 = picSizeInCu2[1],
		pocDone[currentPoc] = true
	do
		sendx2 := 0;
		sendy2 := 0;
		pocDone[currentPoc] := false;
		currentPoc := currentPoc + 1;
		
	end
	
	action ==>
	guard
		idx2 = 7, yIdx2 = picSizeInCu2[1]
	var
		int xSize := picSize2[0],
		int ySize := picSize2[1]
	do
		/* Fill in luma border */
		fillBorder_luma_cal(
			pictureBuffer,
			lastIdx2,
			xSize,
			ySize,
			BORDER_SIZE);
			
			pocDone[pocRef[lastIdx2]] := true;
			pocToIndex[pocRef[lastIdx2]] := lastIdx2;
		if pocRef[lastIdx2] < currentPoc then
				currentPoc := 0;
		end
		idx2 := 3;
	end

	action IsReadOrNewSlc2:[isRead], IsBiPredOrLx2:[isBiPredOrLx] ==>
	guard
		idx2 = 3, isRead = 1
	do
		numPocRef2 :=
			if(isBiPredOrLx = BI_PRED) then
				2
			else
				1
			end;
		idx2 := 8;
	end

	/* We get all the informations needed for sending the reference Cu. We save
	 * these samples in RefCu, it will be sent with the actions sendCu.isYxY
	 */
	action PocRef2:[poc], PredCuSize2:[predCuSize],
		Mv2:[mvX, mvY] ==> RefSample2:[RefCu] repeat (64+7)*(64+7)
	guard
		idx2 = 8, numPocRef2 != 0 && predCuSize = 64
	var
		uint(size=3) idx := 0,
		int (size=32) xOffset,
		int (size=32) yOffset,
		uint(size=7)  sideMax = 64,
		uint(size=8)  RefCu[(64+7)*(64+7)]
	do
		foreach uint i in 0 .. DPB_SIZE - 1
		do
			if(pocRef[i] = poc and isRef[i]) then
				idx := i;
			end
		end
		/* The mv components correspond to the absolute movement vector, that's
		 * why we don't need to add the address of the current Cu
		 */

		/* We remove 3 for each coordinate component, because for the luma
		 * prediction we need the 3 previous pixels
		 */
		xOffset := (mvX >> 2);
		xOffset := min(xOffset, picSize2[0]+3);
		xOffset := max(xOffset, -(8 +3 -1) -(sideMax-1));
		xOffset := xOffset +BORDER_SIZE-3;
		yOffset := (mvY >> 2);
		yOffset := min(yOffset, picSize2[1]+3);
		yOffset := max(yOffset, -(8 +3 -1) -(sideMax-1));
		yOffset := yOffset +BORDER_SIZE-3;
		/* We also need the 2 next pixels for the prediction, that's why we
		 * add 7 to sideMax
		 */
		getmvinfo_dpb_64_luma_cal(
  	      pictureBuffer,
  	      RefCu,
  	      idx, 
  	      sideMax + 7, 
  	      xOffset,
  	      yOffset);
		numPocRef2 := numPocRef2 - 1;
	end
	
	action PocRef2:[poc], PredCuSize2:[predCuSize],
		Mv2:[mvX, mvY] ==> RefSample2:[RefCu] repeat (32+7)*(32+7)
	guard
		idx2 = 8, numPocRef2 != 0 && predCuSize = 32
	var
		uint(size=3) idx := 0,
		int (size=32) xOffset,
		int (size=32) yOffset,
		uint(size=7)  sideMax = 32,
		uint(size=8)  RefCu[(32+7)*(32+7)]
	do
		foreach uint i in 0 .. DPB_SIZE - 1
		do
			if(pocRef[i] = poc and isRef[i]) then
				idx := i;
			end
		end
		/* The mv components correspond to the absolute movement vector, that's
		 * why we don't need to add the address of the current Cu
		 */

		/* We remove 3 for each coordinate component, because for the luma
		 * prediction we need the 3 previous pixels
		 */
		xOffset := (mvX >> 2);
		xOffset := min(xOffset, picSize2[0]+3);
		xOffset := max(xOffset, -(8 +3 -1) -(sideMax-1));
		xOffset := xOffset +BORDER_SIZE-3;
		yOffset := (mvY >> 2);
		yOffset := min(yOffset, picSize2[1]+3);
		yOffset := max(yOffset, -(8 +3 -1) -(sideMax-1));
		yOffset := yOffset +BORDER_SIZE-3;
		/* We also need the 2 next pixels for the prediction, that's why we
		 * add 7 to sideMax
		 */
		getmvinfo_dpb_32_luma_cal(
  	      pictureBuffer,
  	      RefCu,
  	      idx, 
  	      sideMax + 7, 
  	      xOffset,
  	      yOffset);
		numPocRef2 := numPocRef2 - 1;
	end
	
	action PocRef2:[poc], PredCuSize2:[predCuSize],
		Mv2:[mvX, mvY] ==> RefSample2:[RefCu] repeat (16+7)*(16+7)
	guard
		idx2 = 8, numPocRef2 != 0 && predCuSize = 16
	var
		uint(size=3) idx := 0,
		int (size=32) xOffset,
		int (size=32) yOffset,
		uint(size=7)  sideMax = 16,
		uint(size=8)  RefCu[(16+7)*(16+7)]
	do
		foreach int i in 0 .. DPB_SIZE - 1
		do
			if(pocRef[i] = poc and isRef[i]) then
				idx := i;
			end
		end
		/* The mv components correspond to the absolute movement vector, that's
		 * why we don't need to add the address of the current Cu
		 */

		/* We remove 3 for each coordinate component, because for the luma
		 * prediction we need the 3 previous pixels
		 */
		xOffset := (mvX >> 2);
		xOffset := min(xOffset, picSize2[0]+3);
		xOffset := max(xOffset, -(8 +3 -1) -(sideMax-1));
		xOffset := xOffset +BORDER_SIZE-3;
		yOffset := (mvY >> 2);
		yOffset := min(yOffset, picSize2[1]+3);
		yOffset := max(yOffset, -(8 +3 -1) -(sideMax-1));
		yOffset := yOffset +BORDER_SIZE-3;
		/* We also need the 2 next pixels for the prediction, that's why we
		 * add 7 to sideMax
		 */
		getmvinfo_dpb_16_luma_cal(
  	      pictureBuffer,
  	      RefCu,
  	      idx, 
  	      sideMax + 7, 
  	      xOffset,
  	      yOffset);
		numPocRef2 := numPocRef2 - 1;
	end
	
	action PocRef2:[poc], PredCuSize2:[predCuSize],
		Mv2:[mvX, mvY] ==> RefSample2:[RefCu] repeat (8+7)*(8+7)
	guard
		idx2 = 8, numPocRef2 != 0 && predCuSize = 8
	var
		uint(size=3) idx := 0,
		int (size=32) xOffset,
		int (size=32) yOffset,
		uint(size=7)  sideMax = 8,
		uint(size=8)  RefCu[(8+7)*(8+7)]
	do
		foreach uint i in 0 .. DPB_SIZE - 1
		do
			if(pocRef[i] = poc and isRef[i]) then
				idx := i;
			end
		end
		/* The mv components correspond to the absolute motion vector, that's
		 * why we don't need to add the address of the current Cu
		 */

		/* We remove 3 for each coordinate component, because for the luma
		 * prediction we need the 3 previous pixels
		 */
		xOffset := (mvX >> 2);
		xOffset := min(xOffset, picSize2[0]+3);
		xOffset := max(xOffset, -(8 +3 -1) -(sideMax-1));
		xOffset := xOffset +BORDER_SIZE-3;
		yOffset := (mvY >> 2);
		yOffset := min(yOffset, picSize2[1]+3);
		yOffset := max(yOffset, -(8 +3 -1) -(sideMax-1));
		yOffset := yOffset +BORDER_SIZE-3;
		/* We also need the 2 next pixels for the prediction, that's why we
		 * add 7 to sideMax
		 */
		getmvinfo_dpb_8_luma_cal(
  	      pictureBuffer,
  	      RefCu,
  	      idx, 
  	      sideMax + 7, 
  	      xOffset,
  	      yOffset);
		numPocRef2 := numPocRef2 - 1;
	end
	
	action PocRef2:[poc], PredCuSize2:[predCuSize],
		Mv2:[mvX, mvY] ==> RefSample2:[refCu] repeat (4+7)*(4+7)
	guard
		idx2 = 8, numPocRef2 != 0 && predCuSize = 4
	var
		uint(size=3) idx := 0,
		int (size=32) xOffset,
		int (size=32) yOffset,
		uint(size=7)  sideMax = 4,
		uint(size=8)  refCu[(4+7)*(4+7)]
	do
		foreach int i in 0 .. DPB_SIZE - 1
		do
			if(pocRef[i] = poc and isRef[i]) then
				idx := i;
			end
		end
		/* The mv components correspond to the absolute movement vector, that's
		 * why we don't need to add the address of the current Cu
		 */

		/* We remove 3 for each coordinate component, because for the luma
		 * prediction we need the 3 previous pixels
		 */
		xOffset := (mvX >> 2);
		xOffset := min(xOffset, picSize2[0]+3);
		xOffset := max(xOffset, -(8 +3 -1) -(sideMax-1));
		xOffset := xOffset +BORDER_SIZE-3;
		yOffset := (mvY >> 2);
		yOffset := min(yOffset, picSize2[1]+3);
		yOffset := max(yOffset, -(8 +3 -1) -(sideMax-1));
		yOffset := yOffset +BORDER_SIZE-3;
		/* We also need the 2 next pixels for the prediction, that's why we
		 * add 7 to sideMax
		 */
		foreach int y in 0 .. sideMax+7 -1
		do
			foreach int x in 0 .. sideMax+7 -1
			do
				refCu[x+y*(sideMax+7)] := pictureBuffer[idx][y+yOffset][x+xOffset];
			end
		end
		numPocRef2 := numPocRef2 - 1;
	end
	
	
	action ==>
	guard
		idx2 = 8,
		numPocRef2 = 0
	do
		idx2 := 3;
	end

	action ==>
	guard
		idx2 = 6, isNewPicture2
	do
		idx2 := 7;
	end

	action ==>
	guard
		idx2 = 6, not isNewPicture2
	do
		idx2 := 3;
	end

end
