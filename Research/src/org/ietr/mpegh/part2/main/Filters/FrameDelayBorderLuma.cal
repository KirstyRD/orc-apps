/*
 * Copyright (c) 2012, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
package org.ietr.mpegh.part2.main.Filters;

import std.util.Math.*;
import devel.org.sc29.wg11.mpegh.part2.common.CommonConstantHEVC.*;

actor FrameDelayBorderLuma()
	uint(size=2)  IsPicSlcLcu,
	uint(size=8)  LcuSizeMax,
	uint(size=2)  LFAcrossSlcTile,
	uint(size=16) PicSize,
	uint(size=8)  SampleIn,
	uint(size=16) TilesCoord
		==>
	uint(size=8)  FiltSample
		:		
	
	uint(size=8) OrigPict[PICT_HEIGHT][PICT_WIDTH];
	
	uint(size=8)  lcuSizeMax;
	uint(size=8)  log2_lcuSizeMax;
	uint(size=6)  picSizeInMb[2];
	uint(size=8)  xCu := 0;
	uint(size=8)  yCu := 0;
	
	uint(size=16) numTokenPerLcu;
	uint(size=16) tokenGot;
	
	int(size=16) iLoop;
	
	uint(size=16) numTiles;
	uint(size=16) lcuTileIdx;
	uint(size=16) tilesBeg[MAX_NUM_TILES][2];
	uint(size=16) tilesEnd[MAX_NUM_TILES][2];

	procedure nextLcuAddress()
	begin
		xCu := xCu + 1;
		if(xCu = tilesEnd[lcuTileIdx][0]) then
			xCu := tilesBeg[lcuTileIdx][0];
			yCu := yCu + 1;
			if(yCu = tilesEnd[lcuTileIdx][1]) then
				lcuTileIdx := lcuTileIdx + 1;
				xCu := tilesBeg[lcuTileIdx][0];
				yCu := tilesBeg[lcuTileIdx][1];
			end
		end
	end

	procedure nextMbAddr()
	begin
		xCu := xCu + 1;
		if(xCu = picSizeInMb[0]) then
			xCu := 0;
			yCu := yCu + 1;
		end
	end

	uint numPict;
	
	isNewPict: action IsPicSlcLcu:[isNewPicSlcLcu],
		LcuSizeMax:[log2_lcuSz], LFAcrossSlcTile:[lfAcrossSlcTile],
		PicSize:[picWidthInPix, picHeightInPix] ==>
	guard
		isNewPicSlcLcu = NEW_PIC
	do
		//println("Pict num : " + numPict + ". Pic size : {" + picWidthInPix + " ; " + picHeightInPix + "}");
		numPict := numPict + 1;
		log2_lcuSizeMax := log2_lcuSz;
		lcuSizeMax := 1 << log2_lcuSizeMax;
		picSizeInMb := [(picWidthInPix+15)/16, (picHeightInPix+15)/16];
		lcuTileIdx := 0;
		numTokenPerLcu := lcuSizeMax * lcuSizeMax;
	end
	
	//There should be slice SAO enable for each independent slice.
	isNewSlice: action IsPicSlcLcu:[isNewPicSlcLcu],
		LcuSizeMax:[log2_lcuSz], LFAcrossSlcTile:[lfAcrossSlcTile],
		PicSize:[picWidthInPix, picHeightInPix]/*, SaoSe:[saoSe]*/ ==>
	guard
		isNewPicSlcLcu = NEW_SLC
	do
		log2_lcuSizeMax := log2_lcuSz;
		lcuSizeMax := 1 << log2_lcuSizeMax;
	end

	getNumTiles: action TilesCoord:[valNumTiles] ==>
	do
		numTiles := valNumTiles;
		iLoop := 0;
	end

	getTilesCoord.launch: action TilesCoord:[tilesCoord] repeat 4 ==>
	guard
		iLoop < numTiles
	do
		tilesBeg[iLoop] := [tilesCoord[0] >> log2_lcuSizeMax, tilesCoord[1] >> log2_lcuSizeMax];
		tilesEnd[iLoop] := [(tilesCoord[2]+(lcuSizeMax - 1)) >> log2_lcuSizeMax, (tilesCoord[3]+(lcuSizeMax - 1))>> log2_lcuSizeMax];
		iLoop := iLoop + 1;
	end

	getTilesCoord.done: action ==>
	guard
		iLoop = numTiles
	end

	getCuPix.launch.init: action IsPicSlcLcu:[isNewLcu] ==>
	guard
		lcuTileIdx < numTiles
	do
		tokenGot := 0;
	end

	getCuPix.launch.luma: action SampleIn:[samp] repeat 16 * 16 ==>
	guard
		tokenGot < numTokenPerLcu
	var
		int xPic,
		int yPic
	do
		foreach int y in 0 .. 15
		do
			xPic := (xCu * lcuSizeMax) + (tokenGot & (lcuSizeMax - 1));
			yPic := (yCu * lcuSizeMax) + (tokenGot >> log2_lcuSizeMax);
			
			foreach int x in 0 .. 15
			do
				OrigPict[yPic][x+xPic] := samp[y * 16 + x]; 
			end
	
			tokenGot := tokenGot + 16;
		end
	end

	getCuPix.launch.lumaDone: action ==>
	guard
		tokenGot = numTokenPerLcu
	do
		tokenGot := 0;
		nextLcuAddress();
	end

	getCuPix.done: action ==>
	guard
		lcuTileIdx = numTiles
	do
		xCu := 0;
		yCu := 0;
	end
	
	sendSamples.launch: action ==> FiltSample:[filtSamp] repeat 16*16
	guard
		yCu < picSizeInMb[1]
	var
		uint(size=8) filtSamp[16*16],
		uint(size=16) blkAddrX, uint(size=16) blkAddrY
	do
		blkAddrX := xCu*16;
		blkAddrY := yCu*16;
		foreach int y in 0 .. 15
		do
			foreach int x in 0 .. 15
			do
				filtSamp[x+y*16] := OrigPict[blkAddrY+y][blkAddrX+x];
			end
		end

		nextMbAddr();
	end

	sendSamples.done: action ==>
	guard
		yCu = picSizeInMb[1]
	do
		xCu := 0;
		yCu := 0;
	end

	schedule fsm IsNewPict:
		IsNewPict (isNewPict )--> GetNumTiles;

		GetCuPix (isNewSlice           )--> GetNumTiles;
		GetCuPix (getCuPix.launch.init )--> GetCuPixLuma;
		GetCuPix (getCuPix.done        )--> SendSamples;

		GetCuPixLuma (getCuPix.launch.luma     )--> GetCuPixLuma;
		GetCuPixLuma (getCuPix.launch.lumaDone )--> GetCuPix;

		GetNumTiles   (getNumTiles          )--> GetTilesCoord;
		GetTilesCoord (getTilesCoord.launch )--> GetTilesCoord;
		GetTilesCoord (getTilesCoord.done   )--> GetCuPix;

		SendSamples (sendSamples.launch )--> SendSamples;
		SendSamples (sendSamples.done   )--> IsNewPict;
	end
end
