/*
 * Copyright (c) 2011, IRISA
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the IRISA nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
  
// Author: Herve Yvique <herve.yviquel@irisa.fr>
// Modified by Damien de Saint Jorre IETR/INSA of Rennes (France)
// Modified by Jerome Gorin IETR/INSA of Rennes (France)

package org.ietr.mpegh.part2.common;
import std.video.FFmpegUtil.*;
import  std.video.Display.*;
import  org.sc29.wg11.common.DisplayYUVFunctions.*;
//@DEBUG
actor Source_ffmpeg_FB2 () ==> uint(size=8) Om, uint(size=8) O1, uint(size=8) O2, int Select:

	uint(size=8) framesBuffer[MAX_FRAME_SIZE];
	int frameSize;
	uint ReadFrameIdx_1 := 0;
	uint ReadFrameIdx_2 := 0;
	uint ReadFrameIdx_m := 0;
	uint totalFrameSize := 0;
	
	initialize ==>
	do
		ffmpeg_initSource();
	end
	
	readFrame: action ==> 
	do
		ffmpeg_readFrame(framesBuffer, frameSize, 0);
		totalFrameSize := totalFrameSize + frameSize;
	end
	
	checkFifo.d1: action ==> O1:[ Out ], Select:[0]
	var
		uint(size=8) Out
	do
		Out := framesBuffer[ReadFrameIdx_1];
		ReadFrameIdx_1 := ReadFrameIdx_1 + 1;
	end
	
	checkFifo.d2: action ==> O2:[ Out ], Select:[1]
	var
		uint(size=8) Out
	do
		Out := framesBuffer[ReadFrameIdx_2];
		ReadFrameIdx_2 := ReadFrameIdx_2 + 1;
	end
	
	sendData.d1: action ==> O1:[ Out ]
	var
		uint(size=8) Out
	do
		Out := framesBuffer[ReadFrameIdx_1];
		ReadFrameIdx_1 := ReadFrameIdx_1 + 1;
	end
	
	sendData.d2: action ==> O2:[ Out ]
	var
		uint(size=8) Out
	do
		Out := framesBuffer[ReadFrameIdx_2];
		ReadFrameIdx_2 := ReadFrameIdx_2 + 1;
	end
	
	sendData.m: action ==> Om:[ Out ]
	var
		uint(size=8) Out
	do
		Out := framesBuffer[ReadFrameIdx_m];
		ReadFrameIdx_m := ReadFrameIdx_m + 1;
	end
	
	sendDataDone: action ==>
	guard
		ReadFrameIdx_1 = totalFrameSize or 
		ReadFrameIdx_2 = totalFrameSize 
	end
	
	schedule fsm readFrame :
		readFrame 		(readFrame)		--> checkFifo;
		checkFifo		(checkFifo) 	--> sendData;
		sendData 		(sendData)  	--> sendData;
		sendData 		(sendDataDone)	--> readFrame;
	end
	priority
		sendDataDone > sendData;
	end
end