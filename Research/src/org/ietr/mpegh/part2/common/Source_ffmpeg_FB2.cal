/*
 * Copyright (c) 2014, INSA of Rennes
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the IRISA nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
  
// Authors: 
// Herve Yviquel <herve.yviquel@insa-rennes.fr>
// Khaled Jerbi <khaled.jerbi@insa-rennes.fr>

package org.ietr.mpegh.part2.common;

import std.video.FFmpegUtil.*;

//@DEBUG
actor Source_ffmpeg_FB2 () ==> uint(size=8) Om, uint(size=8) O1, uint(size=8) O2:

	uint(size=8) framesBuffer[MAX_FRAME_DELAY][MAX_FRAME_SIZE];
	int framesSize[MAX_FRAME_DELAY];
	
	int ReadFrameIdx_1 := 0;
	int ReadFrameIdx_2 := 0;
	int ReadFrameIdx_m := 0;
	int currentFrame_1 := 0;
	int currentFrame_2 := 0;
	int currentFrame_m := 0;
	int currentFrame   := -1;
	
	initialize ==>
	do
		ffmpeg_initSource();
	end
	
	readFrame: action ==> 
	guard
		currentFrame_1 > currentFrame 
		|| currentFrame_2 > currentFrame
	do
		currentFrame   := currentFrame + 1;
		ffmpeg_readFrame(framesBuffer, framesSize, (currentFrame & (MAX_FRAME_DELAY - 1)));
	end
	
	@schedule_outputs
	sendData.d1: action ==> O1:[ Out ]
	guard
		currentFrame_1 <= currentFrame
	var
		uint(size=8) Out
	do
		Out := framesBuffer[currentFrame_1 & (MAX_FRAME_DELAY - 1)][ReadFrameIdx_1];
		ReadFrameIdx_1 := ReadFrameIdx_1 + 1;
		if ReadFrameIdx_1 = framesSize[currentFrame_1 & (MAX_FRAME_DELAY - 1)] then
			//current frame 1 is sent
			ReadFrameIdx_1 := 0;
			currentFrame_1 := currentFrame_1 + 1;
		end
	end
	
	@schedule_outputs
	sendData.d2: action ==> O2:[ Out ]
	guard
		currentFrame_2 <= currentFrame
	var
		uint(size=8) Out
	do
		Out := framesBuffer[currentFrame_2 & (MAX_FRAME_DELAY - 1)][ReadFrameIdx_2];
		ReadFrameIdx_2 := ReadFrameIdx_2 + 1;
		if ReadFrameIdx_2 = framesSize[currentFrame_2 & (MAX_FRAME_DELAY - 1)] then
			//current frame 2 is sent
			ReadFrameIdx_2 := 0;
			currentFrame_2 := currentFrame_2 + 1;
		end
	end
	
	@schedule_outputs
	sendData.m: action ==> Om:[ Out ]
	guard
		currentFrame_m <= currentFrame
	var
		uint(size=8) Out
	do
		Out := framesBuffer[currentFrame_m & (MAX_FRAME_DELAY - 1)][ReadFrameIdx_m];
		ReadFrameIdx_m := ReadFrameIdx_m + 1;
		if ReadFrameIdx_m = framesSize[currentFrame_m & (MAX_FRAME_DELAY - 1)] then
			//current frame m is sent
			ReadFrameIdx_m := 0;
			currentFrame_m := currentFrame_m +1;
		end
	end
	
	priority
		sendData > readFrame;
	end
	
end