/*
 * Copyright (c) 2011, IRISA
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the IRISA nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
  
// Author: Herve Yvique <herve.yviquel@irisa.fr>
// Modified by Damien de Saint Jorre IETR/INSA of Rennes (France)
// Modified by Jerome Gorin IETR/INSA of Rennes (France)

package org.ietr.mpegh.part2.common;
import std.video.FFmpegUtil.*;

actor SourceFrame () ==> uint(size=8) O1, uint(size=8) O2 :

	int NB_OUTPUTS = 2;

	uint(size=8) framesBuffer[NB_OUTPUTS][MAX_FRAME_SIZE];
	int framesSize[NB_OUTPUTS][1] := [[0],[0]];
	int nbByteSent[NB_OUTPUTS]:=[0,0];
	
	initialize ==>
	do
		ffmpeg_initSource();
	end
	
	o1.readFrame: action ==>
	guard
		nbByteSent[0] = framesSize[0][0]
	do
		ffmpeg_readFrame(framesBuffer, framesSize, 0);
		nbByteSent[0] := 0;
	end
	
	o1.sendData: action ==> O1:[ Out ]
	guard
		nbByteSent[0] < framesSize[0][0]
	var
		uint(size=8) Out
	do
		Out := framesBuffer[0][nbByteSent[0]];
		nbByteSent[0] := nbByteSent[0] + 1;
	end
	
	o2.readFrame: action ==>
	guard
		nbByteSent[1] = framesSize[1][0]
	do
		ffmpeg_readFrame(framesBuffer, framesSize, 1);
		nbByteSent[1] := 0;
	end

		
	o2.sendData: action ==> O2:[ Out ]
	guard
		nbByteSent[1] < framesSize[1][0]
	var
		uint(size=8) Out
	do
		Out := framesBuffer[1][nbByteSent[1]];
		nbByteSent[1] := nbByteSent[1] + 1;
	end
	
	schedule fsm o1 :
		o1 (o1) --> o2;
		o2 (o2) --> o1;
	end
	
	priority
		o1.sendData > o1.readFrame;
		o2.sendData > o2.readFrame;
	end
end