package org.ietr.trackImg;

import org.ietr.trackImg.DisplayNative.*;
import  std.util.Math.*;
import  std.stdio.Source.*;
//import  std.stdio.Display.*;
import org.ietr.trackImg.DisplayFunctions.*;


actor Display()
	uint(size=8)  Red,
	uint(size=8)  Green,
	uint(size=8)  Blue
		==>
		:

	uint(size=8)  pictureBufferR[352 * 200];
	uint(size=8)  pictureBufferG[352 * 200];
	uint(size=8)  pictureBufferB[352 * 200];
	int (size=32) pictureSizeInMb;
	int (size=32) nbBlockGot;
	int (size=32) nbFrameDecoded;
	uint(size=16) cropPicWthLuma;
	uint(size=16) cropPicHghtLuma;
	
	uint(size=14) xMin;
	uint(size=14) xMax;
	uint(size=14) yMin;
	uint(size=14) yMax;
	
	// Necessary with backends that do not kill the entire application
	// when calling source_exit()
	bool isTerminated := false;

	initialize ==>
	do
		if(DISP_ENABLE != 0) then
			displayRGB_init(352, 200, 352, 200);
		end
		fpsPrintInit();
		nbFrameDecoded := 0;
	end

	action ==>
	guard
		not isTerminated,
		source_isMaxLoopsReached() //|| nbFrameDecoded = displayRGB_getNbFrames()
	do
		isTerminated := true;
		source_exit(0);
	end

	getPictureSize: action  ==>
	do
		pictureSizeInMb   := 275;
		xMin := 0;
		xMax := 351;
		yMin := 0;
		yMax := 199;
		cropPicWthLuma  := xMax - xMin + 1;
		cropPicHghtLuma := yMax - yMin + 1;
		nbBlockGot := 0;
	end

	getBlocks: action Red :[red] repeat 256, Green :[green] repeat 256, Blue :[blue] repeat 256 ==>
	guard
		nbBlockGot < pictureSizeInMb
	do
		
		foreach int i in 0 .. 255 do
			pictureBufferR[i + 256 * nbBlockGot] := red[i];
			pictureBufferG[i + 256 * nbBlockGot] := green[i];
			pictureBufferB[i + 256 * nbBlockGot] := blue[i];
		end
		nbBlockGot := nbBlockGot + 1;
	end

	displayPicture: action ==>
	guard
		nbBlockGot = pictureSizeInMb
	do
		fpsPrintNewPicDecoded();
		if(DISP_ENABLE != 0) then
			displayRGB_displayPicture(pictureBufferR, pictureBufferG, pictureBufferB, cropPicWthLuma, cropPicHghtLuma);
		end
		nbFrameDecoded := nbFrameDecoded + 1;
	end
	
	schedule fsm GetPictureSize:
		GetPictureSize    	(getPictureSize   	)--> GetBlocks;
		GetBlocks      		(getBlocks  		)--> GetBlocks;
		GetBlocks      		(displayPicture   	)--> GetPictureSize;
	end
	
end