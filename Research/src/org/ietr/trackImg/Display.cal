package org.ietr.trackImg;

import org.ietr.trackImg.DisplayNative.*;
import  std.util.Math.*;
import  std.stdio.Source.*;
//import  std.stdio.Display.*;
import org.ietr.trackImg.DisplayFunctions.*;


actor Display()
	uint(size=8)  Red,
	uint(size=8)  Green,
	uint(size=8)  Blue,
	int  RectCoords,
	int PictSize
		==>
		:

	uint(size=8)  pictureBufferR[WIDTH * HEIGHT];
	uint(size=8)  pictureBufferG[WIDTH * HEIGHT];
	uint(size=8)  pictureBufferB[WIDTH * HEIGHT];
	int (size=32) pictureSizeInMb;
	int (size=32) nbBlockGot;
	int (size=32) nbFrameDecoded;
	uint(size=16) cropPicWthLuma;
	uint(size=16) cropPicHghtLuma;
	
	uint(size=14) xMin;
	uint(size=14) xMax;
	uint(size=14) yMin;
	uint(size=14) yMax;
	
	int Rect_x1;
	int Rect_y1;
	int Rect_x2;
	int Rect_y2;
	
	int pos1[2]:=[50,50];
	int pos2[2]:=[150,90];
	
	getFirstPictureSize: action PictSize:[width, height] ==>
	do
		displayRGB_init(width, height, width, height);
		pictureSizeInMb   := width * height / MB_SIZE_IN_PIX;
		xMin := 0;
		xMax := width - 1;
		yMin := 0;
		yMax := height - 1;
		cropPicWthLuma  := xMax - xMin + 1;
		cropPicHghtLuma := yMax - yMin + 1;
		nbBlockGot := 0;
	end
	
	getPictureSize: action RectCoords:[x1,y1,x2,y2], PictSize:[width, height] ==>
	do
		displayRGB_init(width, height, width, height);
		Rect_x1 := x1;
		Rect_y1 := y1;
		Rect_x2 := x2;
		Rect_y2 := y2;
		pictureSizeInMb   := width * height / MB_SIZE_IN_PIX;
		xMin := 0;
		xMax := width - 1;
		yMin := 0;
		yMax := height - 1;
		cropPicWthLuma  := xMax - xMin + 1;
		cropPicHghtLuma := yMax - yMin + 1;
		nbBlockGot := 0;
	end

	getBlocks: action Red :[red] repeat MB_SIZE_IN_PIX, Green :[green] repeat MB_SIZE_IN_PIX, Blue :[blue] repeat MB_SIZE_IN_PIX ==>
	guard
		nbBlockGot < pictureSizeInMb
	do
		
		foreach int i in 0 .. MB_SIZE_IN_PIX - 1 do
			pictureBufferR[i + MB_SIZE_IN_PIX * nbBlockGot] := red[i];
			pictureBufferG[i + MB_SIZE_IN_PIX * nbBlockGot] := green[i];
			pictureBufferB[i + MB_SIZE_IN_PIX * nbBlockGot] := blue[i];
		end
		nbBlockGot := nbBlockGot + 1;
	end

	displayFirstPicture: action ==>
	guard
		nbBlockGot = pictureSizeInMb
	do
		fpsPrintNewPicDecoded();
		if(DISP_ENABLE != 0) then
			displayRGB_displayPicture(pictureBufferR, pictureBufferG, pictureBufferB, cropPicWthLuma, cropPicHghtLuma);
			get_mouse_position(pos1);
			get_mouse_position(pos2);
			Rect_x1 := pos1[0];
			Rect_y1 := pos1[1];
			Rect_x2 := pos2[0];
			Rect_y2 := pos2[1];
			displayTrackRect( Rect_x1, Rect_y1, Rect_x2, Rect_y2);
		end
		nbFrameDecoded := nbFrameDecoded + 1;
	end
	
	displayPicture: action ==>
	guard
		nbBlockGot = pictureSizeInMb
	do
		fpsPrintNewPicDecoded();
		if(DISP_ENABLE != 0) then
			displayRGB_displayPicture(pictureBufferR, pictureBufferG, pictureBufferB, cropPicWthLuma, cropPicHghtLuma);
			displayTrackRect( Rect_x1, Rect_y1, Rect_x2, Rect_y2);
		end
		nbFrameDecoded := nbFrameDecoded + 1;
	end
	
	schedule fsm GetFirstPictureSize:
		GetFirstPictureSize 		(getFirstPictureSize	)--> GetFirstBlocks;
		GetFirstBlocks      		(getBlocks  			)--> GetFirstBlocks;
		GetFirstBlocks      		(displayFirstPicture   	)--> GetPictureSize;
		GetPictureSize    			(getPictureSize   		)--> GetBlocks;
		GetBlocks					(getBlocks				)--> GetBlocks;
		GetBlocks					(displayPicture			)--> GetPictureSize;
	end
	
end