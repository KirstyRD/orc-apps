package org.ietr.trackImg;
import std.stdio.Source.*;

unit DisplayNative:

	int SSS[1][100]= [[66,0,193,89,190,191,74,64,63,232,209,113,6,186,52,64,173,16,204,170,57,90,68,64,58,96,147,160,241,103,84,64,63,151,92,95,89,35,70,
		64,117,247,163,141,83,161,57,64,169,120,134,197,100,98,83,64,254,77,177,56,160,28,83,64,90,41,13,74,190,120,63,64,50,35,174,116,155,162,81,
		64,136,55,8,12,226,46,72,64,180,251,54,223,80,219,83,64,4,26,18,54]];
	
	int SF[1][22] = [[0,0,0,0,0,0,240,63,66,0,193,89,190,191,74,64,63,232,209,113,6,186]];
	
	int SCA_T[2][1] = [[1],[1]];
	int SCA_R[2][1] = [[2],[2]];
	int SCA_R_O[2][1] = [[3],[3]];
	int SCA_R_N[2][1] = [[3],[3]];
	
	int WBW_D=4; //for object segment in ROI (for animal: wbw_d=4 ; wbw_n=10)
    int WBH_D=4;
    int WBW_N=10; //for background sample
    int WBH_N=10;
    
    int VG=1;   //scale Gaussian noise for initial samples
    double CR=30; //Gaussian compression rate in lasso recognition (for animal: 30 - 3/4)
    double ITR=3;  //iterative times for random compression in lasso recognition
    
    double PARAM_ERR=0.001;
	double PARAM_NU=20;
	
	int NF=200;	//size of Tar
	int NFF=100;

	uint(size=8) DISP_ENABLE = 1;
	int MB_SIZE_IN_PIX = 256;
	
	int HEIGHT = 200;
	int WIDTH = 352;
	int SEL_OBJ_MAX_SZ = HEIGHT * WIDTH / 16;
	/**
	 * Initializes the given display.
	 */
	@native procedure displayRGB_init(int winWidth, int winHeight, int pictureWidth, int pictureHeight) end

	/**
	 * Displays a picture. Sizes are in pixels.
	 */
	@native procedure displayRGB_displayPicture(uint(size=8) pictureBufferY[352 * 200],
	                                            uint(size=8) pictureBufferU[352 * 200],
	                                            uint(size=8) pictureBufferV[352 * 200],
	                                            int(size=16) pictureWidth, int(size=16) pictureSize) end
	
	/**
	 * Gets flags of display
	 */
	@native function displayRGB_getFlags ( ) --> uint(size=8) end

	/**
	 * Gets the number of frames the display should decode and show
	 * before closing application.
	 */
	@native function displayRGB_getNbFrames() --> int end

	/**
	 * Initializes the compare module.
	 */
	@native procedure compareRGB_init() end

	/**
	 * Compares a picture. Sizes are in pixels.
	 */
	@native procedure compareRGB_comparePicture(uint(size=8) pictureBufferY[352 * 200],
	                                            uint(size=8) pictureBufferU[352 * 200],
	                                            uint(size=8) pictureBufferV[352 * 200],
	                                            int(size=16) pictureWidth, int(size=16) pictureSize) end

	/**
	 * Initializes the frame rate.
	 */
	@native procedure fpsPrintInit() end

	/**
	 * Prints the current frame rate.
	 */
	@native procedure fpsPrintNewPicDecoded() end
	
	/**
	 * Initializes the given display.
	 */
	@native procedure displayRGB444_init(int(size=16) winWidth, int(size=16) winHeight,
										int(size=16) pictureWidth, int(size=16) pictureHeight) end
	/**
	 * Gets event.
	 */
	@native procedure displayRGB_getEvent() end

	/**
	 * Displays a picture. The sizes are in pixels.
	 */
	@native procedure displayRGB444_displayPicture(uint(size=8) pictureBufferY[352 * 200],
											       int(size=8) pictureBufferU[352 * 200],
	                                               uint(size=8) pictureBufferV[352 * 200],
	                                               int(size=16) pictureWidth, int(size=16) pictureHeight) end
	                                               
	@native procedure readRGBpicture(uint(size=8) R[352 * 200], uint(size=8) G[352 * 200], uint(size=8) B[352 * 200]) end
	
	@native procedure displayTrackRect(int x, int y, int w, int h) end
	
	@native function get_pict_width()  --> int end
	
	@native function get_pict_height() --> int end
	
	@native procedure get_mouse_position (int position[2]) end
	
end
