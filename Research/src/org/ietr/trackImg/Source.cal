package org.ietr.trackImg;
import std.stdio.Source.*;
import org.ietr.trackImg.DisplayNative.*;

actor Source () ==> uint(size=8) Red, uint(size=8) Green, uint(size=8) Blue, uint(size=8) RectCoords , int PictSize:

	
	uint(size=8)  R[WIDTH * HEIGHT];
	uint(size=8)  G[WIDTH * HEIGHT];
	uint(size=8)  B[WIDTH * HEIGHT];
	int pictureSizeInMb;
	uint (size=16) blk16x16Counter := 0;	 
	
	ReadFirstPict: action ==> RectCoords:[153, 4, 30, 41], PictSize:[width, height]
	var
		int height,
		int width
	do
		readRGBpicture(R, G, B);
		width  := get_pict_width();
		height := get_pict_height();
		pictureSizeInMb   := width * height / MB_SIZE_IN_PIX;
		//get mouse positions()
	end
	
	ReadPict: action ==> RectCoords:[153, 4, 30, 41], PictSize:[width, height] // to be moved later to next processing blocks
	var
		int height,
		int width
	do
		readRGBpicture(R, G, B);
		width  := get_pict_width();
		height := get_pict_height();
	end
	
	send: action ==> Red:[out_r] repeat MB_SIZE_IN_PIX, Green:[out_g] repeat MB_SIZE_IN_PIX, Blue:[out_b] repeat MB_SIZE_IN_PIX
	guard
		blk16x16Counter < pictureSizeInMb
	var
		uint (size=8) out_r[MB_SIZE_IN_PIX],
		uint (size=8) out_g[MB_SIZE_IN_PIX],
		uint (size=8) out_b[MB_SIZE_IN_PIX]
	do
		foreach int i in 0 .. MB_SIZE_IN_PIX - 1 do
			out_r[i] := R[i + blk16x16Counter * MB_SIZE_IN_PIX];
			out_g[i] := G[i + blk16x16Counter * MB_SIZE_IN_PIX];
			out_b[i] := B[i + blk16x16Counter * MB_SIZE_IN_PIX];
		end
		blk16x16Counter := blk16x16Counter + 1;
	end	
	
	nextPict: action ==>
	guard
		blk16x16Counter = pictureSizeInMb
	do
		blk16x16Counter := 0;
	end
	
	schedule fsm readFirstPicture:
		readFirstPicture	(ReadFirstPict	) --> sendPicture;
		sendPicture			(send			) --> sendPicture;
		sendPicture			(nextPict		) --> readPicture;
		readPicture			(ReadPict		) --> sendPicture;
	end
end