package org.ietr.trackImg;
import std.stdio.Source.*;
actor Source () ==> uint(size=8) Red, uint(size=8) Green, uint(size=8) Blue :

	
	uint(size=8)  R[352 * 200];
	uint(size=8)  G[352 * 200];
	uint(size=8)  B[352 * 200];
	
	initialize ==>
	do
		source_init();
	end
	
	@native procedure readRGBpicture(uint(size=8) R[352 * 200], uint(size=8) G[352 * 200], uint(size=8) B[352 * 200]) end
	uint (size=16) blk16x16Counter := 0;	 
	
	ReadFirstPict: action ==>
	do
		readRGBpicture(R, G, B);
		//get mouse positions
	end
	
	ReadPict: action ==>
	do
		readRGBpicture(R, G, B);
	end
	
	send: action ==> Red:[out_r] repeat 256, Green:[out_g] repeat 256, Blue:[out_b] repeat 256
	guard
		blk16x16Counter < 275 // 275 = 253 * 200 / 256 
	var
		uint (size=8) out_r[256],
		uint (size=8) out_g[256],
		uint (size=8) out_b[256]
	do
		foreach int i in 0 .. 255 do
			out_r[i] := R[i + blk16x16Counter * 256];
			out_g[i] := G[i + blk16x16Counter * 256];
			out_b[i] := B[i + blk16x16Counter * 256];
		end
		blk16x16Counter := blk16x16Counter + 1;
	end	
	
	nextPict: action ==>
	guard
		blk16x16Counter = 275
	do
		blk16x16Counter := 0;
	end
	
	schedule fsm readFirstPicture:
		readFirstPicture	(ReadFirstPict	) --> sendPicture;
		sendPicture			(send			) --> sendPicture;
		sendPicture			(nextPict		) --> readPicture;
		readPicture			(ReadPict		) --> sendPicture;
	end
end