package org.ietr.trackImg;

import org.ietr.trackImg.DisplayNative.*;
import org.ietr.trackImg.TrackConstants.*;

		/* ------------------------------------------ 
		 * |	---------------------				|
		 * |	|	sliding window	|				|
		 * |	|	-----			|				|
		 * |	|	|obj|			|				|
		 * |	|	-----			|				|
		 * |	---------------------				|
		 * |										|
		 * |										|
		 * |	picture								|
		 * |										|
		 * |-----------------------------------------
		 * */

actor tracker () 
	uint(size=8)  Red,
	uint(size=8)  Green,
	uint(size=8)  Blue,
	int SelectedObjCoords,
	int PictSize
	==>
	int RectCoords
	:

	int Rect_x1;
	int Rect_y1;
	int Rect_x2;
	int Rect_y2;
	
	int Rect_h;
	int Rect_w;
	
	int pos1[2]:=[50,50];
	int pos2[2]:=[150,90];
	
	int index_x := 0;
	int index_y := 0;
	
	uint(size=8)  pictureBufferR[WIDTH * HEIGHT];
	uint(size=8)  pictureBufferG[WIDTH * HEIGHT];
	uint(size=8)  pictureBufferB[WIDTH * HEIGHT];
	uint(size=8)  red  [WIDTH/4 * HEIGHT/4];
	uint(size=8)  green[WIDTH/4 * HEIGHT/4];
	uint(size=8)  blue [WIDTH/4 * HEIGHT/4];
	int (size=32) pictureSizeInMb;
	int (size=32) picture_width;
	int (size=32) picture_height;
	int (size=32) nbBlockGot;
	
	uint(size=8) Tar_fea1 [SEL_OBJ_MAX_SZ * 3];
	
	procedure Rec_two_stage_sparse ()
	begin
		
	end
	
	getPictureSize: action PictSize:[width, height] ==>
	do
		picture_width  := width;
		picture_height  := height;
		pictureSizeInMb   := width * height / MB_SIZE_IN_PIX;
		nbBlockGot := 0;
	end

	getBlocks: action Red :[red] repeat MB_SIZE_IN_PIX, Green :[green] repeat MB_SIZE_IN_PIX, Blue :[blue] repeat MB_SIZE_IN_PIX ==>
	guard
		nbBlockGot < pictureSizeInMb
	do	
		foreach int i in 0 .. MB_SIZE_IN_PIX - 1 do
			pictureBufferR[i + MB_SIZE_IN_PIX * nbBlockGot] := red[i];
			pictureBufferG[i + MB_SIZE_IN_PIX * nbBlockGot] := green[i];
			pictureBufferB[i + MB_SIZE_IN_PIX * nbBlockGot] := blue[i];
		end
		nbBlockGot := nbBlockGot + 1;
	end
	
	sendFirstRectSize: action SelectedObjCoords:[x1,y1,x2,y2] ==> RectCoords:[Rect_x1, Rect_y1, Rect_x2, Rect_y2]
	guard
		nbBlockGot = pictureSizeInMb
	do

		Rect_x1 := x1;
		Rect_y1 := y1;
		Rect_x2 := x2;
		Rect_y2 := y2;
		
		initTracking(pictureBufferR, pictureBufferG, pictureBufferB, [picture_width, picture_height], [x1,y1,x2,y2]);

		index_x := 0;
		index_y := 0;
		nbBlockGot := 0;
	end
	
	sendRectSize: action ==> RectCoords:[Rect_x1, Rect_y1, Rect_x2, Rect_y2]
	guard
		nbBlockGot = pictureSizeInMb
	var
		int newCoords[4] := [Rect_x1, Rect_y1, Rect_x2, Rect_y2]
	do
		startTracking(pictureBufferR, pictureBufferG, pictureBufferB, [picture_width, picture_height], newCoords);

		Rect_x1 := newCoords[0];
		Rect_y1 := newCoords[1];
		Rect_x2 := newCoords[2];
		Rect_y2 := newCoords[3];

		index_x := 0;
		index_y := 0;
		nbBlockGot := 0;
	end

	schedule fsm GetFirstPictureSize:
		GetFirstPictureSize 		(getPictureSize			)--> GetFirstBlocks;
		GetFirstBlocks      		(getBlocks  			)--> GetFirstBlocks;
		GetFirstBlocks      		(sendFirstRectSize   	)--> GetPictureSize;
		
		GetPictureSize    			(getPictureSize   		)--> GetBlocks;
		GetBlocks					(getBlocks				)--> GetBlocks;
		GetBlocks					(sendRectSize			)--> GetPictureSize;	
	end
end