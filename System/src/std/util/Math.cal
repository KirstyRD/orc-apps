/********************************************************************************
This software module was originally developed by 
Damien de Saint Jorre (IETR/INSA of Rennes), 
in the course of development of the ISO/IEC 23002-4 (Video Tool Library) 
for reference purposes and its performance may not have been optimized. 
This software module is an implementation of one or more tools as 
specified by the ISO/IEC 23002-4.

ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright 
license to copy, distribute, and make derivative works of this software 
module or modifications thereof for use in implementations of the 
ISO/IEC 23002-4 in products that satisfy conformance criteria (if any). 

Those intending to use this software module in products are advised that 
its use may infringe existing patents. ISO/IEC have no liability for use 
of this software module or modifications thereof.

Copyright is not released for products that do not conform to audiovisual 
and image-coding related ITU Recommendations and/or ISO/IEC International 
Standards.

Assurance that the originally developed software module can be used 
(1) in the ISO/IEC 23002-4 once the ISO/IEC 23002-4 has been adopted; and 
(2) to develop the ISO/IEC 23002-4: 

IETR/INSA of Rennes grants ISO/IEC all rights necessary to 
include the originally developed software module or modifications thereof 
in the ISO/IEC 23002-4 and to permit ISO/IEC to offer You a royalty-free, 
worldwide, non-exclusive, copyright license to copy, distribute, and make 
derivative works for use in implementations of the ISO/IEC 23002-4 in 
products that satisfy conformance criteria (if any), and to the extent 
that such originally developed software module or portions of it are 
included in the ISO/IEC 23002-4.  To the extent that IETR/INSA of Rennes
owns patent rights that would be required to make, use, or 
sell the originally developed software module or portions thereof 
included in the ISO/IEC 23002-4 in a conforming product, IETR/INSA of
Rennes will assure the ISO/IEC that it is willing to 
negotiate licenses under reasonable and non-discriminatory terms and 
conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications 
thereof for the sole  purpose of developing theISO/IEC 23002-4

IETR/INSA of Rennes retains full right to modify and use the 
code for its own purpose, assign or donate the code to a third party and 
to inhibit third parties from using the code for products that do not 
conform to MPEG-related ITU Recommendations and/or ISO/IEC International 
Standards. 

This copyright notice must be included in all copies or derivative works. 
Copyright (c) ISO/IEC 2008.
*****************************************************************************/
package std.util;
unit Math :
/******************************************************************************
* log2 function
*****************************************************************************/
    uint(size=8) log2_tab[256] = [
        0,0,1,1,2,2,2,2,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
        5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
        6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,
        6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,
        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7];
    function log2(int v)
                -->
            int
     var
        int v1 = if (v  & 0xffff0000) != 0 then v>>16 else v  end,
        int n1 = if (v  & 0xffff0000) != 0 then 16    else 0  end,
        int v2 = if (v1 & 0x0000ff00) != 0 then v1>>8 else v1 end,
        int n2 = if (v1 & 0x0000ff00) != 0 then n1+8  else n1 end
        :
            n2 + log2_tab[v2]
     end
     
/******************************************************************************
* log2_i16 function
*****************************************************************************/
    function log2_i16(int v)
                -->
            int
     var
        int n = 0,
        int v2 = if (v & 0xff00) != 0 then v >> 8 else v end,
        int n2 = if (v & 0xff00) != 0 then n + 8  else n end
        :
            n2 + log2_tab[v2]
     end
/******************************************************************************
* Maximum function
*****************************************************************************/
	function max(int a,int b)
				-->
			int
		:
			if(a > b)then
				a
			else
				b
			end
		end
/******************************************************************************
* Minimum function
*****************************************************************************/
	function min(int a,int b)
				-->
			int
		:
			if(a < b)then
				a
			else
				b
			end
		end
/******************************************************************************
* Minimum positive function
*****************************************************************************/
	function minPositive(int a, int b)
				-->
			int
		:
			if( a >= 0 and b >= 0)then
				min(a,b)
			else
				max(a,b)
			end
		end
/******************************************************************************
* Clip_i32 function
*****************************************************************************/
	function clip_i32(int(size=32) Value, int(size=32) minVal, int(size=32) maxVal)
				-->
			int(size=32)
		:
			if Value > maxVal then
				maxVal
			else
				if Value < minVal then
					minVal
				else
					Value
				end
			end
		end
		
/******************************************************************************
* Clip_i32_u8 function (clip i32 value between 0 and 255)
*****************************************************************************/
	function clip_i32_u8(int(size=32) Value)
				-->
			int(size=32)
		:
			if (Value & (~0xFF)) != 0 then 
			  (-Value) >> 31
            else 
              Value 
            end
		end
/******************************************************************************
* Median fonction
*****************************************************************************/
	function median(int a, int b, int c)
				-->
			int
		:
			if(   b<=a and a<=c
			   or c<=a and a<=b )then
				a
			else
				if(   a<=b and b<=c
				   or c<=b and b<=a )then
					b
				else
					c
				end
			end
		end
/******************************************************************************
* Abs function
*****************************************************************************/
	function abs(int(size=32) x)
				-->
			int(size=32)
		:
			if(x > 0)then
				x
			else
				-x
			end
		end
/******************************************************************************
* "Ceiling function" for divisions (int numerator, int denominator)
*****************************************************************************/
	function vpla(uint(size=32) x,uint(size=32) a)
				-->
			uint(size=32)
		:
			if (x mod a)=0 then
				x/a
			else
				1+(x/a)
			end
		end
/******************************************************************************
* "Ceiling function" for divisions by powers of two
*****************************************************************************/
	function ceilp2(uint(size=32) x, uint(size=32) n)
				-->
			uint(size=32)
			
			var
				uint(size=32) ivar =(x&((1<<n)-1))
				
			:
				if ivar=0 then
					x>>n
				else
					(x>>n)+1
				end			
		end
/******************************************************************************
* "InverseRasterScan function" 
*****************************************************************************/
	function InverseRasterScan(uint(size=32) a, uint(size=32) b,
		uint(size=32) c, uint(size=32) d, uint(size=32) e
	) --> uint(size=32)	
	:
		if e=0 then
			(a mod ( (d+b-1) / b ) ) * b
		else
			(a / ( (d+b-1) / b ) ) * c			
		end
	end

	function Sign3(int value) --> int(size=3)
	:
		if(value>0) then 1
		else if(value=0) then 0
		else -1
		end end
	end

	/*@native*/ function castBoolToInt(bool a) --> int(size=32)
	:
		if(a) then 1
		else 0
		end
	end
end