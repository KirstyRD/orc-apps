/*
 * Copyright (c) 2017, Heriot-Watt University, Edinburgh
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the IRISA nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * Author: Rob Stewart <R.Stewart@hw.ac.uk>
 * Date: 30.01.2017
 *
 * Takes a stream constituting an image, and outputs a stream
 * constituting a scaled version of the input image. The scaling factor
 * `scaleFactorWidth` determines the increased width and `scaleFactorHeight`
 * determines the increased height of the output image. E.g. a 512x512 input
 * image with scaleFactorWidth=2 and scaleFactorHeight=3, will transform
 * into an output image stream with dimensions 1024x1536.
 */
 
package image.geometric;

actor Scale () int(size=16) In1 ==> int(size=16) Out1 :

    /* constants */
	uint(size=16) imageWidth = 256;
	uint(size=16) scaleFactorWidth = 2;
	uint(size=16) scaleFactorHeight = 3;

	/* track how many row elements have been consumed */
	uint(size=16) x := 0;

    /* the row buffer to be outputted <scaleFactorHeight> times */
	uint(size=16) outputRow [ imageWidth * scaleFactorWidth ];

    /* keep track of how many times the row has been outputted */
	uint(size=16) rowRepeated := 1;

	consumeRow: action In1:[ token ] ==>
	                   Out1:[ [ token : for int(size=16) i in 1 .. scaleFactorWidth ] ]
	                   repeat scaleFactorWidth
	guard
		x < imageWidth
	do
		foreach int(size=16) i in 0 .. (scaleFactorWidth - 1) do
			outputRow[x * scaleFactorWidth + i] := token;
		end
		x := x + 1;
	end

	repeatRowExpanded: action ==> Out1:[ outputRow ]
	                              repeat imageWidth * scaleFactorWidth
	guard
		x = imageWidth , rowRepeated < scaleFactorHeight
	do
		rowRepeated := rowRepeated + 1;
	end

	reset: action ==>
	guard
		rowRepeated = scaleFactorHeight
	do
		rowRepeated := 1;
		x := 0;
	end

end