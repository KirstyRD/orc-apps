/*
 * Copyright (c) 2017, Heriot-Watt University, Edinburgh
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the IRISA nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * Author: Calum Turner <cajturner@gmail.com>
 * Date: 08.02.2017
 * See intensity_histogram.md for documentation.
 */

package image.image_processing;
import image.constants.constants.*;

actor intensity_histogram() uint(size=8) Gin1 ==> uint(size=8) Gout :
	uint(size=32) imagesize = IM_WIDTH_OUT * IM_HEIGHT_OUT * COLOUR_CHANNELS_OUT;
    uint(size=32) p_count := 0;
	uint(size=8) histogram [255] := [0]; 
	uint(size=8) o_count := 0;
	uint(size=8) i := 0;
	
	initActor: action ==> do
	o_count := 0;
	p_count := 0;
	i := 0;
	end
	
	initArray: action ==> do
	histogram[i] := 0;
	println("init "+i);
	i := i+1;
	
	end
	
	initDone: action ==>
    guard i < 255
    end
    
    processPixels: action Gin1:[x] ==> 
    guard
    	i = 255
    do
    histogram[x] := histogram[x] + 1;
    p_count := p_count + 1;
    end
    
    outputArray: action ==> Gout:[histogram[o_count]] 
    guard
    	p_count = imagesize,
    	i = 255,
    	o_count < 255
    do
    println("hist "+o_count+" - "+histogram[o_count]);
    o_count := o_count + 1;
   
    end
    
    resetActor: action ==> 
    guard
    	o_count = 255
    end
	
	schedule fsm init:
		init (initActor) --> initHist;
		initHist (initArray) --> read;
		read (initDone) --> initHist;
		read (processPixels) --> read;
        read (outputArray) --> read;
        read (resetActor) --> init;
    end

end