package aes.dec;

actor InversMixColumn()
	int Statement_In,
	int NB,
	int Done,
	int Word
		==>
			int Statement_Out,
			int I_Out,
			int Statement_Update :
			
	int word[4][120];
	
	get_word: action Word:[w] repeat 480 ==>
	var
		int i,
		int j
	do
		i := 0;
		j := 0;
		
		while i < 4 do
			while j < 120 do
				word[i][j] := w[j + 120 * i];
				j := j + 1;
			end
			i := i + 1;
			j := 0;
		end
	end
	
	bypass: action NB:[nb], Done:[d] repeat 2, Statement_In:[stmt] repeat 32 
					==> 
						I_Out:[0], Statement_Out:[stmt] repeat 32
	guard 
		d[0] = 1 
	end

	calc: action NB:[nb], Done:[d] repeat 2, Statement_In:[statemt] repeat 32 
					==> 
						Statement_Update:[statemt] repeat 32
	guard
		d[0] = 0
	var
		int n,
		int ret[32], 
		int i, 
		int j,
		int x
	do
		n := d[1];
		j := 0;
		
		while j < nb do
			statemt[j * 4] := statemt[j * 4] ^ word[0][j + nb * n];
			statemt[1 + j * 4] := statemt[1 + j * 4] ^ word[1][j + nb * n];
			statemt[2 + j * 4] := statemt[2 + j * 4] ^ word[2][j + nb * n];
			statemt[3 + j * 4] := statemt[3 + j * 4] ^ word[3][j + nb * n];		
			j := j + 1;
		end
		
		j := 0;
		
		while j < nb do
			i := 0;
			
			while i < 4 do
				x := statemt[i + j * 4] << 1;
				if x >> 8 = 1 then
					x := x ^ 283;
				end
				x := x ^ statemt[i + j * 4];
				x := x << 1;
				if x >> 8 = 1 then
					x := x ^ 283;
				end
				x := x ^ statemt[i + j * 4];
				x := x << 1;
				if x >> 8 = 1 then
					x := x ^ 283;
				end
				ret[i + j * 4] := x;
				
				x := statemt[(i + 1) mod 4 + j * 4] << 1;
				if x >> 8 = 1 then
					x := x ^ 283;
				end
				x := x << 1;
				if x >> 8 = 1 then
					x := x ^ 283;
				end
				x := x ^ statemt[(i + 1) mod 4 + j * 4];
				x := x << 1;
				if x >> 8 = 1 then
					x := x ^ 283;
				end
				x := x ^ statemt[(i + 1) mod 4 + j * 4];
				ret[i + j * 4] := ret[i + j *4] ^ x;
				
				x := statemt[(i + 2) mod 4 + j * 4] << 1;
				if x >> 8 = 1 then
					x := x ^ 283;
				end
				x := x ^ statemt[(i + 2) mod 4 + j * 4];
				x := x << 1;
				if x >> 8 = 1 then
					x := x ^ 283;
				end
				x := x << 1;
				if x >> 8 = 1 then
					x := x ^ 283;
				end
				x := x ^ statemt[(i + 2) mod 4 + j * 4];
				ret[i + j * 4] := ret[i + j *4] ^ x;
				
				x := statemt[(i + 3) mod 4 + j * 4] << 1;
				if x >> 8 = 1 then
					x := x ^ 283;
				end
				x := x << 1;
				if x >> 8 = 1 then
					x := x ^ 283;
				end
				x := x << 1;
				if x >> 8 = 1 then
					x := x ^ 283;
				end
				x := x ^ statemt[(i + 3) mod 4 + j * 4];
				ret[i + j * 4] := ret[i + j * 4] ^ x;
				i := i + 1;
			end
			j := j + 1;
		end
		
		i := 0;
		
		while i < nb do
			statemt[i * 4] := ret[i * 4];
			statemt[1 + i * 4] := ret[1 + i * 4];
			statemt[2 + i * 4] := ret[2 + i * 4];
			statemt[3 + i * 4] := ret[3 + i * 4];
			i := i + 1;
		end
	end
	
	schedule fsm init:
		init	(get_word) --> read;
		read	(bypass)   --> init;
		read	(calc) 	   --> read;
	end	
end