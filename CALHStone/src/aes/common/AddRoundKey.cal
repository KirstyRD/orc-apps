package aes.common;

actor AddRoundKey() int N, int Type, int Statement_In, int Word ==> int Statement_Out :
	int nb := 0;
	int n := 0;
	int statemt[32];
	int word[4][120];
	int typ := 0;
	
	read: action N:[n_in], Type:[typ_in], Statement_In:[stmt] repeat 32, Word:[w] repeat 480 ==>
	var
		int i,
		int j
	do
		n := n_in;
		typ := typ_in;
		statemt := stmt;
		
		i := 0;
		j := 0;
		
		while i < 4 do
			while j < 120 do
				word[i][j] := w[j + 120 * i];
				j := j + 1;
			end
			i := i + 1;
			j := 0;
		end
	end
	
	case.typ128: action ==>
	guard
		typ = 128128 or typ = 192128 or typ = 256128
	do
		nb := 4;
	end

	case.typ192: action ==>
	guard
		typ = 128192 or typ = 192192 or typ = 256192
	do
		nb := 6;
	end

	case.typ256: action ==>
	guard
		typ = 128256 or typ = 192256 or typ = 256256
	do
		nb := 8;
	end
	
	calc: action ==> Statement_Out:[statemt] repeat 32
	var
		int j := 0
	do
		while j < nb do
			statemt[j * 4] := statemt[j * 4] ^ word[0][j + nb * n];
			statemt[1 + j * 4] := statemt[1 + j * 4] ^ word[1][j + nb * n];
			statemt[2 + j * 4] := statemt[2 + j * 4] ^ word[2][j + nb * n];
			statemt[3 + j * 4] := statemt[3 + j * 4] ^ word[3][j + nb * n];
      	
      		j := j + 1;
      	end
	end
	
	schedule fsm init:
		init	 (read) --> get_nb;
		get_nb	 (case) --> get_stmt;
		get_stmt (calc) --> init;
	end
end