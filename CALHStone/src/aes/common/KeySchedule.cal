package aes.common;

import aes.common.Constants.*;

@xronos_pipeline(gd="100")
actor KeySchedule() int Type, int Key ==> int Word :
	int nk;
	int nb;
	int round;
	int typ;
	int key[32];
	int word[4][120];

	function SubByte (int n)  --> int :
		Sbox[(n / 16)][(n mod 16)] 
	end
	
	read: action Type:[t], Key:[k] repeat 32 ==>
	do
		typ := t;
		key := k;
	end
	
    case.typ_128128: action ==>
    guard
    	typ = 128128
    do
      nk := 4;
      nb := 4;
      round := 10;
    end
    
    case.typ_128192: action ==>
    guard
    	typ = 128192
    do
      nk := 4;
      nb := 6;
      round := 12;
	end
    
    case.typ_128256: action ==>
    guard
    	typ = 128256
    do
      nk := 4;
      nb := 8;
      round := 14;
	end
	
    case.typ_192128: action ==>
    guard
    	typ = 192128
    do
      nk := 6;
      nb := 4;
      round := 12;
    end

    case.typ_192192: action ==>
    guard
    	typ = 192192
    do
      nk := 6;
      nb := 6;
      round := 12;
    end

    case.typ_192256: action ==>
    guard
    	typ = 192256
    do
      nk := 6;
      nb := 8;
      round := 14;
    end
    
    case.typ_256128: action ==>
    guard
    	typ = 256128
    do
      nk := 8;
      nb := 4;
      round := 14;
    end
    
    case.typ_256192: action ==>
    guard
    	typ = 256192
    do
      nk := 8;
      nb := 6;
      round := 14;
    end
    
    case.typ_256256: action ==>
    guard
    	typ = 256256
    do
      nk := 8;
      nb := 8;
      round := 14;
    end

	calc: action ==> Word:[w] repeat 480
	var
		int i,
		int j,
		int temp[4],
		int w[480]
	do
		i := 0;
		j := 0;
		while j < nk do
			while i < 4 do
				/* 0 word */
				word[i][j] := key[i + j * 4];
				i := i + 1;
			end
			j := j + 1;
			i := 0;
		end
		j := nk;
		/* expanded key is generated */
		while j < nb * (round + 1) do
			/* RotByte */
      		if (j mod nk) = 0 then
				temp[0] := SubByte (word[1][j - 1]) ^ Rcon0[(j / nk) - 1];
				temp[1] := SubByte (word[2][j - 1]);
				temp[2] := SubByte (word[3][j - 1]);
				temp[3] := SubByte (word[0][j - 1]);
	  		end
      		if (j mod nk) != 0 then
				temp[0] := word[0][j - 1];
				temp[1] := word[1][j - 1];
				temp[2] := word[2][j - 1];
				temp[3] := word[3][j - 1];
	  		end
      		if nk > 6 and j mod nk = 4 then
      			i := 0;
      			while i < 4 do
					temp[i] := SubByte (temp[i]);
      				i := i + 1;
      			end
      		end
      		i := 0;
      		while i < 4 do
				word[i][j] := word[i][j - nk] ^ temp[i];
      			i := i + 1;
      		end
			j := j + 1;
		end
		i := 0;
		j := 0;
		while i < 4 do
			while j < 120 do
				w[120 * i + j] := word[i][j];
				j := j + 1;
			end
			i := i + 1;
			j := 0;
		end
	end
	
		schedule fsm init:
		init	 (read) --> get_nb;
		get_nb	 (case) --> get_stmt;
		get_stmt (calc) --> init;
	end
	
end