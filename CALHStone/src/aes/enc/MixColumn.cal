package aes.enc;

actor MixColumn()
	int Statement_In,
	int NB,
	int Done,
	int Word
		==>
			int Statement_Out,
			int I_Out,
			int Statement_Update :
			
	int word[4][120];
	
	get_word: action Word:[w] repeat 480 ==>
	var
		int i,
		int j
	do
		i := 0;
		j := 0;
		
		while i < 4 do
			while j < 120 do
				word[i][j] := w[j + 120 * i];
				j := j + 1;
			end
			i := i + 1;
			j := 0;
		end
	end
	
	bypass: action NB:[nb], Done:[d] repeat 2, Statement_In:[stmt] repeat 32 
					==> 
						I_Out:[d[1]], Statement_Out:[stmt] repeat 32
	guard 
		d[0] = 1 
	end

	calc: action NB:[nb], Done:[d] repeat 2, Statement_In:[statemt] repeat 32 
					==> 
						Statement_Update:[statemt] repeat 32
	guard 
		d[0] = 0
	var
		int n,
		int j,
		int x,
		int ret[32] //register int x in c code
		
	do
		n := d[1];
		j := 0;
		
		while j < nb do
			ret[j * 4] := statemt[j * 4] << 1;
			
			if ret[j * 4] >> 8 = 1 then
				ret[j * 4] := ret[j * 4] ^ 283;
			end
			x := statemt[1 + j * 4];
			x := x ^ (x << 1);
			if (x >> 8) = 1 then
				ret[j * 4] := ret[j * 4] ^ (x ^ 283);
			else
				ret[j * 4] := ret[j * 4] ^ x;
			end
			ret[j * 4] := ret[j * 4] ^ statemt[2 + j * 4] ^ statemt[3 + j * 4] ^ word[0][j + nb * n];
			ret[1 + j * 4] := statemt[1 + j * 4] << 1;
			if (ret[1 + j * 4] >> 8) = 1 then
				ret[1 + j * 4] := ret[1 + j * 4] ^ 283;
			end
			x := statemt[2 + j * 4];
			x := x ^ (x << 1);
			if (x >> 8) = 1 then
				ret[1 + j * 4] := ret[1 + j * 4] ^ (x ^ 283);
			else
				ret[1 + j * 4] := ret[1 + j * 4] ^ x;
			end
			ret[1 + j * 4] := ret[1 + j * 4] ^ statemt[3 + j * 4] ^ statemt[j * 4] ^ word[1][j + nb * n];
			ret[2 + j * 4] := statemt[2 + j * 4] << 1;
			if (ret[2 + j * 4] >> 8) = 1 then
				ret[2 + j * 4] := ret[2 + j * 4] ^ 283;
			end
			x := statemt[3 + j * 4];
			x := x ^ (x << 1);
			if (x >> 8) = 1 then
				ret[2 + j * 4] := ret[2 + j * 4] ^ (x ^ 283);
			else
				ret[2 + j * 4] := ret[2 + j * 4] ^ x;
			end
			ret[2 + j * 4] := ret[2 + j * 4] ^ statemt[j * 4] ^ statemt[1 + j * 4] ^ word[2][j + nb * n];
			ret[3 + j * 4] := (statemt[3 + j * 4] << 1);
			if (ret[3 + j * 4] >> 8) = 1 then
				ret[3 + j * 4] := ret[3 + j * 4] ^ 283;
			end
			x := statemt[j * 4];
			x := x ^ (x << 1);
			if (x >> 8) = 1 then
				ret[3 + j * 4] := ret[3 + j * 4] ^ (x ^ 283);
			else
				ret[3 + j * 4] := ret[3 + j * 4] ^ x;
			end
			ret[3 + j * 4] := ret[3 + j * 4] ^ statemt[1 + j * 4] ^ statemt[2 + j * 4] ^ word[3][j + nb * n];
	
		j := j + 1;	
		end
		
		j := 0;
		
		while j < nb do
			statemt[j * 4] := ret[j * 4];
			statemt[1 + j * 4] := ret[1 + j * 4];
			statemt[2 + j * 4] := ret[2 + j * 4];
			statemt[3 + j * 4] := ret[3 + j * 4];
		j := j + 1;
		end
	end
	
	schedule fsm init:
		init	(get_word) --> read;
		read	(bypass)   --> init;
		read	(calc) 	   --> read;
	end	
end