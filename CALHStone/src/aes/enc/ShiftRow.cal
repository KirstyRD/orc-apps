/*
 * Copyright (c) 2014, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
 
package aes.enc;

import aes.common.Constants.*;

actor ShiftRow()
	int Round,
	int NB,
	int Statement_In,
	int Statement_Update
		==>
			int NB_Out,
			int Done,
			int Statement_Out:

	
	int i := 1;
	int r := 0;
	int nb := 0;
	
	int statemt[32];// := [0: for int i in 0 .. 31];
	
	read_first: action Round:[round], NB:[n], Statement_In:[stmt] repeat 32 ==>
	guard
		i = 1
	do
		r := round;
		nb := n;
		statemt := stmt;
	end

	read_loop: action Statement_Update:[stmt_u] repeat 32 ==>
	guard
		i > 1
	do
		statemt := stmt_u;
	end
	
	output: action ==> Statement_Out:[statemt] repeat 32, NB_Out:[nb], Done:[done,i_out]
	var
		int done, 
		int i_out
		
	do
		i_out := i;
		
		if i > r + 9 then
			done := 1;
			i := 1;
		else
			done := 0;
			i := i + 1;
		end
	end
	
	case.Nb4: action ==>
	guard
		nb = 4
	var
		int temp
	do
		temp := Sbox[statemt[1] >> 4][statemt[1] & 0xf];
		statemt[1] := Sbox[statemt[5] >> 4][statemt[5] & 0xf];
		statemt[5] := Sbox[statemt[9] >> 4][statemt[9] & 0xf];
		statemt[9] := Sbox[statemt[13] >> 4][statemt[13] & 0xf];
		statemt[13] := temp;
		
		temp := Sbox[statemt[2] >> 4][statemt[2] & 0xf];
		statemt[2] := Sbox[statemt[10] >> 4][statemt[10] & 0xf];
		statemt[10] := temp;
		temp := Sbox[statemt[6] >> 4][statemt[6] & 0xf];
		statemt[6] := Sbox[statemt[14] >> 4][statemt[14] & 0xf];
		statemt[14] := temp;
		
		temp := Sbox[statemt[3] >> 4][statemt[3] & 0xf];
		statemt[3] := Sbox[statemt[15] >> 4][statemt[15] & 0xf];
		statemt[15] := Sbox[statemt[11] >> 4][statemt[11] & 0xf];
		statemt[11] := Sbox[statemt[7] >> 4][statemt[7] & 0xf];
		statemt[7] := temp;
		
		statemt[0] := Sbox[statemt[0] >> 4][statemt[0] & 0xf];
		statemt[4] := Sbox[statemt[4] >> 4][statemt[4] & 0xf];
		statemt[8] := Sbox[statemt[8] >> 4][statemt[8] & 0xf];
		statemt[12] := Sbox[statemt[12] >> 4][statemt[12] & 0xf];
	end 
	
	
	case.Nb6: action ==>
	guard
		nb = 6
	var
		int temp
	do
		temp := Sbox[statemt[1] >> 4][statemt[1] & 0xf];
     	statemt[1] := Sbox[statemt[5] >> 4][statemt[5] & 0xf];
	    statemt[5] := Sbox[statemt[9] >> 4][statemt[9] & 0xf];
    	statemt[9] := Sbox[statemt[13] >> 4][statemt[13] & 0xf];
      	statemt[13] := Sbox[statemt[17] >> 4][statemt[17] & 0xf];
	    statemt[17] := Sbox[statemt[21] >> 4][statemt[21] & 0xf];
	    statemt[21] := temp;
	
	    temp := Sbox[statemt[2] >> 4][statemt[2] & 0xf];
	    statemt[2] := Sbox[statemt[10] >> 4][statemt[10] & 0xf];
	    statemt[10] := Sbox[statemt[18] >> 4][statemt[18] & 0xf];
	    statemt[18] := temp;
	    temp := Sbox[statemt[6] >> 4][statemt[6] & 0xf];
	    statemt[6] := Sbox[statemt[14] >> 4][statemt[14] & 0xf];
	    statemt[14] := Sbox[statemt[22] >> 4][statemt[22] & 0xf];
	    statemt[22] := temp;
	
	    temp := Sbox[statemt[3] >> 4][statemt[3] & 0xf];
	    statemt[3] := Sbox[statemt[15] >> 4][statemt[15] & 0xf];
	    statemt[15] := temp;
	    temp := Sbox[statemt[7] >> 4][statemt[7] & 0xf];
	    statemt[7] := Sbox[statemt[19] >> 4][statemt[19] & 0xf];
	    statemt[19] := temp;
	    temp := Sbox[statemt[11] >> 4][statemt[11] & 0xf];
	    statemt[11] := Sbox[statemt[23] >> 4][statemt[23] & 0xf];
	    statemt[23] := temp;
	
	    statemt[0] := Sbox[statemt[0] >> 4][statemt[0] & 0xf];
	    statemt[4] := Sbox[statemt[4] >> 4][statemt[4] & 0xf];
	    statemt[8] := Sbox[statemt[8] >> 4][statemt[8] & 0xf];
	    statemt[12] := Sbox[statemt[12] >> 4][statemt[12] & 0xf];
	    statemt[16] := Sbox[statemt[16] >> 4][statemt[16] & 0xf];
	    statemt[20] := Sbox[statemt[20] >> 4][statemt[20] & 0xf];
	end 
	
	case.Nb8: action ==> 
	guard
		nb = 8
	var
		int temp
	do
		temp := Sbox[statemt[1] >> 4][statemt[1] & 0xf];
	    statemt[1] := Sbox[statemt[5] >> 4][statemt[5] & 0xf];
	    statemt[5] := Sbox[statemt[9] >> 4][statemt[9] & 0xf];
	    statemt[9] := Sbox[statemt[13] >> 4][statemt[13] & 0xf];
	    statemt[13] := Sbox[statemt[17] >> 4][statemt[17] & 0xf];
	    statemt[17] := Sbox[statemt[21] >> 4][statemt[21] & 0xf];
	    statemt[21] := Sbox[statemt[25] >> 4][statemt[25] & 0xf];
	    statemt[25] := Sbox[statemt[29] >> 4][statemt[29] & 0xf];
	    statemt[29] := temp;
	
	    temp := Sbox[statemt[2] >> 4][statemt[2] & 0xf];
	    statemt[2] := Sbox[statemt[14] >> 4][statemt[14] & 0xf];
	    statemt[14] := Sbox[statemt[26] >> 4][statemt[26] & 0xf];
	    statemt[26] := Sbox[statemt[6] >> 4][statemt[6] & 0xf];
	    statemt[6] := Sbox[statemt[18] >> 4][statemt[18] & 0xf];
	    statemt[18] := Sbox[statemt[30] >> 4][statemt[30] & 0xf];
	    statemt[30] := Sbox[statemt[10] >> 4][statemt[10] & 0xf];
	    statemt[10] := Sbox[statemt[22] >> 4][statemt[22] & 0xf];
	    statemt[22] := temp;
	
	    temp := Sbox[statemt[3] >> 4][statemt[3] & 0xf];
	    statemt[3] := Sbox[statemt[19] >> 4][statemt[19] & 0xf];
	    statemt[19] := temp;
	    temp := Sbox[statemt[7] >> 4][statemt[7] & 0xf];
	    statemt[7] := Sbox[statemt[23] >> 4][statemt[23] & 0xf];
	    statemt[23] := temp;
	    temp := Sbox[statemt[11] >> 4][statemt[11] & 0xf];
	    statemt[11] := Sbox[statemt[27] >> 4][statemt[27] & 0xf];
	    statemt[27] := temp;
	    temp := Sbox[statemt[15] >> 4][statemt[15] & 0xf];
	    statemt[15] := Sbox[statemt[31] >> 4][statemt[31] & 0xf];
	    statemt[31] := temp;
	
	    statemt[0] := Sbox[statemt[0] >> 4][statemt[0] & 0xf];
	    statemt[4] := Sbox[statemt[4] >> 4][statemt[4] & 0xf];
	    statemt[8] := Sbox[statemt[8] >> 4][statemt[8] & 0xf];
	    statemt[12] := Sbox[statemt[12] >> 4][statemt[12] & 0xf];
	    statemt[16] := Sbox[statemt[16] >> 4][statemt[16] & 0xf];
	    statemt[20] := Sbox[statemt[20] >> 4][statemt[20] & 0xf];
	    statemt[24] := Sbox[statemt[24] >> 4][statemt[24] & 0xf];
	    statemt[28] := Sbox[statemt[28] >> 4][statemt[28] & 0xf];
	end 
	
	schedule fsm init:
		init	(read_first) --> busy;
		init	(read_loop)  --> busy;
		busy	(case)		 --> out;
		out 	(output)	 --> init;
	end
	
end