// pulseShape.cal
//
// Copyright (c) 2013 University of Oulu, Finland
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
// Author: 
// Jani Boutellier (jani.boutellier@ee.oulu.fi)
// Department of Computer Science and Engineering
// University of Oulu, Finland
//
// Description:
// Half-sine pulse shaper for IEEE 802.15.4 (ZigBee) Baseband
// transmission. Based on the C code implementation written
// by Amanullah Ghazi. Described in SDR-WInnComm 2013 paper
// "Low-complexity SDR Implementation of IEEE 802.15.4 (ZigBee)
// Baseband Transceiver on Application Specific Processor" 
//
// Changelog:
// - initial version 01/10/2012
// - cleanup for release 08/10/2012
// - multitoken-version 04/03/2013
// - added "done" port 24/04/2014
// - new monotoken implementation 06/05/2014

package monotoken_tx;
import common_tx.constants.*;

actor pulseShape() 
// Inputs:
int(size=SYMB_SZ) symb,             // I-Q symbols from QPSK modulator 
uint(size=PAYLOAD_LEN_SZ) len       // Payload length
// Outputs:
==> 
bool done,                          // Flag to terminate
int(size=HSP_SZ) hsp                // Half-sine pulse samples
:
	int(size=SYMB_SZ) symb[4];      // Temporary storage for symbol values during transmission
 
	int(size=13) body_iterations;   // Number of times the "body" part of the transmission has to be repeated 
	int(size=13) body_index;        // Number of times the "body" part of the transmission has been repeated

	int(size=4) hsp_count;          // counter for half-sine pulse samples transmitted

    int FILT_COEFF0 = 0x00;         // Static filter coefficients for half-sine pulse generation
    int FILT_COEFF1 = 0x31;
    int FILT_COEFF2 = 0x5a;
    int FILT_COEFF3 = 0x76;
    int FILT_COEFF4 = 0x7f;

	int coeffs[16] := [FILT_COEFF0,FILT_COEFF4,FILT_COEFF1,FILT_COEFF3,FILT_COEFF2,FILT_COEFF2,FILT_COEFF3,
		FILT_COEFF1,FILT_COEFF4,FILT_COEFF0,FILT_COEFF3,FILT_COEFF1,FILT_COEFF2,FILT_COEFF2,FILT_COEFF1,FILT_COEFF3];

	// fixed-point multiplication with shift
	function mul8( int x, int y ) --> int :
		(x * y) >> 7
	end

	// one-time initialization routine
	initialize ==>
	do
		symb[3] := 0x7F;
	end
	
	// init action
	// Fired when payload length is known
	init: action len:[ len_in ] ==>
	do
		body_iterations := len_in * 32; 
		body_index := 0;
		symb[2] := 0x7F;
	end

	// read1 action
	// read first symbol
	read1: action symb:[ symb_in ] ==>
	guard
		body_index < body_iterations
	do
		symb[0] := symb_in;
	end

	// read2 action
	// read second symbol
	read2: action symb:[ symb_in ] ==>
	do
		symb[1] := symb_in;
		hsp_count := 0;
	end
	
	// tx_body1 action
	// produces a half-sine pulse sample
	tx_body1: action ==> hsp:[ hsp_out ]
	guard
		hsp_count < 8
	var
		int(size=HSP_SZ) hsp_out
	do	
		hsp_out := mul8(coeffs[hsp_count], symb[(hsp_count & 1) << 1]);
		hsp_count := hsp_count + 1;
	end

	// tx_body1_done action
	// transition to tx_body2
	tx_body1_done: action ==>
	do
		hsp_count := 0;
	end
		
	// tx_body2 action
	// produces a half-sine pulse sample
	tx_body2: action ==> hsp:[ hsp_out ]
	guard
		hsp_count < 8
	var
		int(size=HSP_SZ) hsp_out
	do	
		hsp_out := mul8(coeffs[hsp_count+8], symb[hsp_count & 1]);
		hsp_count := hsp_count + 1;
	end
		
	// tx_body1_done action
	// transition to tx_tail
	tx_body2_done: action ==>
	do
		symb[2] := symb[1];
		body_index := body_index + 1; 
		hsp_count := 0;
	end

	// tx_tail_start action
	// Start transmitting tail
	tx_tail_start: action ==>
	guard
		body_index = body_iterations
	end

	// tx_tail_body action
	// produces a half-sine pulse sample
	tx_tail_body: action ==> hsp:[ hsp_out ]
	guard
		hsp_count < 8
	var
		int(size=HSP_SZ) hsp_out
	do
		hsp_out := mul8(coeffs[hsp_count], symb[3-(hsp_count & 1)]);
		hsp_count := hsp_count + 1;
	end

	// tx_tail_done action
	// transition to init
	tx_tail_done: action ==> done: [ true ]
	do
		hsp_count := 0;
	end

	schedule fsm s_start :
		s_start ( init ) --> s_read1;

		s_read1 ( tx_tail_start ) --> s_tx_tail;
		s_tx_tail ( tx_tail_body ) --> s_tx_tail;
		s_tx_tail ( tx_tail_done ) --> s_start;

		s_read1 ( read1 ) --> s_read2;
		s_read2 ( read2 ) --> s_tx_body1;
		s_tx_body1 ( tx_body1 ) --> s_tx_body1;
		s_tx_body1 ( tx_body1_done ) --> s_tx_body2;
		s_tx_body2 ( tx_body2 ) --> s_tx_body2;
		s_tx_body2 ( tx_body2_done ) --> s_read1;
	end
	
	priority
		tx_tail_body > tx_tail_done;
		tx_body2 > tx_body2_done;
		tx_body1 > tx_body1_done;
	end

end
