// adder.cal
//
// Copyright (c) 2015 University of Oulu, Finland
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
// Author: 
// Jani Boutellier (jani.boutellier@ee.oulu.fi)
// Department of Computer Science and Engineering
// University of Oulu, Finland
//
// Description:
// 5-input complex addition for a Digital Predistortion Filter implementation. 
// Related publication: "Mobile Transmitter Digital Predistortion: 
// Feasibility Analysis, Algorithms and Design Exploration" at Asilomar 2013.
//
// Changelog:
// - initial version 15/07/2015

package filter_dpd_multi;

import filter_dpd_multi.constants.*;

actor adder(float i_in_lo, float q_in_lo) 
// Inputs:
float i_in1, float q_in1,
float i_in2, float q_in2,
float i_in3, float q_in3,
float i_in4, float q_in4,
float i_in5, float q_in5
// Outputs:
==> 
float i_out, float q_out
:

	action 
	i_in1:[ re1 ] repeat RATE, q_in1:[ im1 ] repeat RATE,
	i_in2:[ re2 ] repeat RATE, q_in2:[ im2 ] repeat RATE,
	i_in3:[ re3 ] repeat RATE, q_in3:[ im3 ] repeat RATE,
	i_in4:[ re4 ] repeat RATE, q_in4:[ im4 ] repeat RATE,
	i_in5:[ re5 ] repeat RATE, q_in5:[ im5 ] repeat RATE
	==> 
	i_out:[ i ] repeat RATE, q_out:[ q ] repeat RATE
	var
		float i[RATE],
		float q[RATE]
	do
		foreach int j in 0 .. RATE-1
		do
			i[j] := re1[j] + re2[j] + re3[j] + re4[j] + re5[j] + i_in_lo;
			q[j] := im1[j] + im2[j] + im3[j] + im4[j] + im5[j] + q_in_lo;
		end
    end
	
end