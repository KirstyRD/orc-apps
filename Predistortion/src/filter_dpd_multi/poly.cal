// poly.cal
//
// Copyright (c) 2015 University of Oulu, Finland
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
// Author: 
// Jani Boutellier (jani.boutellier@ee.oulu.fi)
// Department of Computer Science and Engineering
// University of Oulu, Finland
//
// Description:
// Polynomial computation for a multi-token Digital Predistortion Filter.
// Related publication: "Mobile Transmitter Digital Predistortion: 
// Feasibility Analysis, Algorithms and Design Exploration" at Asilomar 2013.
//
// Changelog:
// - initial version 15/07/2015

package filter_dpd_multi;

import filter_dpd_multi.constants.*;

actor poly() 
// Inputs:
float i_in, float q_in
// Outputs:
==> 
float i_out1, float q_out1,
float i_out2, float q_out2,
float i_out3, float q_out3,
float i_out4, float q_out4,
float i_out5, float q_out5
:	
	action
	i_in:[ i ] repeat RATE, q_in:[ q ] repeat RATE
	==> 
	i_out1:[ io1 ] repeat RATE, q_out1:[ qo1 ] repeat RATE,
	i_out2:[ io2 ] repeat RATE, q_out2:[ qo2 ] repeat RATE,
	i_out3:[ io3 ] repeat RATE,	q_out3:[ qo3 ] repeat RATE,
	i_out4:[ io4 ] repeat RATE, q_out4:[ qo4 ] repeat RATE,
	i_out5:[ io5 ] repeat RATE, q_out5:[ qo5 ] repeat RATE
	var
		float io1[RATE],
		float qo1[RATE],
		float io2[RATE],
		float qo2[RATE],
		float io3[RATE],
		float qo3[RATE],
		float io4[RATE],
		float qo4[RATE],
		float io5[RATE],
		float qo5[RATE],
		float abs_sqr_o,
		float neg_1_o,
		float mul_1_o,
		float sq_o,
		float mul_2_o,
		float mul_3_o,
		float mul_4_o,
		float neg_2_o
	do
		foreach int j in 0 .. RATE-1
		do
			io1[j] := i[j];
			qo1[j] := q[j];
			io4[j] := i[j];
			abs_sqr_o := i[j] * i[j] + q[j] * q[j];
			neg_1_o := -q[j];
			mul_1_o := i[j] * abs_sqr_o;
			sq_o := abs_sqr_o * abs_sqr_o;
			mul_2_o := q[j] * abs_sqr_o;
			qo4[j] := neg_1_o;
			io2[j] := mul_1_o;
			mul_3_o := sq_o * i[j];
			io5[j] := mul_1_o;
			mul_4_o := sq_o * q[j];
			neg_2_o := -mul_2_o;
			qo2[j] := mul_2_o;
			io3[j] := mul_3_o;
			qo3[j] := mul_4_o;
			qo5[j] := neg_2_o;
		end
    end
	
end