/**
 * This FU gives implementation of ARC4_PRG (stream cipher) in RVC-CAL.
 * The terms and names of variables used in this FU follow the Wikipedia page of RC4:
 * http://en.wikipedia.org/wiki/RC4
 * 
 * FU ID: ARC4_PRG
 * One input ports:
 *   1) uint(size=8) Key: key (the first byte is the key size))
 * One output port:
 *   1) uint(size=8) OP: output byte (pseudo random number).
 * 
 * Developers: Junaid Jameel Ahmad, Shujun Li @ Uni-Konstanz 2010 
 * Last Modified: 23.04.2012
 */

package Stream_Ciphers.ARC4;

actor ARC4_PRG() uint(size=8) Key ==> uint(size=8) OP:

	uint KEY_SIZE_MAX = 256; // maximum key size (in byte)
	List(type:uint(size=8), size=KEY_SIZE_MAX) key := [0: for int a in 1 .. KEY_SIZE_MAX];
	List(type:uint(size=8), size=256) S := [a: for int a in 0 .. 255]; // S-box

	// Two flags controlling firings of different actions.
	bool keySizeReceived := false;
	bool keyReceived := false;

	uint keySize := 0; // Size of the received key (in byte).
	receiveSize:
	action Key:[k] ==>
	guard not keySizeReceived
	do
		keySize := k;
		keySizeReceived := true;
	end
		
	procedure swap(int a, int b)
	var uint(size=8) temp
	begin	
		temp := S[a];
		S[a] := S[b];
		S[b] := temp;
	end
	
	uint(size=8) keyCounter := 0; // Index of the current key byte.
	
	// Key-scheduling action, which also reads the key from the input port.
	keySchedule: 
	action Key:[k] ==>
	guard (keySizeReceived and not keyReceived)
	var int b, int c
	do
		key[keyCounter] := k;
		keyCounter := keyCounter + 1;
		if (keyCounter = keySize) then
			keyReceived := true;
			b := 0;
			foreach int a in 0 .. 255 do
				c := a - ((a / keySize) * keySize); // == a mod keySize (keySize is not required to be 2^y;
				b := (b + S[a] + key[c]) & 255; // For any n = 2^y, x mod n <=> x & (n-1). 
				swap(a,b);
			end			
		end		
	end

	// Main action: PRG.
	int i := 0;
	int j := 0;
	int byte := 0;
	generatePRG:
	action ==> OP:[byte]
	guard keyReceived
	do
		// For any n = 2^y, x mod n <=> x & (n-1).
		i := (i + 1) & 255;
		j := (j + S[i]) & 255;
		swap(i,j);
		byte := S[(S[i] + S[j]) & 255];
	end
	
end